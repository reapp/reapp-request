/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;var require;var require;"use strict";

	/******/(function (modules) {
	  /******/
	  /******/ // The require function
	  /******/var __webpack_require__ = function (moduleId) {
	    /******/
	    /******/ // Check if module is in cache
	    /******/if (installedModules[moduleId])
	      /******/return installedModules[moduleId].exports;
	    /******/
	    /******/ // Create a new module (and put it into the cache)
	    /******/var module = installedModules[moduleId] = {
	      /******/exports: {},
	      /******/id: moduleId,
	      /******/loaded: false
	      /******/ };
	    /******/
	    /******/ // Execute the module function
	    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	    /******/
	    /******/ // Flag the module as loaded
	    /******/module.loaded = true;
	    /******/
	    /******/ // Return the exports of the module
	    /******/return module.exports;
	    /******/
	  };

	  // webpackBootstrap
	  /******/ // The module cache
	  /******/var installedModules = {};
	  /******/
	  /******/
	  /******/ // expose the modules object (__webpack_modules__)
	  /******/__webpack_require__.m = modules;
	  /******/
	  /******/ // expose the module cache
	  /******/__webpack_require__.c = installedModules;
	  /******/
	  /******/ // __webpack_public_path__
	  /******/__webpack_require__.p = "";
	  /******/
	  /******/ // Load entry module and return exports
	  /******/return __webpack_require__(0);
	  /******/
	})([
	/* 0 */
	/***/function (module, exports, __webpack_require__) {
	  var require;var require;var require;var require; /* WEBPACK VAR INJECTION */(function (Buffer) {
	    "use strict";

	    /******/(function (modules) {
	      /******/
	      /******/ // The require function
	      /******/var __webpack_require__ = function (moduleId) {
	        /******/
	        /******/ // Check if module is in cache
	        /******/if (installedModules[moduleId])
	          /******/return installedModules[moduleId].exports;
	        /******/
	        /******/ // Create a new module (and put it into the cache)
	        /******/var module = installedModules[moduleId] = {
	          /******/exports: {},
	          /******/id: moduleId,
	          /******/loaded: false
	          /******/ };
	        /******/
	        /******/ // Execute the module function
	        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	        /******/
	        /******/ // Flag the module as loaded
	        /******/module.loaded = true;
	        /******/
	        /******/ // Return the exports of the module
	        /******/return module.exports;
	        /******/
	      };

	      // webpackBootstrap
	      /******/ // The module cache
	      /******/var installedModules = {};
	      /******/
	      /******/
	      /******/ // expose the modules object (__webpack_modules__)
	      /******/__webpack_require__.m = modules;
	      /******/
	      /******/ // expose the module cache
	      /******/__webpack_require__.c = installedModules;
	      /******/
	      /******/ // __webpack_public_path__
	      /******/__webpack_require__.p = "";
	      /******/
	      /******/ // Load entry module and return exports
	      /******/return __webpack_require__(0);
	      /******/
	    })([
	    /* 0 */
	    /***/function (module, exports, __webpack_require__) {
	      var require;var require;var require;var require; /* WEBPACK VAR INJECTION */(function (Buffer, process, global, setImmediate) {
	        "use strict";

	        /******/(function (modules) {
	          /******/
	          /******/ // The require function
	          /******/var __webpack_require__ = function (moduleId) {
	            /******/
	            /******/ // Check if module is in cache
	            /******/if (installedModules[moduleId])
	              /******/return installedModules[moduleId].exports;
	            /******/
	            /******/ // Create a new module (and put it into the cache)
	            /******/var module = installedModules[moduleId] = {
	              /******/exports: {},
	              /******/id: moduleId,
	              /******/loaded: false
	              /******/ };
	            /******/
	            /******/ // Execute the module function
	            /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	            /******/
	            /******/ // Flag the module as loaded
	            /******/module.loaded = true;
	            /******/
	            /******/ // Return the exports of the module
	            /******/return module.exports;
	            /******/
	          };

	          // webpackBootstrap
	          /******/ // The module cache
	          /******/var installedModules = {};
	          /******/
	          /******/
	          /******/ // expose the modules object (__webpack_modules__)
	          /******/__webpack_require__.m = modules;
	          /******/
	          /******/ // expose the module cache
	          /******/__webpack_require__.c = installedModules;
	          /******/
	          /******/ // __webpack_public_path__
	          /******/__webpack_require__.p = "";
	          /******/
	          /******/ // Load entry module and return exports
	          /******/return __webpack_require__(0);
	          /******/
	        })([
	        /* 0 */
	        /***/function (module, exports, __webpack_require__) {
	          "use strict";

	          var error = function (err) {
	            throw new Error(err);
	          };

	          var _prototypeProperties = function (child, staticProps, instanceProps) {
	            if (staticProps) Object.defineProperties(child, staticProps);
	            if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
	          };

	          var Parseurl = __webpack_require__(1);
	          var Superagent = __webpack_require__(3);
	          var _require = __webpack_require__(4);

	          var Promise = _require.Promise;


	          __webpack_require__(2);

	          // todo: localforage/storage support

	          var Client = (function () {
	            var Client = function (_ref) {
	              var base = _ref.base;
	              this.base = base || "";
	              this.requests = {};
	            };

	            _prototypeProperties(Client, null, {
	              setBase: {
	                value: function setBase(url) {
	                  this.base = url;
	                },
	                writable: true,
	                enumerable: true,
	                configurable: true
	              },
	              getUrl: {
	                value: function getUrl(url) {
	                  var host = new Parseurl(url).host;
	                  return host ? url : this.base + url;
	                },
	                writable: true,
	                enumerable: true,
	                configurable: true
	              },
	              get: {
	                value: function get(url, opts) {
	                  var _this = this;
	                  opts = opts || {};

	                  if (!opts.nocache && this.requests[url]) return Promise.resolve(this.requests[url]);else return Superagent.get(this.getUrl(url)).promise().then(function (res) {
	                    _this.requests[url] = res.body;
	                    return res.body;
	                  }, error);
	                }

	                // todo: post, etc
	                ,
	                writable: true,
	                enumerable: true,
	                configurable: true
	              }
	            });

	            return Client;
	          })();

	          module.exports = Client;

	          /***/
	        },
	        /* 1 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * Parse the `req` url with memoization.
	           *
	           * @param {ServerRequest} req
	           * @return {Object}
	           * @api public
	           */

	          var parseurl = function (req) {
	            var url = req.url;

	            if (url === undefined) {
	              // URL is undefined
	              return undefined;
	            }

	            var parsed = req._parsedUrl;

	            if (fresh(url, parsed)) {
	              // Return cached URL parse
	              return parsed;
	            }

	            // Parse the URL
	            parsed = fastparse(url);
	            parsed._raw = url;

	            return req._parsedUrl = parsed;
	          };

	          /**
	           * Parse the `req` original url with fallback and memoization.
	           *
	           * @param {ServerRequest} req
	           * @return {Object}
	           * @api public
	           */

	          var originalurl = function (req) {
	            var url = req.originalUrl;

	            if (typeof url !== "string") {
	              // Fallback
	              return parseurl(req);
	            }

	            var parsed = req._parsedOriginalUrl;

	            if (fresh(url, parsed)) {
	              // Return cached URL parse
	              return parsed;
	            }

	            // Parse the URL
	            parsed = fastparse(url);
	            parsed._raw = url;

	            return req._parsedOriginalUrl = parsed;
	          };

	          /**
	           * Parse the `str` url with fast-path short-cut.
	           *
	           * @param {string} str
	           * @return {Object}
	           * @api private
	           */

	          var fastparse = function (str) {
	            // Try fast path regexp
	            // See: https://github.com/joyent/node/pull/7878
	            var simplePath = typeof str === "string" && simplePathRegExp.exec(str);

	            // Construct simple URL
	            if (simplePath) {
	              var pathname = simplePath[1];
	              var search = simplePath[2] || null;
	              var url = Url !== undefined ? new Url() : {};
	              url.path = str;
	              url.href = str;
	              url.pathname = pathname;
	              url.search = search;
	              url.query = search && search.substr(1);

	              return url;
	            }

	            return parse(str);
	          };

	          /**
	           * Determine if parsed is still fresh for url.
	           *
	           * @param {string} url
	           * @param {object} parsedUrl
	           * @return {boolean}
	           * @api private
	           */

	          var fresh = function (url, parsedUrl) {
	            return typeof parsedUrl === "object" && parsedUrl !== null && (Url === undefined || parsedUrl instanceof Url) && parsedUrl._raw === url;
	          }


	          /***/;

	          /*!
	           * parseurl
	           * Copyright(c) 2014 Jonathan Ong
	           * Copyright(c) 2014 Douglas Christopher Wilson
	           * MIT Licensed
	           */

	          /**
	           * Module dependencies.
	           */

	          var url = __webpack_require__(5);
	          var parse = url.parse;
	          var Url = url.Url;

	          /**
	           * Pattern for a simple path case.
	           * See: https://github.com/joyent/node/pull/7878
	           */

	          var simplePathRegExp = /^(\/\/?(?!\/)[^\?#\s]*)(\?[^#\s]*)?$/;

	          /**
	           * Exports.
	           */

	          module.exports = parseurl;
	          module.exports.original = originalurl;;;
	        },
	        /* 2 */
	        /***/function (module, exports, __webpack_require__) {
	          // From https://gist.github.com/epeli/11209665

	          var Promise = __webpack_require__(4);

	          var Request = __webpack_require__(3).Request;

	          /**
	           * @namespace utils
	           * @class Superagent
	           */

	          /**
	           *
	           * Add promise support for superagent/supertest
	           *
	           * Call .promise() to return promise for the request
	           *
	           * @method promise
	           * @return {Bluebird.Promise}
	           */
	          Request.prototype.promise = function () {
	            var self = this;
	            return new Promise(function (resolve, reject) {
	              self.end(function (err, res) {
	                if (typeof res != "undefined" && res.status >= 400) {
	                  reject({
	                    status: res.status,
	                    res: res,
	                    error: res.error
	                  });
	                } else if (err) {
	                  reject({
	                    error: err
	                  });
	                } else {
	                  resolve(res);
	                }
	              });
	            });
	          };


	          /***/
	        },
	        /* 3 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * Noop.
	           */

	          var noop = function () {};

	          /**
	           * Check if `obj` is an object.
	           *
	           * @param {Object} obj
	           * @return {Boolean}
	           * @api private
	           */

	          var isObject = function (obj) {
	            return null != obj && "object" == typeof obj;
	          };

	          /**
	           * Initialize a new `Request` with the given `method` and `url`.
	           *
	           * @param {String} method
	           * @param {String|Object} url
	           * @api public
	           */

	          var Request = function (method, url) {
	            Stream.call(this);
	            var self = this;
	            if ("string" != typeof url) url = format(url);
	            this._agent = false;
	            this._formData = null;
	            this.method = method;
	            this.url = url;
	            this.header = {};
	            this.writable = true;
	            this._redirects = 0;
	            this.redirects(5);
	            this.cookies = "";
	            this.qs = {};
	            this._redirectList = [];
	            this.on("end", this.clearTimeout.bind(this));
	            this.on("response", function (res) {
	              self.callback(null, res);
	            });
	          };

	          /**
	           * Issue a request:
	           *
	           * Examples:
	           *
	           *    request('GET', '/users').end(callback)
	           *    request('/users').end(callback)
	           *    request('/users', callback)
	           *
	           * @param {String} method
	           * @param {String|Function} url or callback
	           * @return {Request}
	           * @api public
	           */

	          var request = function (method, url) {
	            // callback
	            if ("function" == typeof url) {
	              return new Request("GET", method).end(url);
	            }

	            // url first
	            if (1 == arguments.length) {
	              return new Request("GET", method);
	            }

	            return new Request(method, url);
	          };

	          /**
	           * Check if `mime` is text and should be buffered.
	           *
	           * @param {String} mime
	           * @return {Boolean}
	           * @api public
	           */

	          var isText = function (mime) {
	            var parts = mime.split("/");
	            var type = parts[0];
	            var subtype = parts[1];

	            return "text" == type || "json" == subtype || "x-www-form-urlencoded" == subtype;
	          };

	          /**
	           * Check if `mime` is image
	           *
	           * @param {String} mime
	           * @return {Boolean}
	           * @api public
	           */

	          var isImage = function (mime) {
	            var parts = mime.split("/");
	            var type = parts[0];
	            var subtype = parts[1];

	            return "image" == type;
	          };

	          /**
	           * Check if we should follow the redirect `code`.
	           *
	           * @param {Number} code
	           * @return {Boolean}
	           * @api private
	           */

	          var isRedirect = function (code) {
	            return ~[301, 302, 303, 305, 307].indexOf(code);
	          }


	          /***/;




	          /**
	           * Module dependencies.
	           */

	          var debug = __webpack_require__(23)("superagent");
	          var formidable = __webpack_require__(24);
	          var FormData = __webpack_require__(25);
	          var Response = __webpack_require__(12);
	          var parse = __webpack_require__(5).parse;
	          var format = __webpack_require__(5).format;
	          var methods = __webpack_require__(19);
	          var Stream = __webpack_require__(6);
	          var utils = __webpack_require__(13);
	          var extend = __webpack_require__(20);
	          var Part = __webpack_require__(14);
	          var mime = __webpack_require__(26);
	          var https = __webpack_require__(7);
	          var http = __webpack_require__(8);
	          var fs = __webpack_require__(9);
	          var qs = __webpack_require__(21);
	          var zlib = __webpack_require__(10);
	          var util = __webpack_require__(11);
	          var pkg = __webpack_require__(!(function webpackMissingModule() {
	            var e = new Error("Cannot find module \"../../package.json\"");e.code = "MODULE_NOT_FOUND";throw e;
	          })());

	          /**
	           * Expose the request function.
	           */

	          exports = module.exports = request;

	          /**
	           * Expose the agent function
	           */

	          exports.agent = __webpack_require__(16);

	          /**
	           * Expose `Part`.
	           */

	          exports.Part = Part;;

	          /**
	           * Expose `Response`.
	           */

	          exports.Response = Response;

	          /**
	           * Define "form" mime type.
	           */

	          mime.define({
	            "application/x-www-form-urlencoded": ["form", "urlencoded", "form-data"]
	          });

	          /**
	           * Protocol map.
	           */

	          exports.protocols = {
	            "http:": http,
	            "https:": https
	          };

	          /**
	           * Default serialization map.
	           *
	           *     superagent.serialize['application/xml'] = function(obj){
	           *       return 'generated xml here';
	           *     };
	           *
	           */

	          exports.serialize = {
	            "application/x-www-form-urlencoded": qs.stringify,
	            "application/json": JSON.stringify
	          };

	          /**
	           * Default parsers.
	           *
	           *     superagent.parse['application/xml'] = function(res, fn){
	           *       fn(null, result);
	           *     };
	           *
	           */

	          exports.parse = __webpack_require__(18);

	          /**
	           * Inherit from `Stream`.
	           */

	          util.inherits(Request, Stream);

	          /**
	           * Write the field `name` and `val` for "multipart/form-data"
	           * request bodies.
	           *
	           * ``` js
	           * request.post('http://localhost/upload')
	           *   .field('foo', 'bar')
	           *   .end(callback);
	           * ```
	           *
	           * @param {String} name
	           * @param {String|Buffer|fs.ReadStream} val
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.field = function (name, val) {
	            debug("field", name, val);
	            if (!this._formData) this._formData = new FormData();
	            this._formData.append(name, val);
	            return this;
	          };

	          /**
	           * Queue the given `file` as an attachment to the specified `field`,
	           * with optional `filename`.
	           *
	           * ``` js
	           * request.post('http://localhost/upload')
	           *   .attach(new Buffer('<b>Hello world</b>'), 'hello.html')
	           *   .end(callback);
	           * ```
	           *
	           * A filename may also be used:
	           *
	           * ``` js
	           * request.post('http://localhost/upload')
	           *   .attach('files', 'image.jpg')
	           *   .end(callback);
	           * ```
	           *
	           * @param {String} field
	           * @param {String|fs.ReadStream|Buffer} file
	           * @param {String} filename
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.attach = function (field, file, filename) {
	            if (!this._formData) this._formData = new FormData();
	            if ("string" == typeof file) {
	              filename = file;
	              debug("creating `fs.ReadStream` instance for file: %s", filename);
	              file = fs.createReadStream(filename);
	            }
	            this._formData.append(field, file, filename);
	            return this;
	          };

	          /**
	           * Set the max redirects to `n`.
	           *
	           * @param {Number} n
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.redirects = function (n) {
	            debug("max redirects %s", n);
	            this._maxRedirects = n;
	            return this;
	          };

	          /**
	           * Return a new `Part` for this request.
	           *
	           * @return {Part}
	           * @api public
	           * @deprecated pass a readable stream in to `Request#attach()` instead
	           */

	          Request.prototype.part = util.deprecate(function () {
	            return new Part(this);
	          }, "`Request#part()` is deprecated. " + "Pass a readable stream in to `Request#attach()` instead.");

	          /**
	           * Gets/sets the `Agent` to use for this HTTP request. The default (if this
	           * function is not called) is to opt out of connection pooling (`agent: false`).
	           *
	           * @param {http.Agent} agent
	           * @return {http.Agent}
	           * @api public
	           */

	          Request.prototype.agent = function (agent) {
	            if (!arguments.length) return this._agent;
	            this._agent = agent;
	            return this;
	          };

	          /**
	           * Set header `field` to `val`, or multiple fields with one object.
	           *
	           * Examples:
	           *
	           *      req.get('/')
	           *        .set('Accept', 'application/json')
	           *        .set('X-API-Key', 'foobar')
	           *        .end(callback);
	           *
	           *      req.get('/')
	           *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	           *        .end(callback);
	           *
	           * @param {String|Object} field
	           * @param {String} val
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.set = function (field, val) {
	            if (isObject(field)) {
	              for (var key in field) {
	                this.set(key, field[key]);
	              }
	              return this;
	            }

	            debug("set %s \"%s\"", field, val);
	            this.request().setHeader(field, val);
	            return this;
	          };

	          /**
	           * Remove header `field`.
	           *
	           * Example:
	           *
	           *      req.get('/')
	           *        .unset('User-Agent')
	           *        .end(callback);
	           *
	           * @param {String} field
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.unset = function (field) {
	            debug("unset %s", field);
	            this.request().removeHeader(field);
	            return this;
	          };

	          /**
	           * Get request header `field`.
	           *
	           * @param {String} field
	           * @return {String}
	           * @api public
	           */

	          Request.prototype.get = function (field) {
	            return this.request().getHeader(field);
	          };

	          /**
	           * Set _Content-Type_ response header passed through `mime.lookup()`.
	           *
	           * Examples:
	           *
	           *      request.post('/')
	           *        .type('xml')
	           *        .send(xmlstring)
	           *        .end(callback);
	           *
	           *      request.post('/')
	           *        .type('json')
	           *        .send(jsonstring)
	           *        .end(callback);
	           *
	           *      request.post('/')
	           *        .type('application/json')
	           *        .send(jsonstring)
	           *        .end(callback);
	           *
	           * @param {String} type
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.type = function (type) {
	            return this.set("Content-Type", ~type.indexOf("/") ? type : mime.lookup(type));
	          };

	          /**
	           * Set _Accept_ response header passed through `mime.lookup()`.
	           *
	           * Examples:
	           *
	           *      superagent.types.json = 'application/json';
	           *
	           *      request.get('/agent')
	           *        .accept('json')
	           *        .end(callback);
	           *
	           *      request.get('/agent')
	           *        .accept('application/json')
	           *        .end(callback);
	           *
	           * @param {String} accept
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.accept = function (type) {
	            return this.set("Accept", ~type.indexOf("/") ? type : mime.lookup(type));
	          };

	          /**
	           * Add query-string `val`.
	           *
	           * Examples:
	           *
	           *   request.get('/shoes')
	           *     .query('size=10')
	           *     .query({ color: 'blue' })
	           *
	           * @param {Object|String} val
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.query = function (val) {
	            var obj = {};

	            if ("string" == typeof val) {
	              var elements = val.split("&");
	              for (var i = 0; i < elements.length; i++) {
	                var parts = elements[i].split("=");
	                obj[parts[0]] = parts[1];
	              }
	              return this.query(obj);
	            }

	            extend(this.qs, val);
	            return this;
	          };

	          /**
	           * Send `data`, defaulting the `.type()` to "json" when
	           * an object is given.
	           *
	           * Examples:
	           *
	           *       // manual json
	           *       request.post('/user')
	           *         .type('json')
	           *         .send('{"name":"tj"}')
	           *         .end(callback)
	           *
	           *       // auto json
	           *       request.post('/user')
	           *         .send({ name: 'tj' })
	           *         .end(callback)
	           *
	           *       // manual x-www-form-urlencoded
	           *       request.post('/user')
	           *         .type('form')
	           *         .send('name=tj')
	           *         .end(callback)
	           *
	           *       // auto x-www-form-urlencoded
	           *       request.post('/user')
	           *         .type('form')
	           *         .send({ name: 'tj' })
	           *         .end(callback)
	           *
	           *       // string defaults to x-www-form-urlencoded
	           *       request.post('/user')
	           *         .send('name=tj')
	           *         .send('foo=bar')
	           *         .send('bar=baz')
	           *         .end(callback)
	           *
	           * @param {String|Object} data
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.send = function (data) {
	            var obj = isObject(data);
	            var req = this.request();
	            var type = req.getHeader("Content-Type");

	            // merge
	            if (obj && isObject(this._data)) {
	              for (var key in data) {
	                this._data[key] = data[key];
	              }
	              // string
	            } else if ("string" == typeof data) {
	              // default to x-www-form-urlencoded
	              if (!type) this.type("form");
	              type = req.getHeader("Content-Type");

	              // concat &
	              if ("application/x-www-form-urlencoded" == type) {
	                this._data = this._data ? this._data + "&" + data : data;
	              } else {
	                this._data = (this._data || "") + data;
	              }
	            } else {
	              this._data = data;
	            }

	            if (!obj) return this;

	            // default to json
	            if (!type) this.type("json");
	            return this;
	          };

	          /**
	           * Write raw `data` / `encoding` to the socket.
	           *
	           * @param {Buffer|String} data
	           * @param {String} encoding
	           * @return {Boolean}
	           * @api public
	           */

	          Request.prototype.write = function (data, encoding) {
	            return this.request().write(data, encoding);
	          };

	          /**
	           * Pipe the request body to `stream`.
	           *
	           * @param {Stream} stream
	           * @param {Object} options
	           * @return {Stream}
	           * @api public
	           */

	          Request.prototype.pipe = function (stream, options) {
	            this.piped = true; // HACK...
	            this.buffer(false);
	            this.end().req.on("response", function (res) {
	              if (/^(deflate|gzip)$/.test(res.headers["content-encoding"])) {
	                res.pipe(zlib.createUnzip()).pipe(stream, options);
	              } else {
	                res.pipe(stream, options);
	              }
	            });
	            return stream;
	          };

	          /**
	           * Enable / disable buffering.
	           *
	           * @return {Boolean} [val]
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.buffer = function (val) {
	            this._buffer = false === val ? false : true;
	            return this;
	          };

	          /**
	           * Set timeout to `ms`.
	           *
	           * @param {Number} ms
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.timeout = function (ms) {
	            this._timeout = ms;
	            return this;
	          };

	          /**
	           * Clear previous timeout.
	           *
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.clearTimeout = function () {
	            debug("clear timeout %s %s", this.method, this.url);
	            this._timeout = 0;
	            clearTimeout(this._timer);
	            return this;
	          };

	          /**
	           * Abort and clear timeout.
	           *
	           * @api public
	           */

	          Request.prototype.abort = function () {
	            debug("abort %s %s", this.method, this.url);
	            this._aborted = true;
	            this.clearTimeout();
	            this.req.abort();
	            this.emit("abort");
	          };

	          /**
	           * Define the parser to be used for this response.
	           *
	           * @param {Function} fn
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.parse = function (fn) {
	            this._parser = fn;
	            return this;
	          };

	          /**
	           * Redirect to `url
	           *
	           * @param {IncomingMessage} res
	           * @return {Request} for chaining
	           * @api private
	           */

	          Request.prototype.redirect = function (res) {
	            var url = res.headers.location;
	            debug("redirect %s -> %s", this.url, url);

	            // location
	            if (! ~url.indexOf("://")) {
	              if (0 != url.indexOf("//")) {
	                url = "//" + this.host + url;
	              }
	              url = this.protocol + url;
	            }

	            // ensure the response is being consumed
	            // this is required for Node v0.10+
	            res.resume();

	            // strip Content-* related fields
	            // in case of POST etc
	            var header = utils.cleanHeader(this.req._headers);
	            delete this.req;

	            // force GET
	            this.method = "HEAD" == this.method ? "HEAD" : "GET";

	            // redirect
	            this._data = null;
	            this.url = url;
	            this._redirectList.push(url);
	            this.clearTimeout();
	            this.emit("redirect", res);
	            this.set(header);
	            this.end(this._callback);
	            return this;
	          };

	          /**
	           * Set Authorization field value with `user` and `pass`.
	           *
	           * Examples:
	           *
	           *   .auth('tobi', 'learnboost')
	           *   .auth('tobi:learnboost')
	           *   .auth('tobi')
	           *
	           * @param {String} user
	           * @param {String} pass
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.auth = function (user, pass) {
	            if (1 === arguments.length) pass = "";
	            if (! ~user.indexOf(":")) user = user + ":";
	            var str = new Buffer(user + pass).toString("base64");
	            return this.set("Authorization", "Basic " + str);
	          };

	          /**
	           * Set the certificate authority option for https request.
	           *
	           * @param {Buffer | Array} cert
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.ca = function (cert) {
	            this._ca = cert;
	            return this;
	          };

	          /**
	           * Allow for extension
	           */

	          Request.prototype.use = function (fn) {
	            fn(this);
	            return this;
	          };

	          /**
	           * Return an http[s] request.
	           *
	           * @return {OutgoingMessage}
	           * @api private
	           */

	          Request.prototype.request = function () {
	            if (this.req) return this.req;

	            var self = this;
	            var options = {};
	            var data = this._data;
	            var url = this.url;

	            // default to http://
	            if (0 != url.indexOf("http")) url = "http://" + url;
	            url = parse(url, true);

	            // options
	            options.method = this.method;
	            options.port = url.port;
	            options.path = url.pathname;
	            options.host = url.hostname;
	            options.ca = this._ca;
	            options.agent = this._agent;

	            // initiate request
	            var mod = exports.protocols[url.protocol];

	            // request
	            var req = this.req = mod.request(options);
	            if ("HEAD" != options.method) req.setHeader("Accept-Encoding", "gzip, deflate");
	            this.protocol = url.protocol;
	            this.host = url.host;

	            // expose events
	            req.on("drain", function () {
	              self.emit("drain");
	            });

	            req.on("error", function (err) {
	              // flag abortion here for out timeouts
	              // because node will emit a faux-error "socket hang up"
	              // when request is aborted before a connection is made
	              if (self._aborted) return;
	              self.callback(err);
	            });

	            // auth
	            if (url.auth) {
	              var auth = url.auth.split(":");
	              this.auth(auth[0], auth[1]);
	            }

	            // query
	            this.query(url.query);

	            // add cookies
	            if (this.cookies) req.setHeader("Cookie", this.cookies);

	            // set default UA
	            req.setHeader("User-Agent", "node-superagent/" + pkg.version);

	            return req;
	          };

	          /**
	           * Invoke the callback with `err` and `res`
	           * and handle arity check.
	           *
	           * @param {Error} err
	           * @param {Response} res
	           * @api private
	           */

	          Request.prototype.callback = function (err, res) {
	            var fn = this._callback;
	            this.clearTimeout();
	            if (this.called) return console.warn("double callback!");
	            this.called = true;
	            if (2 == fn.length) return fn(err, res);
	            if (err) return this.emit("error", err);
	            fn(res);
	          };

	          /**
	           * Initiate request, invoking callback `fn(err, res)`
	           * with an instanceof `Response`.
	           *
	           * @param {Function} fn
	           * @return {Request} for chaining
	           * @api public
	           */

	          Request.prototype.end = function (fn) {
	            var self = this;
	            var data = this._data;
	            var req = this.request();
	            var buffer = this._buffer;
	            var method = this.method;
	            var timeout = this._timeout;
	            debug("%s %s", this.method, this.url);

	            // store callback
	            this._callback = fn || noop;

	            // querystring
	            try {
	              var querystring = qs.stringify(this.qs);
	              req.path += querystring.length ? (~req.path.indexOf("?") ? "&" : "?") + querystring : "";
	            } catch (e) {
	              return this.callback(e);
	            }

	            // timeout
	            if (timeout && !this._timer) {
	              debug("timeout %sms %s %s", timeout, this.method, this.url);
	              this._timer = setTimeout(function () {
	                var err = new Error("timeout of " + timeout + "ms exceeded");
	                err.timeout = timeout;
	                self.abort();
	                self.callback(err);
	              }, timeout);
	            }

	            // body
	            if ("HEAD" != method && !req._headerSent) {
	              // serialize stuff
	              if ("string" != typeof data) {
	                var contentType = req.getHeader("Content-Type");
	                // Parse out just the content type from the header (ignore the charset)
	                if (contentType) contentType = contentType.split(";")[0];
	                var serialize = exports.serialize[contentType];
	                if (serialize) data = serialize(data);
	              }

	              // content-length
	              if (data && !req.getHeader("Content-Length")) {
	                this.set("Content-Length", Buffer.byteLength(data));
	              }
	            }

	            // response
	            req.on("response", function (res) {
	              debug("%s %s -> %s", self.method, self.url, res.statusCode);
	              var max = self._maxRedirects;
	              var mime = utils.type(res.headers["content-type"] || "");
	              var len = res.headers["content-length"];
	              var type = mime.split("/");
	              var subtype = type[1];
	              var type = type[0];
	              var multipart = "multipart" == type;
	              var redirect = isRedirect(res.statusCode);
	              var parser = self._parser;

	              self.res = res;

	              if ("HEAD" == self.method) {
	                var response = new Response(self);
	                self.response = response;
	                response.redirects = self._redirectList;
	                self.emit("response", response);
	                self.emit("end");
	                return;
	              }

	              if (self.piped) {
	                res.on("end", function () {
	                  self.emit("end");
	                });
	                return;
	              }

	              // redirect
	              if (redirect && self._redirects++ != max) {
	                return self.redirect(res);
	              }

	              // zlib support
	              if (/^(deflate|gzip)$/.test(res.headers["content-encoding"])) {
	                utils.unzip(req, res);
	              }

	              // don't buffer multipart
	              if (multipart) buffer = false;

	              // TODO: make all parsers take callbacks
	              if (!parser && multipart) {
	                var form = new formidable.IncomingForm();

	                form.parse(res, function (err, fields, files) {
	                  if (err) return self.callback(err);
	                  var response = new Response(self);
	                  self.response = response;
	                  response.body = fields;
	                  response.files = files;
	                  response.redirects = self._redirectList;
	                  self.emit("end");
	                  self.callback(null, response);
	                });
	                return;
	              }

	              // check for images, one more special treatment
	              if (!parser && isImage(mime)) {
	                exports.parse.image(res, function (err, obj) {
	                  if (err) return self.callback(err);
	                  var response = new Response(self);
	                  self.response = response;
	                  response.body = obj;
	                  response.redirects = self._redirectList;
	                  self.emit("end");
	                  self.callback(null, response);
	                });
	                return;
	              }

	              // by default only buffer text/*, json
	              // and messed up thing from hell
	              var text = isText(mime);
	              if (null == buffer && text) buffer = true;

	              // parser
	              var parse = "text" == type ? exports.parse.text : exports.parse[mime];

	              // buffered response
	              if (buffer) parse = parse || exports.parse.text;

	              // explicit parser
	              if (parser) parse = parser;

	              // parse
	              if (parse) {
	                try {
	                  parse(res, function (err, obj) {
	                    if (err) self.callback(err);
	                    res.body = obj;
	                  });
	                } catch (err) {
	                  self.callback(err);
	                  return;
	                }
	              }

	              // unbuffered
	              if (!buffer) {
	                debug("unbuffered %s %s", self.method, self.url);
	                self.res = res;
	                var response = new Response(self);
	                self.response = response;
	                response.redirects = self._redirectList;
	                self.emit("response", response);
	                if (multipart) return; // allow multipart to handle end event
	                res.on("end", function () {
	                  debug("end %s %s", self.method, self.url);
	                  self.emit("end");
	                });
	                return;
	              }

	              // end event
	              self.res = res;
	              res.on("end", function () {
	                debug("end %s %s", self.method, self.url);
	                // TODO: unless buffering emit earlier to stream
	                var response = new Response(self);
	                self.response = response;
	                response.redirects = self._redirectList;
	                self.emit("response", response);
	                self.emit("end");
	              });
	            });

	            this.emit("request", this);

	            // if a FormData instance got created, then we send that as the request body
	            var formData = this._formData;
	            if (formData) {
	              // set headers
	              var headers = formData.getHeaders();
	              for (var i in headers) {
	                debug("setting FormData header: \"%s: %s\"", i, headers[i]);
	                req.setHeader(i, headers[i]);
	              }

	              // attempt to get "Content-Length" header
	              formData.getLength(function (err, length) {
	                // TODO: Add chunked encoding when no length (if err)

	                debug("got FormData Content-Length: %s", length);
	                if ("number" == typeof length) {
	                  req.setHeader("Content-Length", length);
	                }

	                formData.pipe(req);
	              });
	            } else {
	              req.end(data);
	            }

	            return this;
	          };

	          /**
	           * To json.
	           *
	           * @return {Object}
	           * @api public
	           */

	          Request.prototype.toJSON = function () {
	            return {
	              method: this.method,
	              url: this.url,
	              data: this._data
	            };
	          };

	          /**
	           * Expose `Request`.
	           */

	          exports.Request = Request;

	          // generate HTTP verb methods

	          methods.forEach(function (method) {
	            var name = "delete" == method ? "del" : method;
	            method = method.toUpperCase();
	            request[name] = function (url, fn) {
	              var req = request(method, url);
	              fn && req.end(fn);
	              return req;
	            };
	          });
	        },
	        /* 4 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var noConflict = function (bluebird) {
	            try {
	              if (Promise === bluebird) Promise = old;
	            } catch (e) {}
	            return bluebird;
	          };

	          var old;
	          if (typeof Promise !== "undefined") old = Promise;
	          module.exports = __webpack_require__(17)();
	          module.exports.noConflict = noConflict;


	          /***/
	        },
	        /* 5 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(1);

	          /***/
	        },
	        /* 6 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(2);

	          /***/
	        },
	        /* 7 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(3);

	          /***/
	        },
	        /* 8 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(4);

	          /***/
	        },
	        /* 9 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(!(function webpackMissingModule() {
	            var e = new Error("Cannot find module \"fs\"");e.code = "MODULE_NOT_FOUND";throw e;
	          })());

	          /***/
	        },
	        /* 10 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(13);

	          /***/
	        },
	        /* 11 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(5);

	          /***/
	        },
	        /* 12 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * Initialize a new `Response` with the given `xhr`.
	           *
	           *  - set flags (.ok, .error, etc)
	           *  - parse header
	           *
	           * @param {Request} req
	           * @param {Object} options
	           * @constructor
	           * @extends {Stream}
	           * @implements {ReadableStream}
	           * @api private
	           */

	          var Response = function (req, options) {
	            Stream.call(this);
	            options = options || {};
	            var res = this.res = req.res;
	            this.request = req;
	            this.req = req.req;
	            this.links = {};
	            this.text = res.text;
	            this.body = res.body || {};
	            this.files = res.files || {};
	            this.buffered = "string" == typeof this.text;
	            this.header = this.headers = res.headers;
	            this.setStatusProperties(res.statusCode);
	            this.setHeaderProperties(this.header);
	            this.setEncoding = res.setEncoding.bind(res);
	            res.on("data", this.emit.bind(this, "data"));
	            res.on("end", this.emit.bind(this, "end"));
	            res.on("close", this.emit.bind(this, "close"));
	            res.on("error", this.emit.bind(this, "error"));
	          };

	          /**
	           * Parse cookies from the header into an array.
	           */

	          var parseCookies = function (header) {
	            return Array.isArray(header) ? header.map(Cookie.parse) : [Cookie.parse(header)];
	          };




	          /**
	           * Module dependencies.
	           */

	          var util = __webpack_require__(11);
	          var utils = __webpack_require__(13);
	          var Stream = __webpack_require__(6);

	          /**
	           * Expose `Response`.
	           */

	          module.exports = Response;

	          /**
	           * Inherit from `Stream`.
	           */

	          util.inherits(Response, Stream);

	          /**
	           * Get case-insensitive `field` value.
	           *
	           * @param {String} field
	           * @return {String}
	           * @api public
	           */

	          Response.prototype.get = function (field) {
	            return this.header[field.toLowerCase()];
	          };

	          /**
	           * Implements methods of a `ReadableStream`
	           */

	          Response.prototype.destroy = function (err) {
	            this.res.destroy(err);
	          };

	          /**
	           * Pause.
	           */

	          Response.prototype.pause = function () {
	            this.res.pause();
	          };

	          /**
	           * Resume.
	           */

	          Response.prototype.resume = function () {
	            this.res.resume();
	          };

	          /**
	           * Return an `Error` representative of this response.
	           *
	           * @return {Error}
	           * @api public
	           */

	          Response.prototype.toError = function () {
	            var req = this.req;
	            var method = req.method;
	            var path = req.path;

	            var msg = "cannot " + method + " " + path + " (" + this.status + ")";
	            var err = new Error(msg);
	            err.status = this.status;
	            err.text = this.text;
	            err.method = method;
	            err.path = path;

	            return err;
	          };

	          /**
	           * Set header related properties:
	           *
	           *   - `.type` the content type without params
	           *
	           * A response of "Content-Type: text/plain; charset=utf-8"
	           * will provide you with a `.type` of "text/plain".
	           *
	           * @param {Object} header
	           * @api private
	           */

	          Response.prototype.setHeaderProperties = function (header) {
	            // TODO: moar!
	            // TODO: make this a util

	            // content-type
	            var ct = this.header["content-type"] || "";

	            // params
	            var params = utils.params(ct);
	            for (var key in params) this[key] = params[key];

	            this.type = utils.type(ct);

	            // links
	            try {
	              if (header.link) this.links = utils.parseLinks(header.link);
	            } catch (err) {}
	          };

	          /**
	           * Set flags such as `.ok` based on `status`.
	           *
	           * For example a 2xx response will give you a `.ok` of __true__
	           * whereas 5xx will be __false__ and `.error` will be __true__. The
	           * `.clientError` and `.serverError` are also available to be more
	           * specific, and `.statusType` is the class of error ranging from 1..5
	           * sometimes useful for mapping respond colors etc.
	           *
	           * "sugar" properties are also defined for common cases. Currently providing:
	           *
	           *   - .noContent
	           *   - .badRequest
	           *   - .unauthorized
	           *   - .notAcceptable
	           *   - .notFound
	           *
	           * @param {Number} status
	           * @api private
	           */

	          Response.prototype.setStatusProperties = function (status) {
	            var type = status / 100 | 0;

	            // status / class
	            this.status = this.statusCode = status;
	            this.statusType = type;

	            // basics
	            this.info = 1 == type;
	            this.ok = 2 == type;
	            this.redirect = 3 == type;
	            this.clientError = 4 == type;
	            this.serverError = 5 == type;
	            this.error = 4 == type || 5 == type ? this.toError() : false;

	            // sugar
	            this.accepted = 202 == status;
	            this.noContent = 204 == status;
	            this.badRequest = 400 == status;
	            this.unauthorized = 401 == status;
	            this.notAcceptable = 406 == status;
	            this.forbidden = 403 == status;
	            this.notFound = 404 == status;
	          };

	          /**
	           * To json.
	           *
	           * @return {Object}
	           * @api public
	           */

	          Response.prototype.toJSON = function () {
	            return {
	              req: this.request.toJSON(),
	              header: this.header,
	              status: this.status,
	              text: this.text
	            };
	          };


	          /***/
	        },
	        /* 13 */
	        /***/function (module, exports, __webpack_require__) {


	          /**
	           * Module dependencies.
	           */

	          var StringDecoder = __webpack_require__(22).StringDecoder;
	          var Stream = __webpack_require__(6);
	          var zlib;

	          /**
	           * Require zlib module for Node 0.6+
	           */

	          try {
	            zlib = __webpack_require__(10);
	          } catch (e) {}

	          /**
	           * Generate a UID with the given `len`.
	           *
	           * @param {Number} len
	           * @return {String}
	           * @api private
	           */

	          exports.uid = function (len) {
	            var buf = "";
	            var chars = "abcdefghijklmnopqrstuvwxyz123456789";
	            var nchars = chars.length;
	            while (len--) buf += chars[Math.random() * nchars | 0];
	            return buf;
	          };

	          /**
	           * Return the mime type for the given `str`.
	           *
	           * @param {String} str
	           * @return {String}
	           * @api private
	           */

	          exports.type = function (str) {
	            return str.split(/ *; */).shift();
	          };

	          /**
	           * Return header field parameters.
	           *
	           * @param {String} str
	           * @return {Object}
	           * @api private
	           */

	          exports.params = function (str) {
	            return str.split(/ *; */).reduce(function (obj, str) {
	              var parts = str.split(/ *= */);
	              var key = parts.shift();
	              var val = parts.shift();

	              if (key && val) obj[key] = val;
	              return obj;
	            }, {});
	          };

	          /**
	           * Parse Link header fields.
	           *
	           * @param {String} str
	           * @return {Object}
	           * @api private
	           */

	          exports.parseLinks = function (str) {
	            return str.split(/ *, */).reduce(function (obj, str) {
	              var parts = str.split(/ *; */);
	              var url = parts[0].slice(1, -1);
	              var rel = parts[1].split(/ *= */)[1].slice(1, -1);
	              obj[rel] = url;
	              return obj;
	            }, {});
	          };

	          /**
	           * Buffers response data events and re-emits when they're unzipped.
	           *
	           * @param {Request} req
	           * @param {Response} res
	           * @api private
	           */

	          exports.unzip = function (req, res) {
	            if (!zlib) return;

	            var unzip = zlib.createUnzip();
	            var stream = new Stream();
	            var decoder;

	            // make node responseOnEnd() happy
	            stream.req = req;

	            unzip.on("error", function (err) {
	              stream.emit("error", err);
	            });

	            // pipe to unzip
	            res.pipe(unzip);

	            // override `setEncoding` to capture encoding
	            res.setEncoding = function (type) {
	              decoder = new StringDecoder(type);
	            };

	            // decode upon decompressing with captured encoding
	            unzip.on("data", function (buf) {
	              if (decoder) {
	                var str = decoder.write(buf);
	                if (str.length) stream.emit("data", str);
	              } else {
	                stream.emit("data", buf);
	              }
	            });

	            unzip.on("end", function () {
	              stream.emit("end");
	            });

	            // override `on` to capture data listeners
	            var _on = res.on;
	            res.on = function (type, fn) {
	              if ("data" == type || "end" == type) {
	                stream.on(type, fn);
	              } else if ("error" == type) {
	                stream.on(type, fn);
	                _on.call(res, type, fn);
	              } else {
	                _on.call(res, type, fn);
	              }
	            };
	          };

	          /**
	           * Strip content related fields from `header`.
	           *
	           * @param {Object} header
	           * @return {Object} header
	           * @api private
	           */

	          exports.cleanHeader = function (header) {
	            delete header["content-type"];
	            delete header["content-length"];
	            delete header["transfer-encoding"];
	            delete header.cookie;
	            delete header.host;
	            return header;
	          };


	          /***/
	        },
	        /* 14 */
	        /***/function (module, exports, __webpack_require__) {


	          /**
	           * Module dependencies.
	           */

	          var util = __webpack_require__(11);
	          var mime = __webpack_require__(26);
	          var FormData = __webpack_require__(25);
	          var PassThrough = __webpack_require__(57);

	          /**
	           * Initialize a new `Part` for the given `req`.
	           *
	           * @param {Request} req
	           * @api public
	           * @deprecated pass a readable stream in to `Request#attach()` instead
	           */

	          var Part = function (req) {
	            PassThrough.call(this);
	            this._req = req;
	            this._attached = false;
	            this._name = null;
	            this._type = null;
	            this._header = null;
	            this._filename = null;

	            this.once("pipe", this._attach.bind(this));
	          };
	          Part = util.deprecate(Part, "The `Part()` constructor is deprecated. " + "Pass a readable stream in to `Request#attach()` instead.");

	          /**
	           * Inherit from `PassThrough`.
	           */

	          util.inherits(Part, PassThrough);

	          /**
	           * Expose `Part`.
	           */

	          module.exports = Part;

	          /**
	           * Set header `field` to `val`.
	           *
	           * @param {String} field
	           * @param {String} val
	           * @return {Part} for chaining
	           * @api public
	           */

	          Part.prototype.set = function (field, val) {
	            //if (!this._header) this._header = {};
	            //this._header[field] = val;
	            //return this;
	            throw new TypeError("setting custom form-data part headers is unsupported");
	          };

	          /**
	           * Set _Content-Type_ response header passed through `mime.lookup()`.
	           *
	           * Examples:
	           *
	           *     res.type('html');
	           *     res.type('.html');
	           *
	           * @param {String} type
	           * @return {Part} for chaining
	           * @api public
	           */

	          Part.prototype.type = function (type) {
	            var lookup = mime.lookup(type);
	            this._type = lookup;
	            //this.set('Content-Type', lookup);
	            return this;
	          };

	          /**
	           * Set the "name" portion for the _Content-Disposition_ header field.
	           *
	           * @param {String} name
	           * @return {Part} for chaining
	           * @api public
	           */

	          Part.prototype.name = function (name) {
	            this._name = name;
	            return this;
	          };

	          /**
	           * Set _Content-Disposition_ header field to _attachment_ with `filename`
	           * and field `name`.
	           *
	           * @param {String} name
	           * @param {String} filename
	           * @return {Part} for chaining
	           * @api public
	           */

	          Part.prototype.attachment = function (name, filename) {
	            this.name(name);
	            if (filename) {
	              this.type(filename);
	              this._filename = filename;
	            }
	            return this;
	          };

	          /**
	           * Calls `FormData#append()` on the Request instance's FormData object.
	           *
	           * Gets called implicitly upon the first `write()` call, or the "pipe" event.
	           *
	           * @api private
	           */

	          Part.prototype._attach = function () {
	            if (this._attached) return;
	            this._attached = true;

	            if (!this._name) throw new Error("must call `Part#name()` first!");

	            // add `this` Stream's readable side as a stream for this Part
	            if (!this._req._formData) this._req._formData = new FormData();
	            this._req._formData.append(this._name, this, {
	              contentType: this._type,
	              filename: this._filename
	            });

	            // restore PassThrough's default `write()` function now that we're setup
	            this.write = PassThrough.prototype.write;
	          };

	          /**
	           * Write `data` with `encoding`.
	           *
	           * @param {Buffer|String} data
	           * @param {String} encoding
	           * @return {Boolean}
	           * @api public
	           */

	          Part.prototype.write = function () {
	            this._attach();
	            return this.write.apply(this, arguments);
	          };


	          /***/
	        },,
	        /* 16 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * Initialize a new `Agent`.
	           *
	           * @api public
	           */

	          var Agent = function (options) {
	            if (!(this instanceof Agent)) return new Agent(options);
	            if (options) this._ca = options.ca;
	            this.jar = new CookieJar();
	          };




	          /**
	           * Module dependencies.
	           */

	          var CookieJar = __webpack_require__(66).CookieJar;
	          var CookieAccess = __webpack_require__(66).CookieAccessInfo;
	          var parse = __webpack_require__(5).parse;
	          var request = __webpack_require__(3);
	          var methods = __webpack_require__(19);

	          /**
	           * Expose `Agent`.
	           */

	          module.exports = Agent;

	          /**
	           * Save the cookies in the given `res` to
	           * the agent's cookie jar for persistence.
	           *
	           * @param {Response} res
	           * @api private
	           */

	          Agent.prototype.saveCookies = function (res) {
	            var cookies = res.headers["set-cookie"];
	            if (cookies) this.jar.setCookies(cookies);
	          };

	          /**
	           * Attach cookies when available to the given `req`.
	           *
	           * @param {Request} req
	           * @api private
	           */

	          Agent.prototype.attachCookies = function (req) {
	            var url = parse(req.url);
	            var access = CookieAccess(url.hostname, url.pathname, "https:" == url.protocol);
	            var cookies = this.jar.getCookies(access).toValueString();
	            req.cookies = cookies;
	          };

	          // generate HTTP verb methods

	          methods.forEach(function (method) {
	            var name = "delete" == method ? "del" : method;

	            method = method.toUpperCase();
	            Agent.prototype[name] = function (url, fn) {
	              var req = request(method, url);
	              req.ca(this._ca);

	              req.on("response", this.saveCookies.bind(this));
	              req.on("redirect", this.saveCookies.bind(this));
	              req.on("redirect", this.attachCookies.bind(this, req));
	              this.attachCookies(req);

	              fn && req.end(fn);
	              return req;
	            };
	          });


	          /***/
	        },
	        /* 17 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function () {
	            var Promise = function (resolver) {
	              if (typeof resolver !== "function") {
	                throw new TypeError("the promise constructor requires a resolver function");
	              }
	              if (this.constructor !== Promise) {
	                throw new TypeError("the promise constructor cannot be invoked directly");
	              }
	              this._bitField = 0;
	              this._fulfillmentHandler0 = undefined;
	              this._rejectionHandler0 = undefined;
	              this._progressHandler0 = undefined;
	              this._promise0 = undefined;
	              this._receiver0 = undefined;
	              this._settledValue = undefined;
	              this._boundTo = undefined;
	              if (resolver !== INTERNAL) this._resolveFromResolver(resolver);
	            };

	            var makeSelfResolutionError = function () {
	              return new TypeError("circular promise resolution chain");
	            };
	            var reflect = function () {
	              return new Promise.PromiseInspection(this);
	            };
	            var returnFirstElement = function (elements) {
	              return elements[0];
	            };
	            var util = __webpack_require__(27);
	            var async = __webpack_require__(28);
	            var errors = __webpack_require__(29);
	            var INTERNAL = function () {};
	            var APPLY = {};
	            var NEXT_FILTER = { e: null };
	            var cast = __webpack_require__(30)(Promise, INTERNAL);
	            var PromiseArray = __webpack_require__(31)(Promise, INTERNAL, cast);
	            var CapturedTrace = __webpack_require__(32)();
	            var CatchFilter = __webpack_require__(33)(NEXT_FILTER);
	            var PromiseResolver = __webpack_require__(34);
	            var isArray = util.isArray;
	            var errorObj = util.errorObj;
	            var tryCatch1 = util.tryCatch1;
	            var tryCatch2 = util.tryCatch2;
	            var tryCatchApply = util.tryCatchApply;
	            var RangeError = errors.RangeError;
	            var TypeError = errors.TypeError;
	            var CancellationError = errors.CancellationError;
	            var TimeoutError = errors.TimeoutError;
	            var OperationalError = errors.OperationalError;
	            var originatesFromRejection = errors.originatesFromRejection;
	            var markAsOriginatingFromRejection = errors.markAsOriginatingFromRejection;
	            var canAttachTrace = errors.canAttachTrace;
	            var apiRejection = __webpack_require__(35)(Promise);
	            var unhandledRejectionHandled;
	            var debugging = false || !!(typeof process !== "undefined" && typeof process.execPath === "string" && typeof process.env === "object" && (process.env.BLUEBIRD_DEBUG || undefined === "development"));

	            Promise.prototype.bind = function (thisArg) {
	              var maybePromise = cast(thisArg, undefined);
	              var ret = new Promise(INTERNAL);
	              if (maybePromise instanceof Promise) {
	                var binder = maybePromise.then(function (thisArg) {
	                  ret._setBoundTo(thisArg);
	                });
	                var p = Promise.all([this, binder]).then(returnFirstElement);
	                ret._follow(p);
	              } else {
	                ret._follow(this);
	                ret._setBoundTo(thisArg);
	              }
	              ret._propagateFrom(this, 2 | 1);
	              return ret;
	            };

	            Promise.prototype.toString = function () {
	              return "[object Promise]";
	            };

	            Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
	              var len = arguments.length;
	              if (len > 1) {
	                var catchInstances = new Array(len - 1),
	                    j = 0,
	                    i;
	                for (i = 0; i < len - 1; ++i) {
	                  var item = arguments[i];
	                  if (typeof item === "function") {
	                    catchInstances[j++] = item;
	                  } else {
	                    var catchFilterTypeError = new TypeError("A catch filter must be an error constructor " + "or a filter function");

	                    this._attachExtraTrace(catchFilterTypeError);
	                    return Promise.reject(catchFilterTypeError);
	                  }
	                }
	                catchInstances.length = j;
	                fn = arguments[i];

	                this._resetTrace();
	                var catchFilter = new CatchFilter(catchInstances, fn, this);
	                return this._then(undefined, catchFilter.doFilter, undefined, catchFilter, undefined);
	              }
	              return this._then(undefined, fn, undefined, undefined, undefined);
	            };

	            Promise.prototype.reflect = function () {
	              return this._then(reflect, reflect, undefined, this, undefined);
	            };

	            Promise.prototype.then = function (didFulfill, didReject, didProgress) {
	              return this._then(didFulfill, didReject, didProgress, undefined, undefined);
	            };


	            Promise.prototype.done = function (didFulfill, didReject, didProgress) {
	              var promise = this._then(didFulfill, didReject, didProgress, undefined, undefined);
	              promise._setIsFinal();
	            };

	            Promise.prototype.spread = function (didFulfill, didReject) {
	              return this._then(didFulfill, didReject, undefined, APPLY, undefined);
	            };

	            Promise.prototype.isCancellable = function () {
	              return !this.isResolved() && this._cancellable();
	            };

	            Promise.prototype.toJSON = function () {
	              var ret = {
	                isFulfilled: false,
	                isRejected: false,
	                fulfillmentValue: undefined,
	                rejectionReason: undefined
	              };
	              if (this.isFulfilled()) {
	                ret.fulfillmentValue = this._settledValue;
	                ret.isFulfilled = true;
	              } else if (this.isRejected()) {
	                ret.rejectionReason = this._settledValue;
	                ret.isRejected = true;
	              }
	              return ret;
	            };

	            Promise.prototype.all = function () {
	              return new PromiseArray(this).promise();
	            };

	            Promise.prototype.error = function (fn) {
	              return this.caught(originatesFromRejection, fn);
	            };

	            Promise.is = function (val) {
	              return val instanceof Promise;
	            };

	            Promise.all = function (promises) {
	              return new PromiseArray(promises).promise();
	            };

	            Promise.method = function (fn) {
	              if (typeof fn !== "function") {
	                throw new TypeError("fn must be a function");
	              }
	              return function Promise$_method() {
	                var value;
	                switch (arguments.length) {
	                  case 0:
	                    value = tryCatch1(fn, this, undefined);break;
	                  case 1:
	                    value = tryCatch1(fn, this, arguments[0]);break;
	                  case 2:
	                    value = tryCatch2(fn, this, arguments[0], arguments[1]);break;
	                  default:
	                    var $_len = arguments.length;var args = new Array($_len);for (var $_i = 0; $_i < $_len; ++$_i) {
	                      args[$_i] = arguments[$_i];
	                    }
	                    value = tryCatchApply(fn, args, this);break;
	                }
	                var ret = new Promise(INTERNAL);
	                ret._setTrace(undefined);
	                ret._resolveFromSyncValue(value);
	                return ret;
	              };
	            };

	            Promise.attempt = Promise["try"] = function (fn, args, ctx) {
	              if (typeof fn !== "function") {
	                return apiRejection("fn must be a function");
	              }
	              var value = isArray(args) ? tryCatchApply(fn, args, ctx) : tryCatch1(fn, ctx, args);

	              var ret = new Promise(INTERNAL);
	              ret._setTrace(undefined);
	              ret._resolveFromSyncValue(value);
	              return ret;
	            };

	            Promise.defer = Promise.pending = function () {
	              var promise = new Promise(INTERNAL);
	              promise._setTrace(undefined);
	              return new PromiseResolver(promise);
	            };

	            Promise.bind = function (thisArg) {
	              var maybePromise = cast(thisArg, undefined);
	              var ret = new Promise(INTERNAL);
	              ret._setTrace(undefined);

	              if (maybePromise instanceof Promise) {
	                var p = maybePromise.then(function (thisArg) {
	                  ret._setBoundTo(thisArg);
	                });
	                ret._follow(p);
	              } else {
	                ret._setBoundTo(thisArg);
	                ret._setFulfilled();
	              }
	              return ret;
	            };

	            Promise.cast = function (obj) {
	              var ret = cast(obj, undefined);
	              if (!(ret instanceof Promise)) {
	                var val = ret;
	                ret = new Promise(INTERNAL);
	                ret._setTrace(undefined);
	                ret._setFulfilled();
	                ret._cleanValues();
	                ret._settledValue = val;
	              }
	              return ret;
	            };

	            Promise.resolve = Promise.fulfilled = Promise.cast;

	            Promise.reject = Promise.rejected = function (reason) {
	              var ret = new Promise(INTERNAL);
	              ret._setTrace(undefined);
	              markAsOriginatingFromRejection(reason);
	              ret._cleanValues();
	              ret._setRejected();
	              ret._settledValue = reason;
	              if (!canAttachTrace(reason)) {
	                var trace = new Error(reason + "");
	                ret._setCarriedStackTrace(trace);
	              }
	              ret._ensurePossibleRejectionHandled();
	              return ret;
	            };

	            Promise.onPossiblyUnhandledRejection = function (fn) {
	              CapturedTrace.possiblyUnhandledRejection = typeof fn === "function" ? fn : undefined;
	            };

	            Promise.onUnhandledRejectionHandled = function (fn) {
	              unhandledRejectionHandled = typeof fn === "function" ? fn : undefined;
	            };

	            Promise.longStackTraces = function () {
	              if (async.haveItemsQueued() && debugging === false) {
	                throw new Error("cannot enable long stack traces after promises have been created");
	              }
	              debugging = CapturedTrace.isSupported();
	            };

	            Promise.hasLongStackTraces = function () {
	              return debugging && CapturedTrace.isSupported();
	            };

	            Promise.setScheduler = function (fn) {
	              if (typeof fn !== "function") throw new TypeError("fn must be a function");
	              async._schedule = fn;
	            };

	            Promise.prototype._then = function (didFulfill, didReject, didProgress, receiver, internalData) {
	              var haveInternalData = internalData !== undefined;
	              var ret = haveInternalData ? internalData : new Promise(INTERNAL);

	              if (!haveInternalData) {
	                if (debugging) {
	                  var haveSameContext = this._peekContext() === this._traceParent;
	                  ret._traceParent = haveSameContext ? this._traceParent : this;
	                }
	                ret._propagateFrom(this, 7);
	              }

	              var callbackIndex = this._addCallbacks(didFulfill, didReject, didProgress, ret, receiver);

	              if (this.isResolved()) {
	                async.invoke(this._queueSettleAt, this, callbackIndex);
	              }

	              return ret;
	            };

	            Promise.prototype._length = function () {
	              return this._bitField & 262143;
	            };

	            Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
	              return (this._bitField & 939524096) > 0;
	            };

	            Promise.prototype._isFollowing = function () {
	              return (this._bitField & 536870912) === 536870912;
	            };

	            Promise.prototype._setLength = function (len) {
	              this._bitField = this._bitField & -262144 | len & 262143;
	            };

	            Promise.prototype._setFulfilled = function () {
	              this._bitField = this._bitField | 268435456;
	            };

	            Promise.prototype._setRejected = function () {
	              this._bitField = this._bitField | 134217728;
	            };

	            Promise.prototype._setFollowing = function () {
	              this._bitField = this._bitField | 536870912;
	            };

	            Promise.prototype._setIsFinal = function () {
	              this._bitField = this._bitField | 33554432;
	            };

	            Promise.prototype._isFinal = function () {
	              return (this._bitField & 33554432) > 0;
	            };

	            Promise.prototype._cancellable = function () {
	              return (this._bitField & 67108864) > 0;
	            };

	            Promise.prototype._setCancellable = function () {
	              this._bitField = this._bitField | 67108864;
	            };

	            Promise.prototype._unsetCancellable = function () {
	              this._bitField = this._bitField & ~67108864;
	            };

	            Promise.prototype._setRejectionIsUnhandled = function () {
	              this._bitField = this._bitField | 2097152;
	            };

	            Promise.prototype._unsetRejectionIsUnhandled = function () {
	              this._bitField = this._bitField & ~2097152;
	              if (this._isUnhandledRejectionNotified()) {
	                this._unsetUnhandledRejectionIsNotified();
	                this._notifyUnhandledRejectionIsHandled();
	              }
	            };

	            Promise.prototype._isRejectionUnhandled = function () {
	              return (this._bitField & 2097152) > 0;
	            };

	            Promise.prototype._setUnhandledRejectionIsNotified = function () {
	              this._bitField = this._bitField | 524288;
	            };

	            Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
	              this._bitField = this._bitField & ~524288;
	            };

	            Promise.prototype._isUnhandledRejectionNotified = function () {
	              return (this._bitField & 524288) > 0;
	            };

	            Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
	              this._bitField = this._bitField | 1048576;
	              this._fulfillmentHandler0 = capturedTrace;
	            };

	            Promise.prototype._unsetCarriedStackTrace = function () {
	              this._bitField = this._bitField & ~1048576;
	              this._fulfillmentHandler0 = undefined;
	            };

	            Promise.prototype._isCarryingStackTrace = function () {
	              return (this._bitField & 1048576) > 0;
	            };

	            Promise.prototype._getCarriedStackTrace = function () {
	              return this._isCarryingStackTrace() ? this._fulfillmentHandler0 : undefined;
	            };

	            Promise.prototype._receiverAt = function (index) {
	              var ret = index === 0 ? this._receiver0 : this[(index << 2) + index - 5 + 4];
	              if (this._isBound() && ret === undefined) {
	                return this._boundTo;
	              }
	              return ret;
	            };

	            Promise.prototype._promiseAt = function (index) {
	              return index === 0 ? this._promise0 : this[(index << 2) + index - 5 + 3];
	            };

	            Promise.prototype._fulfillmentHandlerAt = function (index) {
	              return index === 0 ? this._fulfillmentHandler0 : this[(index << 2) + index - 5 + 0];
	            };

	            Promise.prototype._rejectionHandlerAt = function (index) {
	              return index === 0 ? this._rejectionHandler0 : this[(index << 2) + index - 5 + 1];
	            };

	            Promise.prototype._addCallbacks = function (fulfill, reject, progress, promise, receiver) {
	              var index = this._length();

	              if (index >= 262143 - 5) {
	                index = 0;
	                this._setLength(0);
	              }

	              if (index === 0) {
	                this._promise0 = promise;
	                if (receiver !== undefined) this._receiver0 = receiver;
	                if (typeof fulfill === "function" && !this._isCarryingStackTrace()) this._fulfillmentHandler0 = fulfill;
	                if (typeof reject === "function") this._rejectionHandler0 = reject;
	                if (typeof progress === "function") this._progressHandler0 = progress;
	              } else {
	                var base = index * 5 - 5;
	                this[base + 3] = promise;
	                this[base + 4] = receiver;
	                if (typeof fulfill === "function") this[base + 0] = fulfill;
	                if (typeof reject === "function") this[base + 1] = reject;
	                if (typeof progress === "function") this[base + 2] = progress;
	              }
	              this._setLength(index + 1);
	              return index;
	            };

	            Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
	              var index = this._length();

	              if (index >= 262143 - 5) {
	                index = 0;
	                this._setLength(0);
	              }
	              if (index === 0) {
	                this._promise0 = promiseSlotValue;
	                this._receiver0 = receiver;
	              } else {
	                var base = index * 5 - 5;
	                this[base + 3] = promiseSlotValue;
	                this[base + 4] = receiver;
	              }
	              this._setLength(index + 1);
	            };

	            Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
	              this._setProxyHandlers(promiseArray, index);
	            };

	            Promise.prototype._proxyPromise = function (promise) {
	              promise._setProxied();
	              this._setProxyHandlers(promise, -15);
	            };

	            Promise.prototype._setBoundTo = function (obj) {
	              if (obj !== undefined) {
	                this._bitField = this._bitField | 8388608;
	                this._boundTo = obj;
	              } else {
	                this._bitField = this._bitField & ~8388608;
	              }
	            };

	            Promise.prototype._isBound = function () {
	              return (this._bitField & 8388608) === 8388608;
	            };

	            Promise.prototype._resolveFromResolver = function (resolver) {
	              var Promise$_resolver = function (val) {
	                if (promise._tryFollow(val)) {
	                  return;
	                }
	                promise._fulfill(val);
	              };

	              var Promise$_rejecter = function (val) {
	                var trace = canAttachTrace(val) ? val : new Error(val + "");
	                promise._attachExtraTrace(trace);
	                markAsOriginatingFromRejection(val);
	                promise._reject(val, trace === val ? undefined : trace);
	              };

	              var promise = this;
	              this._setTrace(undefined);
	              this._pushContext();

	              var r = tryCatch2(resolver, undefined, Promise$_resolver, Promise$_rejecter);
	              this._popContext();

	              if (r !== undefined && r === errorObj) {
	                var e = r.e;
	                var trace = canAttachTrace(e) ? e : new Error(e + "");
	                promise._reject(e, trace);
	              }
	            };

	            Promise.prototype._spreadSlowCase = function (targetFn, promise, values, boundTo) {
	              var promiseForAll = new PromiseArray(values).promise();
	              var promise2 = promiseForAll._then(function () {
	                return targetFn.apply(boundTo, arguments);
	              }, undefined, undefined, APPLY, undefined);
	              promise._follow(promise2);
	            };

	            Promise.prototype._callSpread = function (handler, promise, value) {
	              var boundTo = this._boundTo;
	              if (isArray(value)) {
	                for (var i = 0, len = value.length; i < len; ++i) {
	                  if (cast(value[i], undefined) instanceof Promise) {
	                    this._spreadSlowCase(handler, promise, value, boundTo);
	                    return;
	                  }
	                }
	              }
	              promise._pushContext();
	              return tryCatchApply(handler, value, boundTo);
	            };

	            Promise.prototype._callHandler = function (handler, receiver, promise, value) {
	              var x;
	              if (receiver === APPLY && !this.isRejected()) {
	                x = this._callSpread(handler, promise, value);
	              } else {
	                promise._pushContext();
	                x = tryCatch1(handler, receiver, value);
	              }
	              promise._popContext();
	              return x;
	            };

	            Promise.prototype._settlePromiseFromHandler = function (handler, receiver, value, promise) {
	              if (!(promise instanceof Promise)) {
	                handler.call(receiver, value, promise);
	                return;
	              }
	              if (promise.isResolved()) return;
	              var x = this._callHandler(handler, receiver, promise, value);
	              if (promise._isFollowing()) return;

	              if (x === errorObj || x === promise || x === NEXT_FILTER) {
	                var err = x === promise ? makeSelfResolutionError() : x.e;
	                var trace = canAttachTrace(err) ? err : new Error(err + "");
	                if (x !== NEXT_FILTER) promise._attachExtraTrace(trace);
	                promise._rejectUnchecked(err, trace);
	              } else {
	                var castValue = cast(x, promise);
	                if (castValue instanceof Promise) {
	                  if (castValue.isRejected() && !castValue._isCarryingStackTrace() && !canAttachTrace(castValue._settledValue)) {
	                    var trace = new Error(castValue._settledValue + "");
	                    promise._attachExtraTrace(trace);
	                    castValue._setCarriedStackTrace(trace);
	                  }
	                  promise._follow(castValue);
	                  promise._propagateFrom(castValue, 1);
	                } else {
	                  promise._fulfillUnchecked(x);
	                }
	              }
	            };

	            Promise.prototype._follow = function (promise) {
	              this._setFollowing();

	              if (promise.isPending()) {
	                this._propagateFrom(promise, 1);
	                promise._proxyPromise(this);
	              } else if (promise.isFulfilled()) {
	                this._fulfillUnchecked(promise._settledValue);
	              } else {
	                this._rejectUnchecked(promise._settledValue, promise._getCarriedStackTrace());
	              }

	              if (promise._isRejectionUnhandled()) promise._unsetRejectionIsUnhandled();

	              if (debugging && promise._traceParent == null) {
	                promise._traceParent = this;
	              }
	            };

	            Promise.prototype._tryFollow = function (value) {
	              if (this._isFollowingOrFulfilledOrRejected() || value === this) {
	                return false;
	              }
	              var maybePromise = cast(value, undefined);
	              if (!(maybePromise instanceof Promise)) {
	                return false;
	              }
	              this._follow(maybePromise);
	              return true;
	            };

	            Promise.prototype._resetTrace = function () {
	              if (debugging) {
	                this._trace = new CapturedTrace(this._peekContext() === undefined);
	              }
	            };

	            Promise.prototype._setTrace = function (parent) {
	              if (debugging) {
	                var context = this._peekContext();
	                this._traceParent = context;
	                var isTopLevel = context === undefined;
	                if (parent !== undefined && parent._traceParent === context) {
	                  this._trace = parent._trace;
	                } else {
	                  this._trace = new CapturedTrace(isTopLevel);
	                }
	              }
	              return this;
	            };

	            Promise.prototype._attachExtraTrace = function (error) {
	              if (debugging && canAttachTrace(error)) {
	                var promise = this;
	                var stack = error.stack;
	                stack = typeof stack === "string" ? stack.split("\n") : [];
	                CapturedTrace.protectErrorMessageNewlines(stack);
	                var headerLineCount = 1;
	                var combinedTraces = 1;
	                while (promise != null && promise._trace != null) {
	                  stack = CapturedTrace.combine(stack, promise._trace.stack.split("\n"));
	                  promise = promise._traceParent;
	                  combinedTraces++;
	                }

	                var stackTraceLimit = Error.stackTraceLimit || 10;
	                var max = (stackTraceLimit + headerLineCount) * combinedTraces;
	                var len = stack.length;
	                if (len > max) {
	                  stack.length = max;
	                }

	                if (len > 0) stack[0] = stack[0].split("\u0002\u0000\u0001").join("\n");

	                if (stack.length <= headerLineCount) {
	                  error.stack = "(No stack trace)";
	                } else {
	                  error.stack = stack.join("\n");
	                }
	              }
	            };

	            Promise.prototype._cleanValues = function () {
	              if (this._cancellable()) {
	                this._cancellationParent = undefined;
	              }
	            };

	            Promise.prototype._propagateFrom = function (parent, flags) {
	              if ((flags & 1) > 0 && parent._cancellable()) {
	                this._setCancellable();
	                this._cancellationParent = parent;
	              }
	              if ((flags & 4) > 0) {
	                this._setBoundTo(parent._boundTo);
	              }
	              if ((flags & 2) > 0) {
	                this._setTrace(parent);
	              }
	            };

	            Promise.prototype._fulfill = function (value) {
	              if (this._isFollowingOrFulfilledOrRejected()) return;
	              this._fulfillUnchecked(value);
	            };

	            Promise.prototype._reject = function (reason, carriedStackTrace) {
	              if (this._isFollowingOrFulfilledOrRejected()) return;
	              this._rejectUnchecked(reason, carriedStackTrace);
	            };

	            Promise.prototype._settlePromiseAt = function (index) {
	              var handler = this.isFulfilled() ? this._fulfillmentHandlerAt(index) : this._rejectionHandlerAt(index);

	              var value = this._settledValue;
	              var receiver = this._receiverAt(index);
	              var promise = this._promiseAt(index);

	              if (typeof handler === "function") {
	                this._settlePromiseFromHandler(handler, receiver, value, promise);
	              } else {
	                var done = false;
	                var isFulfilled = this.isFulfilled();
	                if (receiver !== undefined) {
	                  if (receiver instanceof Promise && receiver._isProxied()) {
	                    receiver._unsetProxied();

	                    if (isFulfilled) receiver._fulfillUnchecked(value);else receiver._rejectUnchecked(value, this._getCarriedStackTrace());
	                    done = true;
	                  } else if (receiver instanceof PromiseArray) {
	                    if (isFulfilled) receiver._promiseFulfilled(value, promise);else receiver._promiseRejected(value, promise);
	                    done = true;
	                  }
	                }

	                if (!done) {
	                  if (isFulfilled) promise._fulfill(value);else promise._reject(value, this._getCarriedStackTrace());
	                }
	              }
	              this._clearHandlersAtIndex(index);

	              if (index >= 4) {
	                this._queueGC();
	              }
	            };

	            Promise.prototype._clearHandlersAtIndex = function (index) {
	              if (index === 0) {
	                this._fulfillmentHandler0 = undefined;
	                this._rejectionHandler0 = undefined;
	                this._progressHandler0 = undefined;
	                this._receiver0 = undefined;
	              } else {
	                var base = index * 5 - 5;
	                this[base + 4] = this[base + 0] = this[base + 1] = this[base + 2] = undefined;
	              }
	            };

	            Promise.prototype._isProxied = function () {
	              return (this._bitField & 4194304) === 4194304;
	            };

	            Promise.prototype._setProxied = function () {
	              this._bitField = this._bitField | 4194304;
	            };

	            Promise.prototype._unsetProxied = function () {
	              this._bitField = this._bitField & ~4194304;
	            };

	            Promise.prototype._isGcQueued = function () {
	              return (this._bitField & -1073741824) === -1073741824;
	            };

	            Promise.prototype._setGcQueued = function () {
	              this._bitField = this._bitField | -1073741824;
	            };

	            Promise.prototype._unsetGcQueued = function () {
	              this._bitField = this._bitField & ~ -1073741824;
	            };

	            Promise.prototype._queueGC = function () {
	              if (this._isGcQueued()) return;
	              this._setGcQueued();
	              async.invokeLater(this._gc, this, undefined);
	            };

	            Promise.prototype._gc = function () {
	              var len = this._length() * 5 - 5;
	              this._promise0 = undefined;
	              for (var i = 0; i < len; i++) {
	                delete this[i];
	              }
	              this._setLength(0);
	              this._unsetGcQueued();
	            };

	            Promise.prototype._queueSettleAt = function (index) {
	              if (this._isRejectionUnhandled()) this._unsetRejectionIsUnhandled();
	              async.invoke(this._settlePromiseAt, this, index);
	            };

	            Promise.prototype._fulfillUnchecked = function (value) {
	              if (!this.isPending()) return;
	              if (value === this) {
	                var err = makeSelfResolutionError();
	                this._attachExtraTrace(err);
	                return this._rejectUnchecked(err, undefined);
	              }
	              this._cleanValues();
	              this._setFulfilled();
	              this._settledValue = value;
	              var len = this._length();

	              if (len > 0) {
	                async.invoke(this._settlePromises, this, len);
	              }
	            };

	            Promise.prototype._rejectUncheckedCheckError = function (reason) {
	              var trace = canAttachTrace(reason) ? reason : new Error(reason + "");
	              this._rejectUnchecked(reason, trace === reason ? undefined : trace);
	            };

	            Promise.prototype._rejectUnchecked = function (reason, trace) {
	              if (!this.isPending()) return;
	              if (reason === this) {
	                var err = makeSelfResolutionError();
	                this._attachExtraTrace(err);
	                return this._rejectUnchecked(err);
	              }
	              this._cleanValues();
	              this._setRejected();
	              this._settledValue = reason;

	              if (this._isFinal()) {
	                async.invokeLater(function (e) {
	                  if ("stack" in e) {
	                    async.invokeFirst(CapturedTrace.unhandledRejection, undefined, e);
	                  }
	                  throw e;
	                }, undefined, trace === undefined ? reason : trace);
	                return;
	              }
	              var len = this._length();

	              if (trace !== undefined) this._setCarriedStackTrace(trace);

	              if (len > 0) {
	                async.invoke(this._rejectPromises, this, null);
	              } else {
	                this._ensurePossibleRejectionHandled();
	              }
	            };

	            Promise.prototype._rejectPromises = function () {
	              this._settlePromises();
	              this._unsetCarriedStackTrace();
	            };

	            Promise.prototype._settlePromises = function () {
	              var len = this._length();
	              for (var i = 0; i < len; i++) {
	                this._settlePromiseAt(i);
	              }
	            };

	            Promise.prototype._ensurePossibleRejectionHandled = function () {
	              this._setRejectionIsUnhandled();
	              if (CapturedTrace.possiblyUnhandledRejection !== undefined) {
	                async.invokeLater(this._notifyUnhandledRejection, this, undefined);
	              }
	            };

	            Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
	              if (typeof unhandledRejectionHandled === "function") {
	                async.invokeLater(unhandledRejectionHandled, undefined, this);
	              }
	            };

	            Promise.prototype._notifyUnhandledRejection = function () {
	              if (this._isRejectionUnhandled()) {
	                var reason = this._settledValue;
	                var trace = this._getCarriedStackTrace();

	                this._setUnhandledRejectionIsNotified();

	                if (trace !== undefined) {
	                  this._unsetCarriedStackTrace();
	                  reason = trace;
	                }
	                if (typeof CapturedTrace.possiblyUnhandledRejection === "function") {
	                  CapturedTrace.possiblyUnhandledRejection(reason, this);
	                }
	              }
	            };

	            var contextStack = [];
	            Promise.prototype._peekContext = function () {
	              var lastIndex = contextStack.length - 1;
	              if (lastIndex >= 0) {
	                return contextStack[lastIndex];
	              }
	              return undefined;
	            };

	            Promise.prototype._pushContext = function () {
	              if (!debugging) return;
	              contextStack.push(this);
	            };

	            Promise.prototype._popContext = function () {
	              if (!debugging) return;
	              contextStack.pop();
	            };

	            Promise.prototype._resolveFromSyncValue = function (value) {
	              if (value === errorObj) {
	                this._cleanValues();
	                this._setRejected();
	                var reason = value.e;
	                this._settledValue = reason;
	                this._attachExtraTrace(reason);
	                this._ensurePossibleRejectionHandled();
	              } else {
	                var maybePromise = cast(value, undefined);
	                if (maybePromise instanceof Promise) {
	                  this._follow(maybePromise);
	                } else {
	                  this._cleanValues();
	                  this._setFulfilled();
	                  this._settledValue = value;
	                }
	              }
	            };

	            if (!CapturedTrace.isSupported()) {
	              Promise.longStackTraces = function () {};
	              debugging = false;
	            }

	            Promise._makeSelfResolutionError = makeSelfResolutionError;
	            __webpack_require__(36)(Promise, NEXT_FILTER, cast);
	            __webpack_require__(37)(Promise);
	            __webpack_require__(38)(Promise);
	            __webpack_require__(39)(Promise, PromiseArray, cast, INTERNAL);
	            Promise.RangeError = RangeError;
	            Promise.CancellationError = CancellationError;
	            Promise.TimeoutError = TimeoutError;
	            Promise.TypeError = TypeError;
	            Promise.OperationalError = OperationalError;
	            Promise.RejectionError = OperationalError;
	            Promise.AggregateError = errors.AggregateError;

	            util.toFastProperties(Promise);
	            util.toFastProperties(Promise.prototype);
	            Promise.Promise = Promise;
	            CapturedTrace.setBounds(async.firstLineError, util.lastLineError);
	            __webpack_require__(40)(Promise, INTERNAL, cast);
	            __webpack_require__(41)(Promise, INTERNAL, cast);
	            __webpack_require__(42)(Promise);
	            __webpack_require__(43)(Promise, apiRejection, INTERNAL, cast);
	            __webpack_require__(44)(Promise, PromiseArray, apiRejection, cast, INTERNAL);
	            __webpack_require__(45)(Promise);
	            __webpack_require__(46)(Promise, INTERNAL);
	            __webpack_require__(47)(Promise, PromiseArray, cast);
	            __webpack_require__(48)(Promise, PromiseArray, apiRejection, cast, INTERNAL);
	            __webpack_require__(49)(Promise, PromiseArray);
	            __webpack_require__(50)(Promise, PromiseArray, apiRejection);
	            __webpack_require__(51)(Promise, PromiseArray);
	            __webpack_require__(52)(Promise, INTERNAL);
	            __webpack_require__(53)(Promise, INTERNAL);
	            __webpack_require__(54)(Promise, PromiseArray);
	            __webpack_require__(55)(Promise, INTERNAL);
	            __webpack_require__(56)(Promise, apiRejection, cast);

	            Promise.prototype = Promise.prototype;
	            return Promise;
	          };


	          /***/
	        },
	        /* 18 */
	        /***/function (module, exports, __webpack_require__) {


	          exports["application/x-www-form-urlencoded"] = __webpack_require__(58);
	          exports["application/json"] = __webpack_require__(59);
	          exports.text = __webpack_require__(60);
	          exports.image = __webpack_require__(61);


	          /***/
	        },
	        /* 19 */
	        /***/function (module, exports, __webpack_require__) {


	          var http = __webpack_require__(8);

	          if (http.METHODS) {
	            module.exports = http.METHODS.map(function (method) {
	              return method.toLowerCase();
	            });
	          } else {
	            module.exports = ["get", "post", "put", "head", "delete", "options", "trace", "copy", "lock", "mkcol", "move", "purge", "propfind", "proppatch", "unlock", "report", "mkactivity", "checkout", "merge", "m-search", "notify", "subscribe", "unsubscribe", "patch", "search"];
	          }


	          /***/
	        },
	        /* 20 */
	        /***/function (module, exports, __webpack_require__) {
	          var isPlainObject = function (obj) {
	            if (!obj || toString.call(obj) !== "[object Object]" || obj.nodeType || obj.setInterval) return false;

	            var has_own_constructor = hasOwn.call(obj, "constructor");
	            var has_is_property_of_method = hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
	            // Not own constructor property must be Object
	            if (obj.constructor && !has_own_constructor && !has_is_property_of_method) return false;

	            // Own properties are enumerated firstly, so to speed up,
	            // if last one is own, then all properties are own.
	            var key;
	            for (key in obj) {}

	            return key === undefined || hasOwn.call(obj, key);
	          };

	          var hasOwn = Object.prototype.hasOwnProperty;
	          var toString = Object.prototype.toString;

	          ;

	          module.exports = function extend() {
	            var options,
	                name,
	                src,
	                copy,
	                copyIsArray,
	                clone,
	                target = arguments[0] || {},
	                i = 1,
	                length = arguments.length,
	                deep = false;

	            // Handle a deep copy situation
	            if (typeof target === "boolean") {
	              deep = target;
	              target = arguments[1] || {};
	              // skip the boolean and the target
	              i = 2;
	            }

	            // Handle case when target is a string or something (possible in deep copy)
	            if (typeof target !== "object" && typeof target !== "function") {
	              target = {};
	            }

	            for (; i < length; i++) {
	              // Only deal with non-null/undefined values
	              if ((options = arguments[i]) != null) {
	                // Extend the base object
	                for (name in options) {
	                  src = target[name];
	                  copy = options[name];

	                  // Prevent never-ending loop
	                  if (target === copy) {
	                    continue;
	                  }

	                  // Recurse if we're merging plain objects or arrays
	                  if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
	                    if (copyIsArray) {
	                      copyIsArray = false;
	                      clone = src && Array.isArray(src) ? src : [];
	                    } else {
	                      clone = src && isPlainObject(src) ? src : {};
	                    }

	                    // Never move original objects, clone them
	                    target[name] = extend(deep, clone, copy);

	                    // Don't bring in undefined values
	                  } else if (copy !== undefined) {
	                    target[name] = copy;
	                  }
	                }
	              }
	            }

	            // Return the modified object
	            return target;
	          };


	          /***/
	        },
	        /* 21 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(65);


	          /***/
	        },
	        /* 22 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(6);

	          /***/
	        },
	        /* 23 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * Is stdout a TTY? Colored output is enabled when `true`.
	           */

	          var useColors = function () {
	            var debugColors = (process.env.DEBUG_COLORS || "").trim().toLowerCase();
	            if (0 === debugColors.length) {
	              return tty.isatty(fd);
	            } else {
	              return "0" !== debugColors && "no" !== debugColors && "false" !== debugColors && "disabled" !== debugColors;
	            }
	          };

	          /**
	           * Adds ANSI color escape codes if enabled.
	           *
	           * @api public
	           */

	          var formatArgs = function () {
	            var args = arguments;
	            var useColors = this.useColors;
	            var name = this.namespace;

	            if (useColors) {
	              var c = this.color;

	              args[0] = "  \u001b[9" + c + "m" + name + " " + "\u001b[0m" + args[0] + "\u001b[3" + c + "m" + " +" + exports.humanize(this.diff) + "\u001b[0m";
	            } else {
	              args[0] = new Date().toUTCString() + " " + name + " " + args[0];
	            }
	            return args;
	          };

	          /**
	           * Invokes `console.error()` with the specified arguments.
	           */

	          var log = function () {
	            return stream.write(util.format.apply(this, arguments) + "\n");
	          };

	          /**
	           * Save `namespaces`.
	           *
	           * @param {String} namespaces
	           * @api private
	           */

	          var save = function (namespaces) {
	            if (null == namespaces) {
	              // If you set a process.env field to null or undefined, it gets cast to the
	              // string 'null' or 'undefined'. Just delete instead.
	              delete process.env.DEBUG;
	            } else {
	              process.env.DEBUG = namespaces;
	            }
	          };

	          /**
	           * Load `namespaces`.
	           *
	           * @return {String} returns the previously persisted debug modes
	           * @api private
	           */

	          var load = function () {
	            return process.env.DEBUG;
	          };

	          /**
	           * Copied from `node/src/node.js`.
	           *
	           * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
	           * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
	           */

	          var createWritableStdioStream = function (fd) {
	            var stream;
	            var tty_wrap = process.binding("tty_wrap");

	            // Note stream._type is used for test-module-load-list.js

	            switch (tty_wrap.guessHandleType(fd)) {
	              case "TTY":
	                stream = new tty.WriteStream(fd);
	                stream._type = "tty";

	                // Hack to have stream not keep the event loop alive.
	                // See https://github.com/joyent/node/issues/1726
	                if (stream._handle && stream._handle.unref) {
	                  stream._handle.unref();
	                }
	                break;

	              case "FILE":
	                var fs = __webpack_require__(9);
	                stream = new fs.SyncWriteStream(fd, { autoClose: false });
	                stream._type = "fs";
	                break;

	              case "PIPE":
	              case "TCP":
	                var net = __webpack_require__(63);
	                stream = new net.Socket({
	                  fd: fd,
	                  readable: false,
	                  writable: true
	                });

	                // FIXME Should probably have an option in net.Socket to create a
	                // stream from an existing fd which is writable only. But for now
	                // we'll just add this hack and set the `readable` member to false.
	                // Test: ./node test/fixtures/echo.js < /etc/passwd
	                stream.readable = false;
	                stream.read = null;
	                stream._type = "pipe";

	                // FIXME Hack to have stream not keep the event loop alive.
	                // See https://github.com/joyent/node/issues/1726
	                if (stream._handle && stream._handle.unref) {
	                  stream._handle.unref();
	                }
	                break;

	              default:
	                // Probably an error on in uv_guess_handle()
	                throw new Error("Implement me. Unknown stream file type!");
	            }

	            // For supporting legacy API we put the FD here.
	            stream.fd = fd;

	            stream._isStdio = true;

	            return stream;
	          };




	          /**
	           * Module dependencies.
	           */

	          var tty = __webpack_require__(62);
	          var util = __webpack_require__(11);

	          /**
	           * This is the Node.js implementation of `debug()`.
	           *
	           * Expose `debug()` as the module.
	           */

	          exports = module.exports = __webpack_require__(67);
	          exports.log = log;
	          exports.formatArgs = formatArgs;
	          exports.save = save;
	          exports.load = load;
	          exports.useColors = useColors;

	          /**
	           * Colors.
	           */

	          exports.colors = [6, 2, 3, 4, 5, 1];

	          /**
	           * The file descriptor to write the `debug()` calls to.
	           * Set the `DEBUG_FD` env variable to override with another value. i.e.:
	           *
	           *   $ DEBUG_FD=3 node script.js 3>debug.log
	           */

	          var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
	          var stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);

	          /**
	           * Map %o to `util.inspect()`, since Node doesn't do that out of the box.
	           */

	          var inspect = 4 === util.inspect.length ?
	          // node <= 0.8.x
	          function (v, colors) {
	            return util.inspect(v, void 0, void 0, colors);
	          } :
	          // node > 0.8.x
	          function (v, colors) {
	            return util.inspect(v, { colors: colors });
	          };

	          exports.formatters.o = function (v) {
	            return inspect(v, this.useColors).replace(/\s*\n\s*/g, " ");
	          };

	          /**
	           * Enable namespaces listed in `process.env.DEBUG` initially.
	           */

	          exports.enable(load());


	          /***/
	        },
	        /* 24 */
	        /***/function (module, exports, __webpack_require__) {
	          var IncomingForm = __webpack_require__(68).IncomingForm;
	          IncomingForm.IncomingForm = IncomingForm;
	          module.exports = IncomingForm;


	          /***/
	        },
	        /* 25 */
	        /***/function (module, exports, __webpack_require__) {
	          var FormData = function () {
	            this._overheadLength = 0;
	            this._valueLength = 0;
	            this._lengthRetrievers = [];

	            CombinedStream.call(this);
	          };

	          /*
	           * Santa's little helpers
	           */

	          // populates missing values
	          var populate = function (dst, src) {
	            for (var prop in src) {
	              if (!dst[prop]) dst[prop] = src[prop];
	            }
	            return dst;
	          }


	          /***/;

	          var CombinedStream = __webpack_require__(76);
	          var util = __webpack_require__(11);
	          var path = __webpack_require__(64);
	          var http = __webpack_require__(8);
	          var https = __webpack_require__(7);
	          var parseUrl = __webpack_require__(5).parse;
	          var fs = __webpack_require__(9);
	          var mime = __webpack_require__(26);
	          var async = __webpack_require__(77);

	          module.exports = FormData;
	          util.inherits(FormData, CombinedStream);

	          FormData.LINE_BREAK = "\r\n";

	          FormData.prototype.append = function (field, value, options) {
	            options = options || {};

	            var append = CombinedStream.prototype.append.bind(this);

	            // all that streamy business can't handle numbers
	            if (typeof value == "number") value = "" + value;

	            // https://github.com/felixge/node-form-data/issues/38
	            if (util.isArray(value)) {
	              // Please convert your array into string
	              // the way web server expects it
	              this._error(new Error("Arrays are not supported."));
	              return;
	            }

	            var header = this._multiPartHeader(field, value, options);
	            var footer = this._multiPartFooter(field, value, options);

	            append(header);
	            append(value);
	            append(footer);

	            // pass along options.knownLength
	            this._trackLength(header, value, options);
	          };

	          FormData.prototype._trackLength = function (header, value, options) {
	            var valueLength = 0;

	            // used w/ getLengthSync(), when length is known.
	            // e.g. for streaming directly from a remote server,
	            // w/ a known file a size, and not wanting to wait for
	            // incoming file to finish to get its size.
	            if (options.knownLength != null) {
	              valueLength += +options.knownLength;
	            } else if (Buffer.isBuffer(value)) {
	              valueLength = value.length;
	            } else if (typeof value === "string") {
	              valueLength = Buffer.byteLength(value);
	            }

	            this._valueLength += valueLength;

	            // @check why add CRLF? does this account for custom/multiple CRLFs?
	            this._overheadLength += Buffer.byteLength(header) + +FormData.LINE_BREAK.length;

	            // empty or either doesn't have path or not an http response
	            if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion"))) {
	              return;
	            }

	            // no need to bother with the length
	            if (!options.knownLength) this._lengthRetrievers.push(function (next) {
	              if (value.hasOwnProperty("fd")) {
	                fs.stat(value.path, function (err, stat) {
	                  if (err) {
	                    next(err);
	                    return;
	                  }

	                  next(null, stat.size);
	                });

	                // or http response
	              } else if (value.hasOwnProperty("httpVersion")) {
	                next(null, +value.headers["content-length"]);

	                // or request stream http://github.com/mikeal/request
	              } else if (value.hasOwnProperty("httpModule")) {
	                // wait till response come back
	                value.on("response", function (response) {
	                  value.pause();
	                  next(null, +response.headers["content-length"]);
	                });
	                value.resume();

	                // something else
	              } else {
	                next("Unknown stream");
	              }
	            });
	          };

	          FormData.prototype._multiPartHeader = function (field, value, options) {
	            var boundary = this.getBoundary();
	            var header = "";

	            // custom header specified (as string)?
	            // it becomes responsible for boundary
	            // (e.g. to handle extra CRLFs on .NET servers)
	            if (options.header != null) {
	              header = options.header;
	            } else {
	              header += "--" + boundary + FormData.LINE_BREAK + "Content-Disposition: form-data; name=\"" + field + "\"";

	              // fs- and request- streams have path property
	              // or use custom filename and/or contentType
	              // TODO: Use request's response mime-type
	              if (options.filename || value.path) {
	                header += "; filename=\"" + path.basename(options.filename || value.path) + "\"" + FormData.LINE_BREAK + "Content-Type: " + (options.contentType || mime.lookup(options.filename || value.path));

	                // http response has not
	              } else if (value.readable && value.hasOwnProperty("httpVersion")) {
	                header += "; filename=\"" + path.basename(value.client._httpMessage.path) + "\"" + FormData.LINE_BREAK + "Content-Type: " + value.headers["content-type"];
	              }

	              header += FormData.LINE_BREAK + FormData.LINE_BREAK;
	            }

	            return header;
	          };

	          FormData.prototype._multiPartFooter = function (field, value, options) {
	            return (function (next) {
	              var footer = FormData.LINE_BREAK;

	              var lastPart = this._streams.length === 0;
	              if (lastPart) {
	                footer += this._lastBoundary();
	              }

	              next(footer);
	            }).bind(this);
	          };

	          FormData.prototype._lastBoundary = function () {
	            return "--" + this.getBoundary() + "--";
	          };

	          FormData.prototype.getHeaders = function (userHeaders) {
	            var formHeaders = {
	              "content-type": "multipart/form-data; boundary=" + this.getBoundary()
	            };

	            for (var header in userHeaders) {
	              formHeaders[header.toLowerCase()] = userHeaders[header];
	            }

	            return formHeaders;
	          };

	          FormData.prototype.getCustomHeaders = function (contentType) {
	            contentType = contentType ? contentType : "multipart/form-data";

	            var formHeaders = {
	              "content-type": contentType + "; boundary=" + this.getBoundary(),
	              "content-length": this.getLengthSync()
	            };

	            return formHeaders;
	          };

	          FormData.prototype.getBoundary = function () {
	            if (!this._boundary) {
	              this._generateBoundary();
	            }

	            return this._boundary;
	          };

	          FormData.prototype._generateBoundary = function () {
	            // This generates a 50 character boundary similar to those used by Firefox.
	            // They are optimized for boyer-moore parsing.
	            var boundary = "--------------------------";
	            for (var i = 0; i < 24; i++) {
	              boundary += Math.floor(Math.random() * 10).toString(16);
	            }

	            this._boundary = boundary;
	          };

	          // Note: getLengthSync DOESN'T calculate streams length
	          // As workaround one can calculate file size manually
	          // and add it as knownLength option
	          FormData.prototype.getLengthSync = function (debug) {
	            var knownLength = this._overheadLength + this._valueLength;

	            // Don't get confused, there are 3 "internal" streams for each keyval pair
	            // so it basically checks if there is any value added to the form
	            if (this._streams.length) {
	              knownLength += this._lastBoundary().length;
	            }

	            // https://github.com/felixge/node-form-data/issues/40
	            if (this._lengthRetrievers.length) {
	              // Some async length retrivers are present
	              // therefore synchronous length calculation is false.
	              // Please use getLength(callback) to get proper length
	              this._error(new Error("Cannot calculate proper length in synchronous way."));
	            }

	            return knownLength;
	          };

	          FormData.prototype.getLength = function (cb) {
	            var knownLength = this._overheadLength + this._valueLength;

	            if (this._streams.length) {
	              knownLength += this._lastBoundary().length;
	            }

	            if (!this._lengthRetrievers.length) {
	              process.nextTick(cb.bind(this, null, knownLength));
	              return;
	            }

	            async.parallel(this._lengthRetrievers, function (err, values) {
	              if (err) {
	                cb(err);
	                return;
	              }

	              values.forEach(function (length) {
	                knownLength += length;
	              });

	              cb(null, knownLength);
	            });
	          };

	          FormData.prototype.submit = function (params, cb) {
	            var request,
	                options,
	                defaults = {
	              method: "post"
	            };

	            // parse provided url if it's string
	            // or treat it as options object
	            if (typeof params == "string") {
	              params = parseUrl(params);

	              options = populate({
	                port: params.port,
	                path: params.pathname,
	                host: params.hostname
	              }, defaults);
	            } else // use custom params
	              {
	                options = populate(params, defaults);
	                // if no port provided use default one
	                if (!options.port) {
	                  options.port = options.protocol == "https:" ? 443 : 80;
	                }
	              }

	            // put that good code in getHeaders to some use
	            options.headers = this.getHeaders(params.headers);

	            // https if specified, fallback to http in any other case
	            if (params.protocol == "https:") {
	              request = https.request(options);
	            } else {
	              request = http.request(options);
	            }

	            // get content length and fire away
	            this.getLength((function (err, length) {
	              // TODO: Add chunked encoding when no length (if err)

	              // add content length
	              request.setHeader("Content-Length", length);

	              this.pipe(request);
	              if (cb) {
	                request.on("error", cb);
	                request.on("response", cb.bind(this, null));
	              }
	            }).bind(this));

	            return request;
	          };

	          FormData.prototype._error = function (err) {
	            if (this.error) return;

	            this.error = err;
	            this.pause();
	            this.emit("error", err);
	          };
	        },
	        /* 26 */
	        /***/function (module, exports, __webpack_require__) {
	          /* WEBPACK VAR INJECTION */(function (__dirname) {
	            var Mime = function () {
	              // Map of extension -> mime type
	              this.types = Object.create(null);

	              // Map of mime type -> extension
	              this.extensions = Object.create(null);
	            };

	            var path = __webpack_require__(64);
	            var fs = __webpack_require__(9);

	            /**
	             * Define mimetype -> extension mappings.  Each key is a mime-type that maps
	             * to an array of extensions associated with the type.  The first extension is
	             * used as the default extension for the type.
	             *
	             * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
	             *
	             * @param map (Object) type definitions
	             */
	            Mime.prototype.define = function (map) {
	              for (var type in map) {
	                var exts = map[type];

	                for (var i = 0; i < exts.length; i++) {
	                  if (process.env.DEBUG_MIME && this.types[exts]) {
	                    console.warn(this._loading.replace(/.*\//, ""), "changes \"" + exts[i] + "\" extension type from " + this.types[exts] + " to " + type);
	                  }

	                  this.types[exts[i]] = type;
	                }

	                // Default extension is the first one we encounter
	                if (!this.extensions[type]) {
	                  this.extensions[type] = exts[0];
	                }
	              }
	            };

	            /**
	             * Load an Apache2-style ".types" file
	             *
	             * This may be called multiple times (it's expected).  Where files declare
	             * overlapping types/extensions, the last file wins.
	             *
	             * @param file (String) path of file to load.
	             */
	            Mime.prototype.load = function (file) {
	              this._loading = file;
	              // Read file and split into lines
	              var map = {},
	                  content = fs.readFileSync(file, "ascii"),
	                  lines = content.split(/[\r\n]+/);

	              lines.forEach(function (line) {
	                // Clean up whitespace/comments, and split into fields
	                var fields = line.replace(/\s*#.*|^\s*|\s*$/g, "").split(/\s+/);
	                map[fields.shift()] = fields;
	              });

	              this.define(map);

	              this._loading = null;
	            };

	            /**
	             * Lookup a mime type based on extension
	             */
	            Mime.prototype.lookup = function (path, fallback) {
	              var ext = path.replace(/.*[\.\/\\]/, "").toLowerCase();

	              return this.types[ext] || fallback || this.default_type;
	            };

	            /**
	             * Return file extension associated with a mime type
	             */
	            Mime.prototype.extension = function (mimeType) {
	              var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
	              return this.extensions[type];
	            };

	            // Default instance
	            var mime = new Mime();

	            // Load local copy of
	            // http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
	            mime.load(path.join(__dirname, "types/mime.types"));

	            // Load additional types from node.js community
	            mime.load(path.join(__dirname, "types/node.types"));

	            // Default type
	            mime.default_type = mime.lookup("bin");

	            //
	            // Additional API specific to the default instance
	            //

	            mime.Mime = Mime;

	            /**
	             * Lookup a charset based on mime type.
	             */
	            mime.charsets = {
	              lookup: function (mimeType, fallback) {
	                // Assume text types are utf8
	                return /^text\//.test(mimeType) ? "UTF-8" : fallback;
	              }
	            };

	            module.exports = mime;

	            /* WEBPACK VAR INJECTION */
	          }).call(exports, "/");

	          /***/
	        },
	        /* 27 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var tryCatch1 = function (fn, receiver, arg) {
	            try {
	              return fn.call(receiver, arg);
	            } catch (e) {
	              errorObj.e = e;
	              return errorObj;
	            }
	          };

	          var tryCatch2 = function (fn, receiver, arg, arg2) {
	            try {
	              return fn.call(receiver, arg, arg2);
	            } catch (e) {
	              errorObj.e = e;
	              return errorObj;
	            }
	          };

	          var tryCatch3 = function (fn, receiver, arg, arg2, arg3) {
	            try {
	              return fn.call(receiver, arg, arg2, arg3);
	            } catch (e) {
	              errorObj.e = e;
	              return errorObj;
	            }
	          };

	          var tryCatch4 = function (fn, receiver, arg, arg2, arg3, arg4) {
	            try {
	              return fn.call(receiver, arg, arg2, arg3, arg4);
	            } catch (e) {
	              errorObj.e = e;
	              return errorObj;
	            }
	          };

	          var tryCatchApply = function (fn, args, receiver) {
	            try {
	              return fn.apply(receiver, args);
	            } catch (e) {
	              errorObj.e = e;
	              return errorObj;
	            }
	          };

	          var asString = function (val) {
	            return typeof val === "string" ? val : "" + val;
	          };

	          var isPrimitive = function (val) {
	            return val == null || val === true || val === false || typeof val === "string" || typeof val === "number";
	          };

	          var isObject = function (value) {
	            return !isPrimitive(value);
	          };

	          var maybeWrapAsError = function (maybeError) {
	            if (!isPrimitive(maybeError)) return maybeError;

	            return new Error(asString(maybeError));
	          };

	          var withAppended = function (target, appendee) {
	            var len = target.length;
	            var ret = new Array(len + 1);
	            var i;
	            for (i = 0; i < len; ++i) {
	              ret[i] = target[i];
	            }
	            ret[i] = appendee;
	            return ret;
	          };

	          var getDataPropertyOrDefault = function (obj, key, defaultValue) {
	            if (es5.isES5) {
	              var desc = Object.getOwnPropertyDescriptor(obj, key);
	              if (desc != null) {
	                return desc.get == null && desc.set == null ? desc.value : defaultValue;
	              }
	            } else {
	              return ({}).hasOwnProperty.call(obj, key) ? obj[key] : undefined;
	            }
	          };

	          var notEnumerableProp = function (obj, name, value) {
	            if (isPrimitive(obj)) return obj;
	            var descriptor = {
	              value: value,
	              configurable: true,
	              enumerable: false,
	              writable: true
	            };
	            es5.defineProperty(obj, name, descriptor);
	            return obj;
	          };

	          var thrower = function (r) {
	            throw r;
	          };

	          var isClass = function (fn) {
	            try {
	              if (typeof fn === "function") {
	                var keys = es5.keys(fn.prototype);
	                return keys.length > 0 && !(keys.length === 1 && keys[0] === "constructor");
	              }
	              return false;
	            } catch (e) {
	              return false;
	            }
	          };

	          var toFastProperties = function (obj) {
	            /*jshint -W027*/
	            var f = function () {};

	            f.prototype = obj;
	            return f;
	            eval(obj);
	          };

	          var isIdentifier = function (str) {
	            return rident.test(str);
	          };

	          var filledRange = function (count, prefix, suffix) {
	            var ret = new Array(count);
	            for (var i = 0; i < count; ++i) {
	              ret[i] = prefix + i + suffix;
	            }
	            return ret;
	          };

	          var es5 = __webpack_require__(69);
	          var haveGetters = (function () {
	            try {
	              var o = {};
	              es5.defineProperty(o, "f", {
	                get: function () {
	                  return 3;
	                }
	              });
	              return o.f === 3;
	            } catch (e) {
	              return false;
	            }
	          })();
	          var canEvaluate = typeof navigator == "undefined";
	          var errorObj = { e: {} };


	          var inherits = function (Child, Parent) {
	            var T = function () {
	              this.constructor = Child;
	              this.constructor$ = Parent;
	              for (var propertyName in Parent.prototype) {
	                if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== "$") {
	                  this[propertyName + "$"] = Parent.prototype[propertyName];
	                }
	              }
	            };

	            var hasProp = ({}).hasOwnProperty;

	            T.prototype = Parent.prototype;
	            Child.prototype = new T();
	            return Child.prototype;
	          };




	          var wrapsPrimitiveReceiver = (function () {
	            return this !== "string";
	          }).call("string");

	          var inheritedDataKeys = (function () {
	            if (es5.isES5) {
	              return function (obj, opts) {
	                var ret = [];
	                var visitedKeys = Object.create(null);
	                var getKeys = Object(opts).includeHidden ? Object.getOwnPropertyNames : Object.keys;
	                while (obj != null) {
	                  var keys;
	                  try {
	                    keys = getKeys(obj);
	                  } catch (e) {
	                    return ret;
	                  }
	                  for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (visitedKeys[key]) continue;
	                    visitedKeys[key] = true;
	                    var desc = Object.getOwnPropertyDescriptor(obj, key);
	                    if (desc != null && desc.get == null && desc.set == null) {
	                      ret.push(key);
	                    }
	                  }
	                  obj = es5.getPrototypeOf(obj);
	                }
	                return ret;
	              };
	            } else {
	              return function (obj) {
	                var ret = [];
	                /*jshint forin:false */
	                for (var key in obj) {
	                  ret.push(key);
	                }
	                return ret;
	              };
	            }
	          })();

	          var rident = /^[a-z$_][a-z$_0-9]*$/i;


	          var ret = {
	            isClass: isClass,
	            isIdentifier: isIdentifier,
	            inheritedDataKeys: inheritedDataKeys,
	            getDataPropertyOrDefault: getDataPropertyOrDefault,
	            thrower: thrower,
	            isArray: es5.isArray,
	            haveGetters: haveGetters,
	            notEnumerableProp: notEnumerableProp,
	            isPrimitive: isPrimitive,
	            isObject: isObject,
	            canEvaluate: canEvaluate,
	            errorObj: errorObj,
	            tryCatch1: tryCatch1,
	            tryCatch2: tryCatch2,
	            tryCatch3: tryCatch3,
	            tryCatch4: tryCatch4,
	            tryCatchApply: tryCatchApply,
	            inherits: inherits,
	            withAppended: withAppended,
	            asString: asString,
	            maybeWrapAsError: maybeWrapAsError,
	            wrapsPrimitiveReceiver: wrapsPrimitiveReceiver,
	            toFastProperties: toFastProperties,
	            filledRange: filledRange,
	            lastLineError: new Error()
	          };

	          module.exports = ret;


	          /***/
	        },
	        /* 28 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var Async = function () {
	            this._isTickUsed = false;
	            this._schedule = schedule;
	            this._lateBuffer = new Queue(16);
	            this._functionBuffer = new Queue(65536);
	            var self = this;
	            this.consumeFunctionBuffer = function () {
	              self._consumeFunctionBuffer();
	            };
	          };

	          var firstLineError = new Error();
	          var schedule = __webpack_require__(70);
	          var Queue = __webpack_require__(71);
	          var errorObj = __webpack_require__(27).errorObj;
	          var tryCatch1 = __webpack_require__(27).tryCatch1;
	          var _process = typeof process !== "undefined" ? process : undefined;

	          Async.prototype.haveItemsQueued = function () {
	            return this._functionBuffer.length() > 0;
	          };

	          Async.prototype.invokeLater = function (fn, receiver, arg) {
	            if (_process !== undefined && _process.domain != null && !fn.domain) {
	              fn = _process.domain.bind(fn);
	            }
	            this._lateBuffer.push(fn, receiver, arg);
	            this._queueTick();
	          };

	          Async.prototype._withDomain = function (fn) {
	            if (_process !== undefined && _process.domain != null && !fn.domain) {
	              fn = _process.domain.bind(fn);
	            }
	            return fn;
	          };

	          Async.prototype.invokeFirst = function (fn, receiver, arg) {
	            fn = this._withDomain(fn);
	            this._functionBuffer.unshift(fn, receiver, arg);
	            this._queueTick();
	          };

	          Async.prototype.invoke = function (fn, receiver, arg) {
	            fn = this._withDomain(fn);
	            this._functionBuffer.push(fn, receiver, arg);
	            this._queueTick();
	          };

	          Async.prototype._consumeFunctionBuffer = function () {
	            var functionBuffer = this._functionBuffer;
	            while (functionBuffer.length() > 0) {
	              var fn = functionBuffer.shift();
	              var receiver = functionBuffer.shift();
	              var arg = functionBuffer.shift();
	              fn.call(receiver, arg);
	            }
	            this._reset();
	            this._consumeLateBuffer();
	          };

	          Async.prototype._consumeLateBuffer = function () {
	            var buffer = this._lateBuffer;
	            while (buffer.length() > 0) {
	              var fn = buffer.shift();
	              var receiver = buffer.shift();
	              var arg = buffer.shift();
	              var res = tryCatch1(fn, receiver, arg);
	              if (res === errorObj) {
	                this._queueTick();
	                if (fn.domain != null) {
	                  fn.domain.emit("error", res.e);
	                } else {
	                  throw res.e;
	                }
	              }
	            }
	          };

	          Async.prototype._queueTick = function () {
	            if (!this._isTickUsed) {
	              this._schedule(this.consumeFunctionBuffer);
	              this._isTickUsed = true;
	            }
	          };

	          Async.prototype._reset = function () {
	            this._isTickUsed = false;
	          };

	          module.exports = new Async();
	          module.exports.firstLineError = firstLineError;


	          /***/
	        },
	        /* 29 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var markAsOriginatingFromRejection = function (e) {
	            try {
	              notEnumerableProp(e, "isOperational", true);
	            } catch (ignore) {}
	          };

	          var originatesFromRejection = function (e) {
	            if (e == null) return false;
	            return e instanceof OperationalError || e.isOperational === true;
	          };

	          var isError = function (obj) {
	            return obj instanceof Error;
	          };

	          var canAttachTrace = function (obj) {
	            return isError(obj) && propertyIsWritable(obj, "stack");
	          };

	          var subError = function (nameProperty, defaultMessage) {
	            var SubError = function (message) {
	              if (!(this instanceof SubError)) return new SubError(message);
	              notEnumerableProp(this, "message", typeof message === "string" ? message : defaultMessage);
	              notEnumerableProp(this, "name", nameProperty);
	              if (Error.captureStackTrace) {
	                Error.captureStackTrace(this, this.constructor);
	              }
	            };

	            inherits(SubError, Error);
	            return SubError;
	          };

	          var OperationalError = function (message) {
	            notEnumerableProp(this, "name", "OperationalError");
	            notEnumerableProp(this, "message", message);
	            this.cause = message;
	            this.isOperational = true;

	            if (message instanceof Error) {
	              notEnumerableProp(this, "message", message.message);
	              notEnumerableProp(this, "stack", message.stack);
	            } else if (Error.captureStackTrace) {
	              Error.captureStackTrace(this, this.constructor);
	            }
	          };

	          var Objectfreeze = __webpack_require__(69).freeze;
	          var propertyIsWritable = __webpack_require__(69).propertyIsWritable;
	          var util = __webpack_require__(27);
	          var inherits = util.inherits;
	          var notEnumerableProp = util.notEnumerableProp;

	          var _TypeError, _RangeError;
	          var CancellationError = subError("CancellationError", "cancellation error");
	          var TimeoutError = subError("TimeoutError", "timeout error");
	          var AggregateError = subError("AggregateError", "aggregate error");
	          try {
	            _TypeError = TypeError;
	            _RangeError = RangeError;
	          } catch (e) {
	            _TypeError = subError("TypeError", "type error");
	            _RangeError = subError("RangeError", "range error");
	          }

	          var methods = ("join pop push shift unshift slice filter forEach some " + "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

	          for (var i = 0; i < methods.length; ++i) {
	            if (typeof Array.prototype[methods[i]] === "function") {
	              AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
	            }
	          }

	          AggregateError.prototype.length = 0;
	          AggregateError.prototype.isOperational = true;
	          var level = 0;
	          AggregateError.prototype.toString = function () {
	            var indent = Array(level * 4 + 1).join(" ");
	            var ret = "\n" + indent + "AggregateError of:" + "\n";
	            level++;
	            indent = Array(level * 4 + 1).join(" ");
	            for (var i = 0; i < this.length; ++i) {
	              var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
	              var lines = str.split("\n");
	              for (var j = 0; j < lines.length; ++j) {
	                lines[j] = indent + lines[j];
	              }
	              str = lines.join("\n");
	              ret += str + "\n";
	            }
	            level--;
	            return ret;
	          };

	          inherits(OperationalError, Error);

	          var key = "__BluebirdErrorTypes__";
	          var errorTypes = Error[key];
	          if (!errorTypes) {
	            errorTypes = Objectfreeze({
	              CancellationError: CancellationError,
	              TimeoutError: TimeoutError,
	              OperationalError: OperationalError,
	              RejectionError: OperationalError,
	              AggregateError: AggregateError
	            });
	            notEnumerableProp(Error, key, errorTypes);
	          }

	          module.exports = {
	            Error: Error,
	            TypeError: _TypeError,
	            RangeError: _RangeError,
	            CancellationError: errorTypes.CancellationError,
	            OperationalError: errorTypes.OperationalError,
	            TimeoutError: errorTypes.TimeoutError,
	            AggregateError: errorTypes.AggregateError,
	            originatesFromRejection: originatesFromRejection,
	            markAsOriginatingFromRejection: markAsOriginatingFromRejection,
	            canAttachTrace: canAttachTrace
	          };


	          /***/
	        },
	        /* 30 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, INTERNAL) {
	            var getThen = function (obj) {
	              try {
	                return obj.then;
	              } catch (e) {
	                errorObj.e = e;
	                return errorObj;
	              }
	            };

	            var Promise$_Cast = function (obj, originalPromise) {
	              if (isObject(obj)) {
	                if (obj instanceof Promise) {
	                  return obj;
	                } else if (isAnyBluebirdPromise(obj)) {
	                  var ret = new Promise(INTERNAL);
	                  ret._setTrace(undefined);
	                  obj._then(ret._fulfillUnchecked, ret._rejectUncheckedCheckError, ret._progressUnchecked, ret, null);
	                  ret._setFollowing();
	                  return ret;
	                }
	                var then = getThen(obj);
	                if (then === errorObj) {
	                  if (originalPromise !== undefined && canAttachTrace(then.e)) {
	                    originalPromise._attachExtraTrace(then.e);
	                  }
	                  return Promise.reject(then.e);
	                } else if (typeof then === "function") {
	                  return Promise$_doThenable(obj, then, originalPromise);
	                }
	              }
	              return obj;
	            };

	            var isAnyBluebirdPromise = function (obj) {
	              return hasProp.call(obj, "_promise0");
	            };

	            var Promise$_doThenable = function (x, then, originalPromise) {
	              var Promise$_resolveFromThenable = function (y) {
	                if (called) return;
	                called = true;

	                if (x === y) {
	                  var e = Promise._makeSelfResolutionError();
	                  if (originalPromise !== undefined) {
	                    originalPromise._attachExtraTrace(e);
	                  }
	                  resolver.promise._reject(e, undefined);
	                  return;
	                }
	                resolver.resolve(y);
	              };

	              var Promise$_rejectFromThenable = function (r) {
	                if (called) return;
	                called = true;
	                var trace = canAttachTrace(r) ? r : new Error(r + "");
	                if (originalPromise !== undefined) {
	                  originalPromise._attachExtraTrace(trace);
	                }
	                resolver.promise._reject(r, trace);
	              };

	              var Promise$_progressFromThenable = function (v) {
	                if (called) return;
	                var promise = resolver.promise;
	                if (typeof promise._progress === "function") {
	                  promise._progress(v);
	                }
	              };

	              var resolver = Promise.defer();
	              var called = false;
	              try {
	                then.call(x, Promise$_resolveFromThenable, Promise$_rejectFromThenable, Promise$_progressFromThenable);
	              } catch (e) {
	                if (!called) {
	                  called = true;
	                  var trace = canAttachTrace(e) ? e : new Error(e + "");
	                  if (originalPromise !== undefined) {
	                    originalPromise._attachExtraTrace(trace);
	                  }
	                  resolver.promise._reject(e, trace);
	                }
	              }
	              return resolver.promise;
	            };

	            var util = __webpack_require__(27);
	            var canAttachTrace = __webpack_require__(29).canAttachTrace;
	            var errorObj = util.errorObj;
	            var isObject = util.isObject;

	            var hasProp = ({}).hasOwnProperty;


	            return Promise$_Cast;
	          };


	          /***/
	        },
	        /* 31 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, INTERNAL, cast) {
	            var toResolutionValue = function (val) {
	              switch (val) {
	                case -1:
	                  return undefined;
	                case -2:
	                  return [];
	                case -3:
	                  return {};
	              }
	            };

	            var PromiseArray = function (values) {
	              var promise = this._promise = new Promise(INTERNAL);
	              var parent;
	              if (values instanceof Promise) {
	                parent = values;
	                promise._propagateFrom(parent, 1 | 4);
	              }
	              promise._setTrace(parent);
	              this._values = values;
	              this._length = 0;
	              this._totalResolved = 0;
	              this._init(undefined, -2);
	            };

	            var canAttachTrace = __webpack_require__(29).canAttachTrace;
	            var util = __webpack_require__(27);
	            var isArray = util.isArray;

	            PromiseArray.prototype.length = function () {
	              return this._length;
	            };

	            PromiseArray.prototype.promise = function () {
	              return this._promise;
	            };

	            PromiseArray.prototype._init = function PromiseArray$_init(_, resolveValueIfEmpty) {
	              var values = cast(this._values, undefined);
	              if (values instanceof Promise) {
	                this._values = values;
	                values._setBoundTo(this._promise._boundTo);
	                if (values.isFulfilled()) {
	                  values = values._settledValue;
	                  if (!isArray(values)) {
	                    var err = new Promise.TypeError("expecting an array, a promise or a thenable");
	                    this.__hardReject__(err);
	                    return;
	                  }
	                } else if (values.isPending()) {
	                  values._then(PromiseArray$_init, this._reject, undefined, this, resolveValueIfEmpty);
	                  return;
	                } else {
	                  values._unsetRejectionIsUnhandled();
	                  this._reject(values._settledValue);
	                  return;
	                }
	              } else if (!isArray(values)) {
	                var err = new Promise.TypeError("expecting an array, a promise or a thenable");
	                this.__hardReject__(err);
	                return;
	              }

	              if (values.length === 0) {
	                if (resolveValueIfEmpty === -5) {
	                  this._resolveEmptyArray();
	                } else {
	                  this._resolve(toResolutionValue(resolveValueIfEmpty));
	                }
	                return;
	              }
	              var len = this.getActualLength(values.length);
	              this._length = len;
	              this._values = this.shouldCopyValues() ? new Array(len) : this._values;
	              for (var i = 0; i < len; ++i) {
	                if (this._isResolved()) return;
	                var maybePromise = cast(values[i], undefined);
	                if (maybePromise instanceof Promise) {
	                  if (maybePromise.isPending()) {
	                    maybePromise._proxyPromiseArray(this, i);
	                  } else if (maybePromise.isFulfilled()) {
	                    this._promiseFulfilled(maybePromise._settledValue, i);
	                  } else {
	                    maybePromise._unsetRejectionIsUnhandled();
	                    this._promiseRejected(maybePromise._settledValue, i);
	                  }
	                } else {
	                  this._promiseFulfilled(maybePromise, i);
	                }
	              }
	            };

	            PromiseArray.prototype._isResolved = function () {
	              return this._values === null;
	            };

	            PromiseArray.prototype._resolve = function (value) {
	              this._values = null;
	              this._promise._fulfill(value);
	            };

	            PromiseArray.prototype.__hardReject__ = PromiseArray.prototype._reject = function (reason) {
	              this._values = null;
	              var trace = canAttachTrace(reason) ? reason : new Error(reason + "");
	              this._promise._attachExtraTrace(trace);
	              this._promise._reject(reason, trace);
	            };

	            PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
	              if (this._isResolved()) return;
	              this._promise._progress({
	                index: index,
	                value: progressValue
	              });
	            };


	            PromiseArray.prototype._promiseFulfilled = function (value, index) {
	              if (this._isResolved()) return;
	              this._values[index] = value;
	              var totalResolved = ++this._totalResolved;
	              if (totalResolved >= this._length) {
	                this._resolve(this._values);
	              }
	            };

	            PromiseArray.prototype._promiseRejected = function (reason, index) {
	              if (this._isResolved()) return;
	              this._totalResolved++;
	              this._reject(reason);
	            };

	            PromiseArray.prototype.shouldCopyValues = function () {
	              return true;
	            };

	            PromiseArray.prototype.getActualLength = function (len) {
	              return len;
	            };

	            return PromiseArray;
	          };


	          /***/
	        },
	        /* 32 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function () {
	            var formatNonError = function (obj) {
	              var str;
	              if (typeof obj === "function") {
	                str = "[function " + (obj.name || "anonymous") + "]";
	              } else {
	                str = obj.toString();
	                var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
	                if (ruselessToString.test(str)) {
	                  try {
	                    var newStr = JSON.stringify(obj);
	                    str = newStr;
	                  } catch (e) {}
	                }
	                if (str.length === 0) {
	                  str = "(empty array)";
	                }
	              }
	              return "(<" + snip(str) + ">, no stack trace)";
	            };

	            var snip = function (str) {
	              var maxChars = 41;
	              if (str.length < maxChars) {
	                return str;
	              }
	              return str.substr(0, maxChars - 3) + "...";
	            };

	            var CapturedTrace = function (ignoreUntil, isTopLevel) {
	              this.captureStackTrace(CapturedTrace, isTopLevel);
	            };

	            var formatAndLogError = function (error, title) {
	              if (typeof console === "object") {
	                var message;
	                if (typeof error === "object" || typeof error === "function") {
	                  var stack = error.stack;
	                  message = title + formatStack(stack, error);
	                } else {
	                  message = title + String(error);
	                }
	                if (typeof console.warn === "function" || typeof console.warn === "object") {
	                  console.warn(message);
	                } else if (typeof console.log === "function" || typeof console.log === "object") {
	                  console.log(message);
	                }
	              }
	            };

	            var parseLineInfo = function (line) {
	              var matches = line.match(parseLineInfoRegex);
	              if (matches) {
	                return {
	                  fileName: matches[1],
	                  line: parseInt(matches[2], 10)
	                };
	              }
	            };

	            var inherits = __webpack_require__(27).inherits;
	            var defineProperty = __webpack_require__(69).defineProperty;
	            var rtraceline = null;
	            var formatStack = null;

	            inherits(CapturedTrace, Error);

	            CapturedTrace.prototype.captureStackTrace = function (ignoreUntil, isTopLevel) {
	              captureStackTrace(this, ignoreUntil, isTopLevel);
	            };

	            CapturedTrace.unhandledRejection = function (reason) {
	              formatAndLogError(reason, "^--- With additional stack trace: ");
	            };

	            CapturedTrace.possiblyUnhandledRejection = function (reason) {
	              formatAndLogError(reason, "Possibly unhandled ");
	            };

	            CapturedTrace.combine = function (current, prev) {
	              var currentLastIndex = current.length - 1;
	              var currentLastLine = current[currentLastIndex];
	              var commonRootMeetPoint = -1;
	              for (var i = prev.length - 1; i >= 0; --i) {
	                if (prev[i] === currentLastLine) {
	                  commonRootMeetPoint = i;
	                  break;
	                }
	              }

	              for (var i = commonRootMeetPoint; i >= 0; --i) {
	                var line = prev[i];
	                if (current[currentLastIndex] === line) {
	                  current.pop();
	                  currentLastIndex--;
	                } else {
	                  break;
	                }
	              }

	              current.push("From previous event:");
	              var lines = current.concat(prev);

	              var ret = [];

	              for (var i = 0, len = lines.length; i < len; ++i) {
	                if (rtraceline.test(lines[i]) && shouldIgnore(lines[i]) || i > 0 && !rtraceline.test(lines[i]) && lines[i] !== "From previous event:") {
	                  continue;
	                }
	                ret.push(lines[i]);
	              }
	              return ret;
	            };

	            CapturedTrace.protectErrorMessageNewlines = function (stack) {
	              for (var i = 0; i < stack.length; ++i) {
	                if (rtraceline.test(stack[i])) {
	                  break;
	                }
	              }

	              if (i <= 1) return;

	              var errorMessageLines = [];
	              for (var j = 0; j < i; ++j) {
	                errorMessageLines.push(stack.shift());
	              }
	              stack.unshift(errorMessageLines.join("\u0002\u0000\u0001"));
	            };

	            CapturedTrace.isSupported = function () {
	              return typeof captureStackTrace === "function";
	            };

	            var shouldIgnore = function () {
	              return false;
	            };
	            var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
	            CapturedTrace.setBounds = function (firstLineError, lastLineError) {
	              if (!CapturedTrace.isSupported()) return;
	              var firstStackLines = firstLineError.stack.split("\n");
	              var lastStackLines = lastLineError.stack.split("\n");
	              var firstIndex = -1;
	              var lastIndex = -1;
	              var firstFileName;
	              var lastFileName;
	              for (var i = 0; i < firstStackLines.length; ++i) {
	                var result = parseLineInfo(firstStackLines[i]);
	                if (result) {
	                  firstFileName = result.fileName;
	                  firstIndex = result.line;
	                  break;
	                }
	              }
	              for (var i = 0; i < lastStackLines.length; ++i) {
	                var result = parseLineInfo(lastStackLines[i]);
	                if (result) {
	                  lastFileName = result.fileName;
	                  lastIndex = result.line;
	                  break;
	                }
	              }
	              if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
	                return;
	              }

	              shouldIgnore = function (line) {
	                var info = parseLineInfo(line);
	                if (info) {
	                  if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
	                    return true;
	                  }
	                }
	                return false;
	              };
	            };

	            var captureStackTrace = (function stackDetection() {
	              if (typeof Error.stackTraceLimit === "number" && typeof Error.captureStackTrace === "function") {
	                rtraceline = /^\s*at\s*/;
	                formatStack = function (stack, error) {
	                  if (typeof stack === "string") return stack;

	                  if (error.name !== undefined && error.message !== undefined) {
	                    return error.name + ". " + error.message;
	                  }
	                  return formatNonError(error);
	                };
	                var captureStackTrace = Error.captureStackTrace;
	                var bluebirdRegexp = /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo)/;
	                shouldIgnore = function (line) {
	                  return bluebirdRegexp.test(line);
	                };
	                return function CapturedTrace$_captureStackTrace(receiver, ignoreUntil) {
	                  captureStackTrace(receiver, ignoreUntil);
	                };
	              }
	              var err = new Error();

	              if (typeof err.stack === "string" && typeof "".startsWith === "function" && err.stack.startsWith("stackDetection@") && stackDetection.name === "stackDetection") {
	                defineProperty(Error, "stackTraceLimit", {
	                  writable: true,
	                  enumerable: false,
	                  configurable: false,
	                  value: 25
	                });
	                rtraceline = /@/;
	                var rline = /[@\n]/;

	                formatStack = function (stack, error) {
	                  if (typeof stack === "string") {
	                    return error.name + ". " + error.message + "\n" + stack;
	                  }

	                  if (error.name !== undefined && error.message !== undefined) {
	                    return error.name + ". " + error.message;
	                  }
	                  return formatNonError(error);
	                };

	                return function captureStackTrace(o) {
	                  var stack = new Error().stack;
	                  var split = stack.split(rline);
	                  var len = split.length;
	                  var ret = "";
	                  for (var i = 0; i < len; i += 2) {
	                    ret += split[i];
	                    ret += "@";
	                    ret += split[i + 1];
	                    ret += "\n";
	                  }
	                  o.stack = ret;
	                };
	              } else {
	                formatStack = function (stack, error) {
	                  if (typeof stack === "string") return stack;

	                  if ((typeof error === "object" || typeof error === "function") && error.name !== undefined && error.message !== undefined) {
	                    return error.name + ". " + error.message;
	                  }
	                  return formatNonError(error);
	                };

	                return null;
	              }
	            })();

	            return CapturedTrace;
	          };


	          /***/
	        },
	        /* 33 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (NEXT_FILTER) {
	            var CatchFilter = function (instances, callback, promise) {
	              this._instances = instances;
	              this._callback = callback;
	              this._promise = promise;
	            };

	            var CatchFilter$_safePredicate = function (predicate, e) {
	              var safeObject = {};
	              var retfilter = tryCatch1(predicate, safeObject, e);

	              if (retfilter === errorObj) return retfilter;

	              var safeKeys = keys(safeObject);
	              if (safeKeys.length) {
	                errorObj.e = new TypeError("Catch filter must inherit from Error " + "or be a simple predicate function");
	                return errorObj;
	              }
	              return retfilter;
	            };

	            var util = __webpack_require__(27);
	            var errors = __webpack_require__(29);
	            var tryCatch1 = util.tryCatch1;
	            var errorObj = util.errorObj;
	            var keys = __webpack_require__(69).keys;
	            var TypeError = errors.TypeError;

	            CatchFilter.prototype.doFilter = function (e) {
	              var cb = this._callback;
	              var promise = this._promise;
	              var boundTo = promise._boundTo;
	              for (var i = 0, len = this._instances.length; i < len; ++i) {
	                var item = this._instances[i];
	                var itemIsErrorType = item === Error || item != null && item.prototype instanceof Error;

	                if (itemIsErrorType && e instanceof item) {
	                  var ret = tryCatch1(cb, boundTo, e);
	                  if (ret === errorObj) {
	                    NEXT_FILTER.e = ret.e;
	                    return NEXT_FILTER;
	                  }
	                  return ret;
	                } else if (typeof item === "function" && !itemIsErrorType) {
	                  var shouldHandle = CatchFilter$_safePredicate(item, e);
	                  if (shouldHandle === errorObj) {
	                    var trace = errors.canAttachTrace(errorObj.e) ? errorObj.e : new Error(errorObj.e + "");
	                    this._promise._attachExtraTrace(trace);
	                    e = errorObj.e;
	                    break;
	                  } else if (shouldHandle) {
	                    var ret = tryCatch1(cb, boundTo, e);
	                    if (ret === errorObj) {
	                      NEXT_FILTER.e = ret.e;
	                      return NEXT_FILTER;
	                    }
	                    return ret;
	                  }
	                }
	              }
	              NEXT_FILTER.e = e;
	              return NEXT_FILTER;
	            };

	            return CatchFilter;
	          };


	          /***/
	        },
	        /* 34 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var isUntypedError = function (obj) {
	            return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype;
	          };

	          var wrapAsOperationalError = function (obj) {
	            var ret;
	            if (isUntypedError(obj)) {
	              ret = new OperationalError(obj);
	            } else {
	              ret = obj;
	            }
	            errors.markAsOriginatingFromRejection(ret);
	            return ret;
	          };

	          var nodebackForPromise = function (promise) {
	            var PromiseResolver$_callback = function (err, value) {
	              if (promise === null) return;

	              if (err) {
	                var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
	                promise._attachExtraTrace(wrapped);
	                promise._reject(wrapped);
	              } else if (arguments.length > 2) {
	                var $_len = arguments.length;var args = new Array($_len - 1);for (var $_i = 1; $_i < $_len; ++$_i) {
	                  args[$_i - 1] = arguments[$_i];
	                }
	                promise._fulfill(args);
	              } else {
	                promise._fulfill(value);
	              }

	              promise = null;
	            };

	            return PromiseResolver$_callback;
	          };

	          var util = __webpack_require__(27);
	          var maybeWrapAsError = util.maybeWrapAsError;
	          var errors = __webpack_require__(29);
	          var TimeoutError = errors.TimeoutError;
	          var OperationalError = errors.OperationalError;
	          var async = __webpack_require__(28);
	          var haveGetters = util.haveGetters;
	          var es5 = __webpack_require__(69);




	          var PromiseResolver;
	          if (!haveGetters) {
	            PromiseResolver = function (promise) {
	              this.promise = promise;
	              this.asCallback = nodebackForPromise(promise);
	              this.callback = this.asCallback;
	            };
	          } else {
	            PromiseResolver = function (promise) {
	              this.promise = promise;
	            };
	          }
	          if (haveGetters) {
	            var prop = {
	              get: function () {
	                return nodebackForPromise(this.promise);
	              }
	            };
	            es5.defineProperty(PromiseResolver.prototype, "asCallback", prop);
	            es5.defineProperty(PromiseResolver.prototype, "callback", prop);
	          }

	          PromiseResolver._nodebackForPromise = nodebackForPromise;

	          PromiseResolver.prototype.toString = function () {
	            return "[object PromiseResolver]";
	          };

	          PromiseResolver.prototype.resolve = PromiseResolver.prototype.fulfill = function (value) {
	            if (!(this instanceof PromiseResolver)) {
	              throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.");
	            }

	            var promise = this.promise;
	            if (promise._tryFollow(value)) {
	              return;
	            }
	            async.invoke(promise._fulfill, promise, value);
	          };

	          PromiseResolver.prototype.reject = function (reason) {
	            if (!(this instanceof PromiseResolver)) {
	              throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.");
	            }

	            var promise = this.promise;
	            errors.markAsOriginatingFromRejection(reason);
	            var trace = errors.canAttachTrace(reason) ? reason : new Error(reason + "");
	            promise._attachExtraTrace(trace);
	            async.invoke(promise._reject, promise, reason);
	            if (trace !== reason) {
	              async.invoke(this._setCarriedStackTrace, this, trace);
	            }
	          };

	          PromiseResolver.prototype.progress = function (value) {
	            if (!(this instanceof PromiseResolver)) {
	              throw new TypeError("Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.");
	            }
	            async.invoke(this.promise._progress, this.promise, value);
	          };

	          PromiseResolver.prototype.cancel = function () {
	            async.invoke(this.promise.cancel, this.promise, undefined);
	          };

	          PromiseResolver.prototype.timeout = function () {
	            this.reject(new TimeoutError("timeout"));
	          };

	          PromiseResolver.prototype.isResolved = function () {
	            return this.promise.isResolved();
	          };

	          PromiseResolver.prototype.toJSON = function () {
	            return this.promise.toJSON();
	          };

	          PromiseResolver.prototype._setCarriedStackTrace = function (trace) {
	            if (this.promise.isRejected()) {
	              this.promise._setCarriedStackTrace(trace);
	            }
	          };

	          module.exports = PromiseResolver;


	          /***/
	        },
	        /* 35 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise) {
	            var apiRejection = function (msg) {
	              var error = new TypeError(msg);
	              var ret = Promise.rejected(error);
	              var parent = ret._peekContext();
	              if (parent != null) {
	                parent._attachExtraTrace(error);
	              }
	              return ret;
	            };

	            var TypeError = __webpack_require__(29).TypeError;

	            return apiRejection;
	          };


	          /***/
	        },
	        /* 36 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, NEXT_FILTER, cast) {
	            var returnThis = function () {
	              return this;
	            };

	            var throwThis = function () {
	              throw this;
	            };

	            var return$ = function (r) {
	              return function Promise$_returner() {
	                return r;
	              };
	            };

	            var throw$ = function (r) {
	              return function Promise$_thrower() {
	                throw r;
	              };
	            };

	            var promisedFinally = function (ret, reasonOrValue, isFulfilled) {
	              var then;
	              if (wrapsPrimitiveReceiver && isPrimitive(reasonOrValue)) {
	                then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
	              } else {
	                then = isFulfilled ? returnThis : throwThis;
	              }
	              return ret._then(then, thrower, undefined, reasonOrValue, undefined);
	            };

	            var finallyHandler = function (reasonOrValue) {
	              var promise = this.promise;
	              var handler = this.handler;

	              var ret = promise._isBound() ? handler.call(promise._boundTo) : handler();

	              if (ret !== undefined) {
	                var maybePromise = cast(ret, undefined);
	                if (maybePromise instanceof Promise) {
	                  return promisedFinally(maybePromise, reasonOrValue, promise.isFulfilled());
	                }
	              }

	              if (promise.isRejected()) {
	                NEXT_FILTER.e = reasonOrValue;
	                return NEXT_FILTER;
	              } else {
	                return reasonOrValue;
	              }
	            };

	            var tapHandler = function (value) {
	              var promise = this.promise;
	              var handler = this.handler;

	              var ret = promise._isBound() ? handler.call(promise._boundTo, value) : handler(value);

	              if (ret !== undefined) {
	                var maybePromise = cast(ret, undefined);
	                if (maybePromise instanceof Promise) {
	                  return promisedFinally(maybePromise, value, true);
	                }
	              }
	              return value;
	            };

	            var util = __webpack_require__(27);
	            var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;
	            var isPrimitive = util.isPrimitive;
	            var thrower = util.thrower;

	            Promise.prototype._passThroughHandler = function (handler, isFinally) {
	              if (typeof handler !== "function") return this.then();

	              var promiseAndHandler = {
	                promise: this,
	                handler: handler
	              };

	              return this._then(isFinally ? finallyHandler : tapHandler, isFinally ? finallyHandler : undefined, undefined, promiseAndHandler, undefined);
	            };

	            Promise.prototype.lastly = Promise.prototype["finally"] = function (handler) {
	              return this._passThroughHandler(handler, true);
	            };

	            Promise.prototype.tap = function (handler) {
	              return this._passThroughHandler(handler, false);
	            };
	          };


	          /***/
	        },
	        /* 37 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var util = __webpack_require__(27);
	          var isPrimitive = util.isPrimitive;
	          var wrapsPrimitiveReceiver = util.wrapsPrimitiveReceiver;

	          module.exports = function (Promise) {
	            var returner = function () {
	              return this;
	            };
	            var thrower = function () {
	              throw this;
	            };

	            var wrapper = function (value, action) {
	              if (action === 1) {
	                return function Promise$_thrower() {
	                  throw value;
	                };
	              } else if (action === 2) {
	                return function Promise$_returner() {
	                  return value;
	                };
	              }
	            };


	            Promise.prototype["return"] = Promise.prototype.thenReturn = function (value) {
	              if (wrapsPrimitiveReceiver && isPrimitive(value)) {
	                return this._then(wrapper(value, 2), undefined, undefined, undefined, undefined);
	              }
	              return this._then(returner, undefined, undefined, value, undefined);
	            };

	            Promise.prototype["throw"] = Promise.prototype.thenThrow = function (reason) {
	              if (wrapsPrimitiveReceiver && isPrimitive(reason)) {
	                return this._then(wrapper(reason, 1), undefined, undefined, undefined, undefined);
	              }
	              return this._then(thrower, undefined, undefined, reason, undefined);
	            };
	          };


	          /***/
	        },
	        /* 38 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise) {
	            var PromiseInspection = function (promise) {
	              if (promise !== undefined) {
	                this._bitField = promise._bitField;
	                this._settledValue = promise.isResolved() ? promise._settledValue : undefined;
	              } else {
	                this._bitField = 0;
	                this._settledValue = undefined;
	              }
	            };

	            PromiseInspection.prototype.isFulfilled = Promise.prototype.isFulfilled = function () {
	              return (this._bitField & 268435456) > 0;
	            };

	            PromiseInspection.prototype.isRejected = Promise.prototype.isRejected = function () {
	              return (this._bitField & 134217728) > 0;
	            };

	            PromiseInspection.prototype.isPending = Promise.prototype.isPending = function () {
	              return (this._bitField & 402653184) === 0;
	            };

	            PromiseInspection.prototype.value = Promise.prototype.value = function () {
	              if (!this.isFulfilled()) {
	                throw new TypeError("cannot get fulfillment value of a non-fulfilled promise");
	              }
	              return this._settledValue;
	            };

	            PromiseInspection.prototype.error = PromiseInspection.prototype.reason = Promise.prototype.reason = function () {
	              if (!this.isRejected()) {
	                throw new TypeError("cannot get rejection reason of a non-rejected promise");
	              }
	              return this._settledValue;
	            };

	            PromiseInspection.prototype.isResolved = Promise.prototype.isResolved = function () {
	              return (this._bitField & 402653184) > 0;
	            };

	            Promise.PromiseInspection = PromiseInspection;
	          };


	          /***/
	        },
	        /* 39 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, PromiseArray, cast, INTERNAL) {
	            var reject = function (reason) {
	              this._reject(reason);
	            };

	            var util = __webpack_require__(27);
	            var canEvaluate = util.canEvaluate;
	            var tryCatch1 = util.tryCatch1;
	            var errorObj = util.errorObj;


	            if (canEvaluate) {
	              var thenCallback = function (i) {
	                return new Function("value", "holder", "                             \n\t            'use strict';                                                    \n\t            holder.pIndex = value;                                           \n\t            holder.checkFulfillment(this);                                   \n\t            ".replace(/Index/g, i));
	              };

	              var caller = function (count) {
	                var values = [];
	                for (var i = 1; i <= count; ++i) values.push("holder.p" + i);
	                return new Function("holder", "                                      \n\t            'use strict';                                                    \n\t            var callback = holder.fn;                                        \n\t            return callback(values);                                         \n\t            ".replace(/values/g, values.join(", ")));
	              };
	              var thenCallbacks = [];
	              var callers = [undefined];
	              for (var i = 1; i <= 5; ++i) {
	                thenCallbacks.push(thenCallback(i));
	                callers.push(caller(i));
	              }

	              var Holder = function (total, fn) {
	                this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
	                this.fn = fn;
	                this.total = total;
	                this.now = 0;
	              };

	              Holder.prototype.callers = callers;
	              Holder.prototype.checkFulfillment = function (promise) {
	                var now = this.now;
	                now++;
	                var total = this.total;
	                if (now >= total) {
	                  var handler = this.callers[total];
	                  var ret = tryCatch1(handler, undefined, this);
	                  if (ret === errorObj) {
	                    promise._rejectUnchecked(ret.e);
	                  } else if (!promise._tryFollow(ret)) {
	                    promise._fulfillUnchecked(ret);
	                  }
	                } else {
	                  this.now = now;
	                }
	              };
	            }

	            Promise.join = function () {
	              var last = arguments.length - 1;
	              var fn;
	              if (last > 0 && typeof arguments[last] === "function") {
	                fn = arguments[last];
	                if (last < 6 && canEvaluate) {
	                  var ret = new Promise(INTERNAL);
	                  ret._setTrace(undefined);
	                  var holder = new Holder(last, fn);
	                  var callbacks = thenCallbacks;
	                  for (var i = 0; i < last; ++i) {
	                    var maybePromise = cast(arguments[i], undefined);
	                    if (maybePromise instanceof Promise) {
	                      if (maybePromise.isPending()) {
	                        maybePromise._then(callbacks[i], reject, undefined, ret, holder);
	                      } else if (maybePromise.isFulfilled()) {
	                        callbacks[i].call(ret, maybePromise._settledValue, holder);
	                      } else {
	                        ret._reject(maybePromise._settledValue);
	                        maybePromise._unsetRejectionIsUnhandled();
	                      }
	                    } else {
	                      callbacks[i].call(ret, maybePromise, holder);
	                    }
	                  }
	                  return ret;
	                }
	              }
	              var $_len = arguments.length;var args = new Array($_len);for (var $_i = 0; $_i < $_len; ++$_i) {
	                args[$_i] = arguments[$_i];
	              }
	              var ret = new PromiseArray(args).promise();
	              return fn !== undefined ? ret.spread(fn) : ret;
	            };
	          };


	          /***/
	        },
	        /* 40 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var _setTimeout = function (fn, ms) {
	            var len = arguments.length;
	            var arg0 = arguments[2];
	            var arg1 = arguments[3];
	            var arg2 = len >= 5 ? arguments[4] : undefined;
	            return setTimeout(function () {
	              fn(arg0, arg1, arg2);
	            }, ms | 0);
	          };

	          module.exports = function (Promise, INTERNAL, cast) {
	            var successClear = function (value) {
	              var handle = this;
	              if (handle instanceof Number) handle = +handle;
	              clearTimeout(handle);
	              return value;
	            };

	            var failureClear = function (reason) {
	              var handle = this;
	              if (handle instanceof Number) handle = +handle;
	              clearTimeout(handle);
	              throw reason;
	            };

	            var util = __webpack_require__(27);
	            var errors = __webpack_require__(29);
	            var apiRejection = __webpack_require__(35)(Promise);
	            var TimeoutError = Promise.TimeoutError;

	            var afterTimeout = function (promise, message, ms) {
	              if (!promise.isPending()) return;
	              if (typeof message !== "string") {
	                message = "operation timed out after" + " " + ms + " ms";
	              }
	              var err = new TimeoutError(message);
	              errors.markAsOriginatingFromRejection(err);
	              promise._attachExtraTrace(err);
	              promise._cancel(err);
	            };

	            var afterDelay = function (value, promise) {
	              promise._fulfill(value);
	            };

	            var delay = Promise.delay = function (value, ms) {
	              if (ms === undefined) {
	                ms = value;
	                value = undefined;
	              }
	              ms = +ms;
	              var maybePromise = cast(value, undefined);
	              var promise = new Promise(INTERNAL);

	              if (maybePromise instanceof Promise) {
	                promise._propagateFrom(maybePromise, 7);
	                promise._follow(maybePromise);
	                return promise.then(function (value) {
	                  return Promise.delay(value, ms);
	                });
	              } else {
	                promise._setTrace(undefined);
	                _setTimeout(afterDelay, ms, value, promise);
	              }
	              return promise;
	            };

	            Promise.prototype.delay = function (ms) {
	              return delay(this, ms);
	            };

	            Promise.prototype.timeout = function (ms, message) {
	              ms = +ms;

	              var ret = new Promise(INTERNAL);
	              ret._propagateFrom(this, 7);
	              ret._follow(this);
	              var handle = _setTimeout(afterTimeout, ms, ret, message, ms);
	              return ret.cancellable()._then(successClear, failureClear, undefined, handle, undefined);
	            };
	          };


	          /***/
	        },
	        /* 41 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, INTERNAL, cast) {
	            var Promise$_Race = function (promises, parent) {
	              var maybePromise = cast(promises, undefined);

	              if (maybePromise instanceof Promise) {
	                return raceLater(maybePromise);
	              } else if (!isArray(promises)) {
	                return apiRejection("expecting an array, a promise or a thenable");
	              }

	              var ret = new Promise(INTERNAL);
	              if (parent !== undefined) {
	                ret._propagateFrom(parent, 7);
	              } else {
	                ret._setTrace(undefined);
	              }
	              var fulfill = ret._fulfill;
	              var reject = ret._reject;
	              for (var i = 0, len = promises.length; i < len; ++i) {
	                var val = promises[i];

	                if (val === undefined && !hasOwn.call(promises, i)) {
	                  continue;
	                }

	                Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
	              }
	              return ret;
	            };

	            var apiRejection = __webpack_require__(35)(Promise);
	            var isArray = __webpack_require__(27).isArray;

	            var raceLater = function (promise) {
	              return promise.then(function (array) {
	                return Promise$_Race(array, promise);
	              });
	            };

	            var hasOwn = ({}).hasOwnProperty;


	            Promise.race = function (promises) {
	              return Promise$_Race(promises, undefined);
	            };

	            Promise.prototype.race = function () {
	              return Promise$_Race(this, undefined);
	            };
	          };


	          /***/
	        },
	        /* 42 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var cr = Object.create;
	          if (cr) {
	            var callerCache = cr(null);
	            var getterCache = cr(null);
	            callerCache[" size"] = getterCache[" size"] = 0;
	          }

	          module.exports = function (Promise) {
	            var makeMethodCaller = function (methodName) {
	              return new Function("obj", "                                             \n\t        'use strict'                                                         \n\t        var len = this.length;                                               \n\t        switch(len) {                                                        \n\t            case 1: return obj.methodName(this[0]);                          \n\t            case 2: return obj.methodName(this[0], this[1]);                 \n\t            case 3: return obj.methodName(this[0], this[1], this[2]);        \n\t            case 0: return obj.methodName();                                 \n\t            default: return obj.methodName.apply(obj, this);                 \n\t        }                                                                    \n\t        ".replace(/methodName/g, methodName));
	            };

	            var makeGetter = function (propertyName) {
	              return new Function("obj", "                                             \n\t        'use strict';                                                        \n\t        return obj.propertyName;                                             \n\t        ".replace("propertyName", propertyName));
	            };

	            var getCompiled = function (name, compiler, cache) {
	              var ret = cache[name];
	              if (typeof ret !== "function") {
	                if (!isIdentifier(name)) {
	                  return null;
	                }
	                ret = compiler(name);
	                cache[name] = ret;
	                cache[" size"]++;
	                if (cache[" size"] > 512) {
	                  var keys = Object.keys(cache);
	                  for (var i = 0; i < 256; ++i) delete cache[keys[i]];
	                  cache[" size"] = keys.length - 256;
	                }
	              }
	              return ret;
	            };

	            var getMethodCaller = function (name) {
	              return getCompiled(name, makeMethodCaller, callerCache);
	            };

	            var getGetter = function (name) {
	              return getCompiled(name, makeGetter, getterCache);
	            };

	            var caller = function (obj) {
	              return obj[this.pop()].apply(obj, this);
	            };

	            var namedGetter = function (obj) {
	              return obj[this];
	            };

	            var indexedGetter = function (obj) {
	              return obj[this];
	            };

	            var util = __webpack_require__(27);
	            var canEvaluate = util.canEvaluate;
	            var isIdentifier = util.isIdentifier;

	            Promise.prototype.call = function (methodName) {
	              var $_len = arguments.length;var args = new Array($_len - 1);for (var $_i = 1; $_i < $_len; ++$_i) {
	                args[$_i - 1] = arguments[$_i];
	              }
	              if (canEvaluate) {
	                var maybeCaller = getMethodCaller(methodName);
	                if (maybeCaller !== null) {
	                  return this._then(maybeCaller, undefined, undefined, args, undefined);
	                }
	              }
	              args.push(methodName);
	              return this._then(caller, undefined, undefined, args, undefined);
	            };

	            Promise.prototype.get = function (propertyName) {
	              var isIndex = typeof propertyName === "number";
	              var getter;
	              if (!isIndex) {
	                if (canEvaluate) {
	                  var maybeGetter = getGetter(propertyName);
	                  getter = maybeGetter !== null ? maybeGetter : namedGetter;
	                } else {
	                  getter = namedGetter;
	                }
	              } else {
	                getter = indexedGetter;
	              }
	              return this._then(getter, undefined, undefined, propertyName, undefined);
	            };
	          };


	          /***/
	        },
	        /* 43 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, apiRejection, INTERNAL, cast) {
	            var promiseFromYieldHandler = function (value, yieldHandlers) {
	              var _errorObj = errorObj;
	              var _Promise = Promise;
	              var len = yieldHandlers.length;
	              for (var i = 0; i < len; ++i) {
	                var result = tryCatch1(yieldHandlers[i], undefined, value);
	                if (result === _errorObj) {
	                  return _Promise.reject(_errorObj.e);
	                }
	                var maybePromise = cast(result, promiseFromYieldHandler);
	                if (maybePromise instanceof _Promise) return maybePromise;
	              }
	              return null;
	            };

	            var PromiseSpawn = function (generatorFunction, receiver, yieldHandler) {
	              var promise = this._promise = new Promise(INTERNAL);
	              promise._setTrace(undefined);
	              this._generatorFunction = generatorFunction;
	              this._receiver = receiver;
	              this._generator = undefined;
	              this._yieldHandlers = typeof yieldHandler === "function" ? [yieldHandler].concat(yieldHandlers) : yieldHandlers;
	            };

	            var errors = __webpack_require__(29);
	            var TypeError = errors.TypeError;
	            var deprecated = __webpack_require__(27).deprecated;
	            var util = __webpack_require__(27);
	            var errorObj = util.errorObj;
	            var tryCatch1 = util.tryCatch1;
	            var yieldHandlers = [];

	            PromiseSpawn.prototype.promise = function () {
	              return this._promise;
	            };

	            PromiseSpawn.prototype._run = function () {
	              this._generator = this._generatorFunction.call(this._receiver);
	              this._receiver = this._generatorFunction = undefined;
	              this._next(undefined);
	            };

	            PromiseSpawn.prototype._continue = function (result) {
	              if (result === errorObj) {
	                this._generator = undefined;
	                var trace = errors.canAttachTrace(result.e) ? result.e : new Error(result.e + "");
	                this._promise._attachExtraTrace(trace);
	                this._promise._reject(result.e, trace);
	                return;
	              }

	              var value = result.value;
	              if (result.done === true) {
	                this._generator = undefined;
	                if (!this._promise._tryFollow(value)) {
	                  this._promise._fulfill(value);
	                }
	              } else {
	                var maybePromise = cast(value, undefined);
	                if (!(maybePromise instanceof Promise)) {
	                  maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers);
	                  if (maybePromise === null) {
	                    this._throw(new TypeError("A value was yielded that could not be treated as a promise"));
	                    return;
	                  }
	                }
	                maybePromise._then(this._next, this._throw, undefined, this, null);
	              }
	            };

	            PromiseSpawn.prototype._throw = function (reason) {
	              if (errors.canAttachTrace(reason)) this._promise._attachExtraTrace(reason);
	              this._continue(tryCatch1(this._generator["throw"], this._generator, reason));
	            };

	            PromiseSpawn.prototype._next = function (value) {
	              this._continue(tryCatch1(this._generator.next, this._generator, value));
	            };

	            Promise.coroutine = function (generatorFunction, options) {
	              if (typeof generatorFunction !== "function") {
	                throw new TypeError("generatorFunction must be a function");
	              }
	              var yieldHandler = Object(options).yieldHandler;
	              var PromiseSpawn$ = PromiseSpawn;
	              return function () {
	                var generator = generatorFunction.apply(this, arguments);
	                var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler);
	                spawn._generator = generator;
	                spawn._next(undefined);
	                return spawn.promise();
	              };
	            };

	            Promise.coroutine.addYieldHandler = function (fn) {
	              if (typeof fn !== "function") throw new TypeError("fn must be a function");
	              yieldHandlers.push(fn);
	            };

	            Promise.spawn = function (generatorFunction) {
	              deprecated("Promise.spawn is deprecated. Use Promise.coroutine instead.");
	              if (typeof generatorFunction !== "function") {
	                return apiRejection("generatorFunction must be a function");
	              }
	              var spawn = new PromiseSpawn(generatorFunction, this);
	              var ret = spawn.promise();
	              spawn._run(Promise.spawn);
	              return ret;
	            };
	          };


	          /***/
	        },
	        /* 44 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, PromiseArray, apiRejection, cast, INTERNAL) {
	            var MappingPromiseArray = function (promises, fn, limit, _filter) {
	              this.constructor$(promises);
	              this._callback = fn;
	              this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
	              this._limit = limit;
	              this._inFlight = 0;
	              this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
	              this._init$(undefined, -2);
	            };

	            var map = function (promises, fn, options, _filter) {
	              var limit = typeof options === "object" && options !== null ? options.concurrency : 0;
	              limit = typeof limit === "number" && isFinite(limit) && limit >= 1 ? limit : 0;
	              return new MappingPromiseArray(promises, fn, limit, _filter);
	            };

	            var util = __webpack_require__(27);
	            var tryCatch3 = util.tryCatch3;
	            var errorObj = util.errorObj;
	            var PENDING = {};
	            var EMPTY_ARRAY = [];

	            util.inherits(MappingPromiseArray, PromiseArray);

	            MappingPromiseArray.prototype._init = function () {};

	            MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
	              var values = this._values;
	              if (values === null) return;

	              var length = this.length();
	              var preservedValues = this._preservedValues;
	              var limit = this._limit;
	              if (values[index] === PENDING) {
	                values[index] = value;
	                if (limit >= 1) {
	                  this._inFlight--;
	                  this._drainQueue();
	                  if (this._isResolved()) return;
	                }
	              } else {
	                if (limit >= 1 && this._inFlight >= limit) {
	                  values[index] = value;
	                  this._queue.push(index);
	                  return;
	                }
	                if (preservedValues !== null) preservedValues[index] = value;

	                var callback = this._callback;
	                var receiver = this._promise._boundTo;
	                var ret = tryCatch3(callback, receiver, value, index, length);
	                if (ret === errorObj) return this._reject(ret.e);

	                var maybePromise = cast(ret, undefined);
	                if (maybePromise instanceof Promise) {
	                  if (maybePromise.isPending()) {
	                    if (limit >= 1) this._inFlight++;
	                    values[index] = PENDING;
	                    return maybePromise._proxyPromiseArray(this, index);
	                  } else if (maybePromise.isFulfilled()) {
	                    ret = maybePromise._settledValue;
	                  } else {
	                    maybePromise._unsetRejectionIsUnhandled();
	                    return this._reject(maybePromise._settledValue);
	                  }
	                }
	                values[index] = ret;
	              }
	              var totalResolved = ++this._totalResolved;
	              if (totalResolved >= length) {
	                if (preservedValues !== null) {
	                  this._filter(values, preservedValues);
	                } else {
	                  this._resolve(values);
	                }
	              }
	            };

	            MappingPromiseArray.prototype._drainQueue = function () {
	              var queue = this._queue;
	              var limit = this._limit;
	              var values = this._values;
	              while (queue.length > 0 && this._inFlight < limit) {
	                var index = queue.pop();
	                this._promiseFulfilled(values[index], index);
	              }
	            };

	            MappingPromiseArray.prototype._filter = function (booleans, values) {
	              var len = values.length;
	              var ret = new Array(len);
	              var j = 0;
	              for (var i = 0; i < len; ++i) {
	                if (booleans[i]) ret[j++] = values[i];
	              }
	              ret.length = j;
	              this._resolve(ret);
	            };

	            MappingPromiseArray.prototype.preservedValues = function () {
	              return this._preservedValues;
	            };

	            Promise.prototype.map = function (fn, options) {
	              if (typeof fn !== "function") return apiRejection("fn must be a function");

	              return map(this, fn, options, null).promise();
	            };

	            Promise.map = function (promises, fn, options, _filter) {
	              if (typeof fn !== "function") return apiRejection("fn must be a function");
	              return map(promises, fn, options, _filter).promise();
	            };
	          };


	          /***/
	        },
	        /* 45 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise) {
	            var thrower = function (r) {
	              throw r;
	            };

	            var Promise$_spreadAdapter = function (val, receiver) {
	              if (!util.isArray(val)) return Promise$_successAdapter(val, receiver);
	              var ret = util.tryCatchApply(this, [null].concat(val), receiver);
	              if (ret === errorObj) {
	                async.invokeLater(thrower, undefined, ret.e);
	              }
	            };

	            var Promise$_successAdapter = function (val, receiver) {
	              var nodeback = this;
	              var ret = val === undefined ? tryCatch1(nodeback, receiver, null) : tryCatch2(nodeback, receiver, null, val);
	              if (ret === errorObj) {
	                async.invokeLater(thrower, undefined, ret.e);
	              }
	            };

	            var Promise$_errorAdapter = function (reason, receiver) {
	              var nodeback = this;
	              var ret = tryCatch1(nodeback, receiver, reason);
	              if (ret === errorObj) {
	                async.invokeLater(thrower, undefined, ret.e);
	              }
	            };

	            var util = __webpack_require__(27);
	            var async = __webpack_require__(28);
	            var tryCatch2 = util.tryCatch2;
	            var tryCatch1 = util.tryCatch1;
	            var errorObj = util.errorObj;

	            Promise.prototype.nodeify = function (nodeback, options) {
	              if (typeof nodeback == "function") {
	                var adapter = Promise$_successAdapter;
	                if (options !== undefined && Object(options).spread) {
	                  adapter = Promise$_spreadAdapter;
	                }
	                this._then(adapter, Promise$_errorAdapter, undefined, nodeback, this._boundTo);
	              }
	              return this;
	            };
	          };


	          /***/
	        },
	        /* 46 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, INTERNAL) {
	            var escapeIdentRegex = function (str) {
	              return str.replace(/([$])/, "\\$");
	            };

	            var isPromisified = function (fn) {
	              try {
	                return fn.__isPromisified__ === true;
	              } catch (e) {
	                return false;
	              }
	            };

	            var hasPromisified = function (obj, key, suffix) {
	              var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
	              return val ? isPromisified(val) : false;
	            };

	            var checkValid = function (ret, suffix, suffixRegexp) {
	              for (var i = 0; i < ret.length; i += 2) {
	                var key = ret[i];
	                if (suffixRegexp.test(key)) {
	                  var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
	                  for (var j = 0; j < ret.length; j += 2) {
	                    if (ret[j] === keyWithoutAsyncSuffix) {
	                      throw new TypeError("Cannot promisify an API " + "that has normal methods with '" + suffix + "'-suffix");
	                    }
	                  }
	                }
	              }
	            };

	            var promisifiableMethods = function (obj, suffix, suffixRegexp, filter) {
	              var keys = util.inheritedDataKeys(obj);
	              var ret = [];
	              for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                var value = obj[key];
	                if (typeof value === "function" && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj)) {
	                  ret.push(key, value);
	                }
	              }
	              checkValid(ret, suffix, suffixRegexp);
	              return ret;
	            };

	            var switchCaseArgumentOrder = function (likelyArgumentCount) {
	              var ret = [likelyArgumentCount];
	              var min = Math.max(0, likelyArgumentCount - 1 - 5);
	              for (var i = likelyArgumentCount - 1; i >= min; --i) {
	                if (i === likelyArgumentCount) continue;
	                ret.push(i);
	              }
	              for (var i = likelyArgumentCount + 1; i <= 5; ++i) {
	                ret.push(i);
	              }
	              return ret;
	            };

	            var argumentSequence = function (argumentCount) {
	              return util.filledRange(argumentCount, "arguments[", "]");
	            };

	            var parameterDeclaration = function (parameterCount) {
	              return util.filledRange(parameterCount, "_arg", "");
	            };

	            var parameterCount = function (fn) {
	              if (typeof fn.length === "number") {
	                return Math.max(Math.min(fn.length, 1023 + 1), 0);
	              }
	              return 0;
	            };

	            var generatePropertyAccess = function (key) {
	              if (util.isIdentifier(key)) {
	                return "." + key;
	              } else return "['" + key.replace(/(['\\])/g, "\\$1") + "']";
	            };

	            var makeNodePromisifiedEval = function (callback, receiver, originalName, fn, suffix) {
	              var generateCallForArgumentCount = function (count) {
	                var args = argumentSequence(count).join(", ");
	                var comma = count > 0 ? ", " : "";
	                var ret;
	                if (typeof callback === "string") {
	                  ret = "                                                          \n\t                this.method({{args}}, fn);                                   \n\t                break;                                                       \n\t            ".replace(".method", generatePropertyAccess(callback));
	                } else if (receiver === THIS) {
	                  ret = "                                                         \n\t                callback.call(this, {{args}}, fn);                           \n\t                break;                                                       \n\t            ";
	                } else if (receiver !== undefined) {
	                  ret = "                                                         \n\t                callback.call(receiver, {{args}}, fn);                       \n\t                break;                                                       \n\t            ";
	                } else {
	                  ret = "                                                         \n\t                callback({{args}}, fn);                                      \n\t                break;                                                       \n\t            ";
	                }
	                return ret.replace("{{args}}", args).replace(", ", comma);
	              };

	              var generateArgumentSwitchCase = function () {
	                var ret = "";
	                for (var i = 0; i < argumentOrder.length; ++i) {
	                  ret += "case " + argumentOrder[i] + ":" + generateCallForArgumentCount(argumentOrder[i]);
	                }
	                var codeForCall;
	                if (typeof callback === "string") {
	                  codeForCall = "                                                  \n\t                this.property.apply(this, args);                             \n\t            ".replace(".property", generatePropertyAccess(callback));
	                } else if (receiver === THIS) {
	                  codeForCall = "                                                  \n\t                callback.apply(this, args);                                  \n\t            ";
	                } else {
	                  codeForCall = "                                                  \n\t                callback.apply(receiver, args);                              \n\t            ";
	                }

	                ret += "                                                             \n\t        default:                                                             \n\t            var args = new Array(len + 1);                                   \n\t            var i = 0;                                                       \n\t            for (var i = 0; i < len; ++i) {                                  \n\t               args[i] = arguments[i];                                       \n\t            }                                                                \n\t            args[i] = fn;                                                    \n\t            [CodeForCall]                                                    \n\t            break;                                                           \n\t        ".replace("[CodeForCall]", codeForCall);
	                return ret;
	              };

	              var newParameterCount = Math.max(0, parameterCount(fn) - 1);
	              var argumentOrder = switchCaseArgumentOrder(newParameterCount);
	              var callbackName = typeof originalName === "string" && util.isIdentifier(originalName) ? originalName + suffix : "promisified";

	              return new Function("Promise", "callback", "receiver", "withAppended", "maybeWrapAsError", "nodebackForPromise", "INTERNAL", "                                         \n\t        var ret = function (Parameters) {                        \n\t            'use strict';                                                    \n\t            var len = arguments.length;                                      \n\t            var promise = new Promise(INTERNAL);                             \n\t            promise._setTrace(undefined);                                    \n\t            var fn = nodebackForPromise(promise);                            \n\t            try {                                                            \n\t                switch(len) {                                                \n\t                    [CodeForSwitchCase]                                      \n\t                }                                                            \n\t            } catch (e) {                                                    \n\t                var wrapped = maybeWrapAsError(e);                           \n\t                promise._attachExtraTrace(wrapped);                          \n\t                promise._reject(wrapped);                                    \n\t            }                                                                \n\t            return promise;                                                  \n\t        };                                                                   \n\t        ret.__isPromisified__ = true;                                        \n\t        return ret;                                                          \n\t        ".replace("FunctionName", callbackName).replace("Parameters", parameterDeclaration(newParameterCount)).replace("[CodeForSwitchCase]", generateArgumentSwitchCase()))(Promise, callback, receiver, withAppended, maybeWrapAsError, nodebackForPromise, INTERNAL);
	            };

	            var makeNodePromisifiedClosure = function (callback, receiver) {
	              var promisified = function () {
	                var _receiver = receiver;
	                if (receiver === THIS) _receiver = this;
	                if (typeof callback === "string") {
	                  callback = _receiver[callback];
	                }
	                var promise = new Promise(INTERNAL);
	                promise._setTrace(undefined);
	                var fn = nodebackForPromise(promise);
	                try {
	                  callback.apply(_receiver, withAppended(arguments, fn));
	                } catch (e) {
	                  var wrapped = maybeWrapAsError(e);
	                  promise._attachExtraTrace(wrapped);
	                  promise._reject(wrapped);
	                }
	                return promise;
	              };

	              promisified.__isPromisified__ = true;
	              return promisified;
	            };

	            var promisifyAll = function (obj, suffix, filter, promisifier) {
	              var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
	              var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);

	              for (var i = 0, len = methods.length; i < len; i += 2) {
	                var key = methods[i];
	                var fn = methods[i + 1];
	                var promisifiedKey = key + suffix;
	                obj[promisifiedKey] = promisifier === makeNodePromisified ? makeNodePromisified(key, THIS, key, fn, suffix) : promisifier(fn);
	              }
	              util.toFastProperties(obj);
	              return obj;
	            };

	            var promisify = function (callback, receiver) {
	              return makeNodePromisified(callback, receiver, undefined, callback);
	            };

	            var THIS = {};
	            var util = __webpack_require__(27);
	            var nodebackForPromise = __webpack_require__(34)._nodebackForPromise;
	            var withAppended = util.withAppended;
	            var maybeWrapAsError = util.maybeWrapAsError;
	            var canEvaluate = util.canEvaluate;
	            var TypeError = __webpack_require__(29).TypeError;
	            var defaultSuffix = "Async";
	            var defaultFilter = function (name, func) {
	              return util.isIdentifier(name) && name.charAt(0) !== "_" && !util.isClass(func);
	            };
	            var defaultPromisified = { __isPromisified__: true };


	            var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;

	            Promise.promisify = function (fn, receiver) {
	              if (typeof fn !== "function") {
	                throw new TypeError("fn must be a function");
	              }
	              if (isPromisified(fn)) {
	                return fn;
	              }
	              return promisify(fn, arguments.length < 2 ? THIS : receiver);
	            };

	            Promise.promisifyAll = function (target, options) {
	              if (typeof target !== "function" && typeof target !== "object") {
	                throw new TypeError("the target of promisifyAll must be an object or a function");
	              }
	              options = Object(options);
	              var suffix = options.suffix;
	              if (typeof suffix !== "string") suffix = defaultSuffix;
	              var filter = options.filter;
	              if (typeof filter !== "function") filter = defaultFilter;
	              var promisifier = options.promisifier;
	              if (typeof promisifier !== "function") promisifier = makeNodePromisified;

	              if (!util.isIdentifier(suffix)) {
	                throw new RangeError("suffix must be a valid identifier");
	              }

	              var keys = util.inheritedDataKeys(target, { includeHidden: true });
	              for (var i = 0; i < keys.length; ++i) {
	                var value = target[keys[i]];
	                if (keys[i] !== "constructor" && util.isClass(value)) {
	                  promisifyAll(value.prototype, suffix, filter, promisifier);
	                  promisifyAll(value, suffix, filter, promisifier);
	                }
	              }

	              return promisifyAll(target, suffix, filter, promisifier);
	            };
	          };



	          /***/
	        },
	        /* 47 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, PromiseArray, cast) {
	            var PropertiesPromiseArray = function (obj) {
	              var keys = es5.keys(obj);
	              var len = keys.length;
	              var values = new Array(len * 2);
	              for (var i = 0; i < len; ++i) {
	                var key = keys[i];
	                values[i] = obj[key];
	                values[i + len] = key;
	              }
	              this.constructor$(values);
	            };

	            var Promise$_Props = function (promises) {
	              var ret;
	              var castValue = cast(promises, undefined);

	              if (!isObject(castValue)) {
	                return apiRejection("cannot await properties of a non-object");
	              } else if (castValue instanceof Promise) {
	                ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined);
	              } else {
	                ret = new PropertiesPromiseArray(castValue).promise();
	              }

	              if (castValue instanceof Promise) {
	                ret._propagateFrom(castValue, 4);
	              }
	              return ret;
	            };

	            var util = __webpack_require__(27);
	            var apiRejection = __webpack_require__(35)(Promise);
	            var isObject = util.isObject;
	            var es5 = __webpack_require__(69);

	            util.inherits(PropertiesPromiseArray, PromiseArray);

	            PropertiesPromiseArray.prototype._init = function () {
	              this._init$(undefined, -3);
	            };

	            PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
	              if (this._isResolved()) return;
	              this._values[index] = value;
	              var totalResolved = ++this._totalResolved;
	              if (totalResolved >= this._length) {
	                var val = {};
	                var keyOffset = this.length();
	                for (var i = 0, len = this.length(); i < len; ++i) {
	                  val[this._values[i + keyOffset]] = this._values[i];
	                }
	                this._resolve(val);
	              }
	            };

	            PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
	              if (this._isResolved()) return;

	              this._promise._progress({
	                key: this._values[index + this.length()],
	                value: value
	              });
	            };

	            PropertiesPromiseArray.prototype.shouldCopyValues = function () {
	              return false;
	            };

	            PropertiesPromiseArray.prototype.getActualLength = function (len) {
	              return len >> 1;
	            };

	            Promise.prototype.props = function () {
	              return Promise$_Props(this);
	            };

	            Promise.props = function (promises) {
	              return Promise$_Props(promises);
	            };
	          };


	          /***/
	        },
	        /* 48 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, PromiseArray, apiRejection, cast, INTERNAL) {
	            var ReductionPromiseArray = function (promises, fn, accum, _each) {
	              this.constructor$(promises);
	              this._preservedValues = _each === INTERNAL ? [] : null;
	              this._zerothIsAccum = accum === undefined;
	              this._gotAccum = false;
	              this._reducingIndex = this._zerothIsAccum ? 1 : 0;
	              this._valuesPhase = undefined;

	              var maybePromise = cast(accum, undefined);
	              var rejected = false;
	              var isPromise = maybePromise instanceof Promise;
	              if (isPromise) {
	                if (maybePromise.isPending()) {
	                  maybePromise._proxyPromiseArray(this, -1);
	                } else if (maybePromise.isFulfilled()) {
	                  accum = maybePromise._settledValue;
	                  this._gotAccum = true;
	                } else {
	                  maybePromise._unsetRejectionIsUnhandled();
	                  this._reject(maybePromise.reason());
	                  rejected = true;
	                }
	              }
	              if (!(isPromise || this._zerothIsAccum)) this._gotAccum = true;
	              this._callback = fn;
	              this._accum = accum;
	              if (!rejected) this._init$(undefined, -5);
	            };

	            var reduce = function (promises, fn, initialValue, _each) {
	              if (typeof fn !== "function") return apiRejection("fn must be a function");
	              var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
	              return array.promise();
	            };

	            var util = __webpack_require__(27);
	            var tryCatch4 = util.tryCatch4;
	            var tryCatch3 = util.tryCatch3;
	            var errorObj = util.errorObj;
	            util.inherits(ReductionPromiseArray, PromiseArray);

	            ReductionPromiseArray.prototype._init = function () {};

	            ReductionPromiseArray.prototype._resolveEmptyArray = function () {
	              if (this._gotAccum || this._zerothIsAccum) {
	                this._resolve(this._preservedValues !== null ? [] : this._accum);
	              }
	            };

	            ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
	              var values = this._values;
	              if (values === null) return;
	              values[index] = value;
	              var length = this.length();
	              var preservedValues = this._preservedValues;
	              var isEach = preservedValues !== null;
	              var gotAccum = this._gotAccum;
	              var valuesPhase = this._valuesPhase;
	              var valuesPhaseIndex;
	              if (!valuesPhase) {
	                valuesPhase = this._valuesPhase = Array(length);
	                for (valuesPhaseIndex = 0; valuesPhaseIndex < length; ++valuesPhaseIndex) {
	                  valuesPhase[valuesPhaseIndex] = 0;
	                }
	              }
	              valuesPhaseIndex = valuesPhase[index];

	              if (index === 0 && this._zerothIsAccum) {
	                if (!gotAccum) {
	                  this._accum = value;
	                  this._gotAccum = gotAccum = true;
	                }
	                valuesPhase[index] = valuesPhaseIndex === 0 ? 1 : 2;
	              } else if (index === -1) {
	                if (!gotAccum) {
	                  this._accum = value;
	                  this._gotAccum = gotAccum = true;
	                }
	              } else {
	                if (valuesPhaseIndex === 0) {
	                  valuesPhase[index] = 1;
	                } else {
	                  valuesPhase[index] = 2;
	                  if (gotAccum) {
	                    this._accum = value;
	                  }
	                }
	              }
	              if (!gotAccum) return;

	              var callback = this._callback;
	              var receiver = this._promise._boundTo;
	              var ret;

	              for (var i = this._reducingIndex; i < length; ++i) {
	                valuesPhaseIndex = valuesPhase[i];
	                if (valuesPhaseIndex === 2) {
	                  this._reducingIndex = i + 1;
	                  continue;
	                }
	                if (valuesPhaseIndex !== 1) return;
	                value = values[i];
	                if (value instanceof Promise) {
	                  if (value.isFulfilled()) {
	                    value = value._settledValue;
	                  } else if (value.isPending()) {
	                    return;
	                  } else {
	                    value._unsetRejectionIsUnhandled();
	                    return this._reject(value.reason());
	                  }
	                }

	                if (isEach) {
	                  preservedValues.push(value);
	                  ret = tryCatch3(callback, receiver, value, i, length);
	                } else {
	                  ret = tryCatch4(callback, receiver, this._accum, value, i, length);
	                }

	                if (ret === errorObj) return this._reject(ret.e);

	                var maybePromise = cast(ret, undefined);
	                if (maybePromise instanceof Promise) {
	                  if (maybePromise.isPending()) {
	                    valuesPhase[i] = 4;
	                    return maybePromise._proxyPromiseArray(this, i);
	                  } else if (maybePromise.isFulfilled()) {
	                    ret = maybePromise._settledValue;
	                  } else {
	                    maybePromise._unsetRejectionIsUnhandled();
	                    return this._reject(maybePromise._settledValue);
	                  }
	                }

	                this._reducingIndex = i + 1;
	                this._accum = ret;
	              }

	              if (this._reducingIndex < length) return;
	              this._resolve(isEach ? preservedValues : this._accum);
	            };

	            Promise.prototype.reduce = function (fn, initialValue) {
	              return reduce(this, fn, initialValue, null);
	            };

	            Promise.reduce = function (promises, fn, initialValue, _each) {
	              return reduce(promises, fn, initialValue, _each);
	            };
	          };


	          /***/
	        },
	        /* 49 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, PromiseArray) {
	            var SettledPromiseArray = function (values) {
	              this.constructor$(values);
	            };

	            var PromiseInspection = Promise.PromiseInspection;
	            var util = __webpack_require__(27);

	            util.inherits(SettledPromiseArray, PromiseArray);

	            SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
	              this._values[index] = inspection;
	              var totalResolved = ++this._totalResolved;
	              if (totalResolved >= this._length) {
	                this._resolve(this._values);
	              }
	            };

	            SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
	              if (this._isResolved()) return;
	              var ret = new PromiseInspection();
	              ret._bitField = 268435456;
	              ret._settledValue = value;
	              this._promiseResolved(index, ret);
	            };
	            SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
	              if (this._isResolved()) return;
	              var ret = new PromiseInspection();
	              ret._bitField = 134217728;
	              ret._settledValue = reason;
	              this._promiseResolved(index, ret);
	            };

	            Promise.settle = function (promises) {
	              return new SettledPromiseArray(promises).promise();
	            };

	            Promise.prototype.settle = function () {
	              return new SettledPromiseArray(this).promise();
	            };
	          };


	          /***/
	        },
	        /* 50 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, PromiseArray, apiRejection) {
	            var SomePromiseArray = function (values) {
	              this.constructor$(values);
	              this._howMany = 0;
	              this._unwrap = false;
	              this._initialized = false;
	            };

	            var Promise$_Some = function (promises, howMany) {
	              if ((howMany | 0) !== howMany || howMany < 0) {
	                return apiRejection("expecting a positive integer");
	              }
	              var ret = new SomePromiseArray(promises);
	              var promise = ret.promise();
	              if (promise.isRejected()) {
	                return promise;
	              }
	              ret.setHowMany(howMany);
	              ret.init();
	              return promise;
	            };

	            var util = __webpack_require__(27);
	            var RangeError = __webpack_require__(29).RangeError;
	            var AggregateError = __webpack_require__(29).AggregateError;
	            var isArray = util.isArray;


	            util.inherits(SomePromiseArray, PromiseArray);

	            SomePromiseArray.prototype._init = function () {
	              if (!this._initialized) {
	                return;
	              }
	              if (this._howMany === 0) {
	                this._resolve([]);
	                return;
	              }
	              this._init$(undefined, -5);
	              var isArrayResolved = isArray(this._values);
	              if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
	                this._reject(this._getRangeError(this.length()));
	              }
	            };

	            SomePromiseArray.prototype.init = function () {
	              this._initialized = true;
	              this._init();
	            };

	            SomePromiseArray.prototype.setUnwrap = function () {
	              this._unwrap = true;
	            };

	            SomePromiseArray.prototype.howMany = function () {
	              return this._howMany;
	            };

	            SomePromiseArray.prototype.setHowMany = function (count) {
	              if (this._isResolved()) return;
	              this._howMany = count;
	            };

	            SomePromiseArray.prototype._promiseFulfilled = function (value) {
	              if (this._isResolved()) return;
	              this._addFulfilled(value);
	              if (this._fulfilled() === this.howMany()) {
	                this._values.length = this.howMany();
	                if (this.howMany() === 1 && this._unwrap) {
	                  this._resolve(this._values[0]);
	                } else {
	                  this._resolve(this._values);
	                }
	              }
	            };
	            SomePromiseArray.prototype._promiseRejected = function (reason) {
	              if (this._isResolved()) return;
	              this._addRejected(reason);
	              if (this.howMany() > this._canPossiblyFulfill()) {
	                var e = new AggregateError();
	                for (var i = this.length(); i < this._values.length; ++i) {
	                  e.push(this._values[i]);
	                }
	                this._reject(e);
	              }
	            };

	            SomePromiseArray.prototype._fulfilled = function () {
	              return this._totalResolved;
	            };

	            SomePromiseArray.prototype._rejected = function () {
	              return this._values.length - this.length();
	            };

	            SomePromiseArray.prototype._addRejected = function (reason) {
	              this._values.push(reason);
	            };

	            SomePromiseArray.prototype._addFulfilled = function (value) {
	              this._values[this._totalResolved++] = value;
	            };

	            SomePromiseArray.prototype._canPossiblyFulfill = function () {
	              return this.length() - this._rejected();
	            };

	            SomePromiseArray.prototype._getRangeError = function (count) {
	              var message = "Input array must contain at least " + this._howMany + " items but contains only " + count + " items";
	              return new RangeError(message);
	            };

	            SomePromiseArray.prototype._resolveEmptyArray = function () {
	              this._reject(this._getRangeError(0));
	            };

	            Promise.some = function (promises, howMany) {
	              return Promise$_Some(promises, howMany);
	            };

	            Promise.prototype.some = function (howMany) {
	              return Promise$_Some(this, howMany);
	            };

	            Promise._SomePromiseArray = SomePromiseArray;
	          };


	          /***/
	        },
	        /* 51 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, PromiseArray) {
	            var util = __webpack_require__(27);
	            var async = __webpack_require__(28);
	            var errors = __webpack_require__(29);
	            var tryCatch1 = util.tryCatch1;
	            var errorObj = util.errorObj;

	            Promise.prototype.progressed = function (handler) {
	              return this._then(undefined, undefined, handler, undefined, undefined);
	            };

	            Promise.prototype._progress = function (progressValue) {
	              if (this._isFollowingOrFulfilledOrRejected()) return;
	              this._progressUnchecked(progressValue);
	            };

	            Promise.prototype._progressHandlerAt = function (index) {
	              return index === 0 ? this._progressHandler0 : this[(index << 2) + index - 5 + 2];
	            };

	            Promise.prototype._doProgressWith = function (progression) {
	              var progressValue = progression.value;
	              var handler = progression.handler;
	              var promise = progression.promise;
	              var receiver = progression.receiver;

	              var ret = tryCatch1(handler, receiver, progressValue);
	              if (ret === errorObj) {
	                if (ret.e != null && ret.e.name !== "StopProgressPropagation") {
	                  var trace = errors.canAttachTrace(ret.e) ? ret.e : new Error(ret.e + "");
	                  promise._attachExtraTrace(trace);
	                  promise._progress(ret.e);
	                }
	              } else if (ret instanceof Promise) {
	                ret._then(promise._progress, null, null, promise, undefined);
	              } else {
	                promise._progress(ret);
	              }
	            };


	            Promise.prototype._progressUnchecked = function (progressValue) {
	              if (!this.isPending()) return;
	              var len = this._length();
	              var progress = this._progress;
	              for (var i = 0; i < len; i++) {
	                var handler = this._progressHandlerAt(i);
	                var promise = this._promiseAt(i);
	                if (!(promise instanceof Promise)) {
	                  var receiver = this._receiverAt(i);
	                  if (typeof handler === "function") {
	                    handler.call(receiver, progressValue, promise);
	                  } else if (receiver instanceof Promise && receiver._isProxied()) {
	                    receiver._progressUnchecked(progressValue);
	                  } else if (receiver instanceof PromiseArray) {
	                    receiver._promiseProgressed(progressValue, promise);
	                  }
	                  continue;
	                }

	                if (typeof handler === "function") {
	                  async.invoke(this._doProgressWith, this, {
	                    handler: handler,
	                    promise: promise,
	                    receiver: this._receiverAt(i),
	                    value: progressValue
	                  });
	                } else {
	                  async.invoke(progress, promise, progressValue);
	                }
	              }
	            };
	          };


	          /***/
	        },
	        /* 52 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, INTERNAL) {
	            var errors = __webpack_require__(29);
	            var canAttachTrace = errors.canAttachTrace;
	            var async = __webpack_require__(28);
	            var CancellationError = errors.CancellationError;

	            Promise.prototype._cancel = function (reason) {
	              if (!this.isCancellable()) return this;
	              var parent;
	              var promiseToReject = this;
	              while ((parent = promiseToReject._cancellationParent) !== undefined && parent.isCancellable()) {
	                promiseToReject = parent;
	              }
	              this._unsetCancellable();
	              promiseToReject._attachExtraTrace(reason);
	              promiseToReject._rejectUnchecked(reason);
	            };

	            Promise.prototype.cancel = function (reason) {
	              if (!this.isCancellable()) return this;
	              reason = reason !== undefined ? canAttachTrace(reason) ? reason : new Error(reason + "") : new CancellationError();
	              async.invokeLater(this._cancel, this, reason);
	              return this;
	            };

	            Promise.prototype.cancellable = function () {
	              if (this._cancellable()) return this;
	              this._setCancellable();
	              this._cancellationParent = undefined;
	              return this;
	            };

	            Promise.prototype.uncancellable = function () {
	              var ret = new Promise(INTERNAL);
	              ret._propagateFrom(this, 2 | 4);
	              ret._follow(this);
	              ret._unsetCancellable();
	              return ret;
	            };

	            Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
	              var ret = this._then(didFulfill, didReject, didProgress, undefined, undefined);

	              ret._setCancellable();
	              ret._cancellationParent = undefined;
	              return ret;
	            };
	          };


	          /***/
	        },
	        /* 53 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, INTERNAL) {
	            var PromiseMap = Promise.map;

	            Promise.prototype.filter = function (fn, options) {
	              return PromiseMap(this, fn, options, INTERNAL);
	            };

	            Promise.filter = function (promises, fn, options) {
	              return PromiseMap(promises, fn, options, INTERNAL);
	            };
	          };


	          /***/
	        },
	        /* 54 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise) {
	            var Promise$_Any = function (promises) {
	              var ret = new SomePromiseArray(promises);
	              var promise = ret.promise();
	              if (promise.isRejected()) {
	                return promise;
	              }
	              ret.setHowMany(1);
	              ret.setUnwrap();
	              ret.init();
	              return promise;
	            };

	            var SomePromiseArray = Promise._SomePromiseArray;


	            Promise.any = function (promises) {
	              return Promise$_Any(promises);
	            };

	            Promise.prototype.any = function () {
	              return Promise$_Any(this);
	            };
	          };


	          /***/
	        },
	        /* 55 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, INTERNAL) {
	            var PromiseReduce = Promise.reduce;

	            Promise.prototype.each = function (fn) {
	              return PromiseReduce(this, fn, null, INTERNAL);
	            };

	            Promise.each = function (promises, fn) {
	              return PromiseReduce(promises, fn, null, INTERNAL);
	            };
	          };


	          /***/
	        },
	        /* 56 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          module.exports = function (Promise, apiRejection, cast) {
	            var inspectionMapper = function (inspections) {
	              var len = inspections.length;
	              for (var i = 0; i < len; ++i) {
	                var inspection = inspections[i];
	                if (inspection.isRejected()) {
	                  return Promise.reject(inspection.error());
	                }
	                inspections[i] = inspection._settledValue;
	              }
	              return inspections;
	            };

	            var thrower = function (e) {
	              setTimeout(function () {
	                throw e;
	              }, 0);
	            };

	            var castPreservingDisposable = function (thenable) {
	              var maybePromise = cast(thenable, undefined);
	              if (maybePromise !== thenable && typeof thenable._isDisposable === "function" && typeof thenable._getDisposer === "function" && thenable._isDisposable()) {
	                maybePromise._setDisposable(thenable._getDisposer());
	              }
	              return maybePromise;
	            };

	            var dispose = function (resources, inspection) {
	              var iterator = function () {
	                if (i >= len) return ret.resolve();
	                var maybePromise = castPreservingDisposable(resources[i++]);
	                if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
	                  try {
	                    maybePromise = cast(maybePromise._getDisposer().tryDispose(inspection), undefined);
	                  } catch (e) {
	                    return thrower(e);
	                  }
	                  if (maybePromise instanceof Promise) {
	                    return maybePromise._then(iterator, thrower, null, null, null);
	                  }
	                }
	                iterator();
	              };

	              var i = 0;
	              var len = resources.length;
	              var ret = Promise.defer();
	              iterator();
	              return ret.promise;
	            };

	            var disposerSuccess = function (value) {
	              var inspection = new PromiseInspection();
	              inspection._settledValue = value;
	              inspection._bitField = 268435456;
	              return dispose(this, inspection).thenReturn(value);
	            };

	            var disposerFail = function (reason) {
	              var inspection = new PromiseInspection();
	              inspection._settledValue = reason;
	              inspection._bitField = 134217728;
	              return dispose(this, inspection).thenThrow(reason);
	            };

	            var Disposer = function (data, promise) {
	              this._data = data;
	              this._promise = promise;
	            };

	            var FunctionDisposer = function (fn, promise) {
	              this.constructor$(fn, promise);
	            };

	            var TypeError = __webpack_require__(29).TypeError;
	            var inherits = __webpack_require__(27).inherits;
	            var PromiseInspection = Promise.PromiseInspection;

	            Disposer.prototype.data = function () {
	              return this._data;
	            };

	            Disposer.prototype.promise = function () {
	              return this._promise;
	            };

	            Disposer.prototype.resource = function () {
	              if (this.promise().isFulfilled()) {
	                return this.promise()._settledValue;
	              }
	              return null;
	            };

	            Disposer.prototype.tryDispose = function (inspection) {
	              var resource = this.resource();
	              var ret = resource !== null ? this.doDispose(resource, inspection) : null;
	              this._promise._unsetDisposable();
	              this._data = this._promise = null;
	              return ret;
	            };

	            Disposer.isDisposer = function (d) {
	              return d != null && typeof d.resource === "function" && typeof d.tryDispose === "function";
	            };

	            inherits(FunctionDisposer, Disposer);

	            FunctionDisposer.prototype.doDispose = function (resource, inspection) {
	              var fn = this.data();
	              return fn.call(resource, resource, inspection);
	            };

	            Promise.using = function () {
	              var len = arguments.length;
	              if (len < 2) return apiRejection("you must pass at least 2 arguments to Promise.using");
	              var fn = arguments[len - 1];
	              if (typeof fn !== "function") return apiRejection("fn must be a function");
	              len--;
	              var resources = new Array(len);
	              for (var i = 0; i < len; ++i) {
	                var resource = arguments[i];
	                if (Disposer.isDisposer(resource)) {
	                  var disposer = resource;
	                  resource = resource.promise();
	                  resource._setDisposable(disposer);
	                }
	                resources[i] = resource;
	              }

	              return Promise.settle(resources).then(inspectionMapper).spread(fn)._then(disposerSuccess, disposerFail, undefined, resources, undefined);
	            };

	            Promise.prototype._setDisposable = function (disposer) {
	              this._bitField = this._bitField | 262144;
	              this._disposer = disposer;
	            };

	            Promise.prototype._isDisposable = function () {
	              return (this._bitField & 262144) > 0;
	            };

	            Promise.prototype._getDisposer = function () {
	              return this._disposer;
	            };

	            Promise.prototype._unsetDisposable = function () {
	              this._bitField = this._bitField & ~262144;
	              this._disposer = undefined;
	            };

	            Promise.prototype.disposer = function (fn) {
	              if (typeof fn === "function") {
	                return new FunctionDisposer(fn, this);
	              }
	              throw new TypeError();
	            };
	          };


	          /***/
	        },
	        /* 57 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(72)


	          /***/;
	        },
	        /* 58 */
	        /***/function (module, exports, __webpack_require__) {


	          /**
	           * Module dependencies.
	           */

	          var qs = __webpack_require__(21);

	          module.exports = function (res, fn) {
	            res.text = "";
	            res.setEncoding("ascii");
	            res.on("data", function (chunk) {
	              res.text += chunk;
	            });
	            res.on("end", function () {
	              try {
	                fn(null, qs.parse(res.text));
	              } catch (err) {
	                fn(err);
	              }
	            });
	          };

	          /***/
	        },
	        /* 59 */
	        /***/function (module, exports, __webpack_require__) {


	          module.exports = function (res, fn) {
	            res.text = "";
	            res.setEncoding("utf8");
	            res.on("data", function (chunk) {
	              res.text += chunk;
	            });
	            res.on("end", function () {
	              try {
	                var text = res.text && res.text.replace(/^\s*|\s*$/g, "");
	                var body = text && JSON.parse(text);
	              } catch (e) {
	                var err = e;
	              } finally {
	                fn(err, body);
	              }
	            });
	          };


	          /***/
	        },
	        /* 60 */
	        /***/function (module, exports, __webpack_require__) {


	          module.exports = function (res, fn) {
	            res.text = "";
	            res.setEncoding("utf8");
	            res.on("data", function (chunk) {
	              res.text += chunk;
	            });
	            res.on("end", fn);
	          };

	          /***/
	        },
	        /* 61 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = function (res, fn) {
	            var data = []; // Binary data needs binary storage

	            res.on("data", function (chunk) {
	              data.push(chunk);
	            });
	            res.on("end", function () {
	              fn(null, Buffer.concat(data));
	            });
	          };

	          /***/
	        },
	        /* 62 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(7);

	          /***/
	        },
	        /* 63 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(!(function webpackMissingModule() {
	            var e = new Error("Cannot find module \"net\"");e.code = "MODULE_NOT_FOUND";throw e;
	          })());

	          /***/
	        },
	        /* 64 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(8);

	          /***/
	        },
	        /* 65 */
	        /***/function (module, exports, __webpack_require__) {
	          // Load modules

	          var Stringify = __webpack_require__(74);
	          var Parse = __webpack_require__(75);


	          // Declare internals

	          var internals = {};


	          module.exports = {
	            stringify: Stringify,
	            parse: Parse
	          };


	          /***/
	        },
	        /* 66 */
	        /***/function (module, exports, __webpack_require__) {
	          /* jshint node: true */
	          (function () {
	            "use strict";

	            var CookieAccessInfo = function (domain, path, secure, script) {
	              if (this instanceof CookieAccessInfo) {
	                this.domain = domain || undefined;
	                this.path = path || "/";
	                this.secure = !!secure;
	                this.script = !!script;
	                return this;
	              }
	              return new CookieAccessInfo(domain, path, secure, script);
	            };

	            var Cookie = function (cookiestr, request_domain, request_path) {
	              if (cookiestr instanceof Cookie) {
	                return cookiestr;
	              }
	              if (this instanceof Cookie) {
	                this.name = null;
	                this.value = null;
	                this.expiration_date = Infinity;
	                this.path = String(request_path || "/");
	                this.explicit_path = false;
	                this.domain = request_domain || null;
	                this.explicit_domain = false;
	                this.secure = false; //how to define default?
	                this.noscript = false; //httponly
	                if (cookiestr) {
	                  this.parse(cookiestr, request_domain, request_path);
	                }
	                return this;
	              }
	              return new Cookie(cookiestr);
	            };

	            var CookieJar = function () {
	              var cookies, cookies_list, collidable_cookie;
	              if (this instanceof CookieJar) {
	                cookies = Object.create(null); //name: [Cookie]

	                this.setCookie = function setCookie(cookie, request_domain, request_path) {
	                  var remove, i;
	                  cookie = new Cookie(cookie, request_domain, request_path);
	                  //Delete the cookie if the set is past the current time
	                  remove = cookie.expiration_date <= Date.now();
	                  if (cookies[cookie.name] !== undefined) {
	                    cookies_list = cookies[cookie.name];
	                    for (i = 0; i < cookies_list.length; i += 1) {
	                      collidable_cookie = cookies_list[i];
	                      if (collidable_cookie.collidesWith(cookie)) {
	                        if (remove) {
	                          cookies_list.splice(i, 1);
	                          if (cookies_list.length === 0) {
	                            delete cookies[cookie.name];
	                          }
	                          return false;
	                        }
	                        cookies_list[i] = cookie;
	                        return cookie;
	                      }
	                    }
	                    if (remove) {
	                      return false;
	                    }
	                    cookies_list.push(cookie);
	                    return cookie;
	                  }
	                  if (remove) {
	                    return false;
	                  }
	                  cookies[cookie.name] = [cookie];
	                  return cookies[cookie.name];
	                };
	                //returns a cookie
	                this.getCookie = function getCookie(cookie_name, access_info) {
	                  var cookie, i;
	                  cookies_list = cookies[cookie_name];
	                  if (!cookies_list) {
	                    return;
	                  }
	                  for (i = 0; i < cookies_list.length; i += 1) {
	                    cookie = cookies_list[i];
	                    if (cookie.expiration_date <= Date.now()) {
	                      if (cookies_list.length === 0) {
	                        delete cookies[cookie.name];
	                      }
	                      continue;
	                    }
	                    if (cookie.matches(access_info)) {
	                      return cookie;
	                    }
	                  }
	                };
	                //returns a list of cookies
	                this.getCookies = function getCookies(access_info) {
	                  var matches = [],
	                      cookie_name,
	                      cookie;
	                  for (cookie_name in cookies) {
	                    cookie = this.getCookie(cookie_name, access_info);
	                    if (cookie) {
	                      matches.push(cookie);
	                    }
	                  }
	                  matches.toString = function toString() {
	                    return matches.join(":");
	                  };
	                  matches.toValueString = function toValueString() {
	                    return matches.map(function (c) {
	                      return c.toValueString();
	                    }).join(";");
	                  };
	                  return matches;
	                };

	                return this;
	              }
	              return new CookieJar();
	            };

	            exports.CookieAccessInfo = CookieAccessInfo;

	            exports.Cookie = Cookie;

	            Cookie.prototype.toString = function toString() {
	              var str = [this.name + "=" + this.value];
	              if (this.expiration_date !== Infinity) {
	                str.push("expires=" + new Date(this.expiration_date).toGMTString());
	              }
	              if (this.domain) {
	                str.push("domain=" + this.domain);
	              }
	              if (this.path) {
	                str.push("path=" + this.path);
	              }
	              if (this.secure) {
	                str.push("secure");
	              }
	              if (this.noscript) {
	                str.push("httponly");
	              }
	              return str.join("; ");
	            };

	            Cookie.prototype.toValueString = function toValueString() {
	              return this.name + "=" + this.value;
	            };

	            var cookie_str_splitter = /[:](?=\s*[a-zA-Z0-9_\-]+\s*[=])/g;
	            Cookie.prototype.parse = function parse(str, request_domain, request_path) {
	              if (this instanceof Cookie) {
	                var parts = str.split(";").filter(function (value) {
	                  return !!value;
	                }),
	                    pair = parts[0].match(/([^=]+)=([\s\S]*)/),
	                    key = pair[1],
	                    value = pair[2],
	                    i;
	                this.name = key;
	                this.value = value;

	                for (i = 1; i < parts.length; i += 1) {
	                  pair = parts[i].match(/([^=]+)(?:=([\s\S]*))?/);
	                  key = pair[1].trim().toLowerCase();
	                  value = pair[2];
	                  switch (key) {
	                    case "httponly":
	                      this.noscript = true;
	                      break;
	                    case "expires":
	                      this.expiration_date = value ? Number(Date.parse(value)) : Infinity;
	                      break;
	                    case "path":
	                      this.path = value ? value.trim() : "";
	                      this.explicit_path = true;
	                      break;
	                    case "domain":
	                      this.domain = value ? value.trim() : "";
	                      this.explicit_domain = !!this.domain;
	                      break;
	                    case "secure":
	                      this.secure = true;
	                      break;
	                  }
	                }

	                if (!this.explicit_path) {
	                  this.path = request_path || "/";
	                }
	                if (!this.explicit_domain) {
	                  this.domain = request_domain;
	                }

	                return this;
	              }
	              return new Cookie().parse(str, request_domain, request_path);
	            };

	            Cookie.prototype.matches = function matches(access_info) {
	              if (this.noscript && access_info.script || this.secure && !access_info.secure || !this.collidesWith(access_info)) {
	                return false;
	              }
	              return true;
	            };

	            Cookie.prototype.collidesWith = function collidesWith(access_info) {
	              if (this.path && !access_info.path || this.domain && !access_info.domain) {
	                return false;
	              }
	              if (this.path && access_info.path.indexOf(this.path) !== 0) {
	                return false;
	              }
	              if (!this.explicit_path) {
	                if (this.path !== access_info.path) {
	                  return false;
	                }
	              }
	              var access_domain = access_info.domain && access_info.domain.replace(/^[\.]/, "");
	              var cookie_domain = this.domain && this.domain.replace(/^[\.]/, "");
	              if (cookie_domain === access_domain) {
	                return true;
	              }
	              if (cookie_domain) {
	                if (!this.explicit_domain) {
	                  return false; // we already checked if the domains were exactly the same
	                }
	                var wildcard = access_domain.indexOf(cookie_domain);
	                if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {
	                  return false;
	                }
	                return true;
	              }
	              return true;
	            };

	            exports.CookieJar = CookieJar;

	            //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.
	            CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {
	              cookies = Array.isArray(cookies) ? cookies : cookies.split(cookie_str_splitter);
	              var successful = [],
	                  i,
	                  cookie;
	              cookies = cookies.map(Cookie);
	              for (i = 0; i < cookies.length; i += 1) {
	                cookie = cookies[i];
	                if (this.setCookie(cookie, request_domain, request_path)) {
	                  successful.push(cookie);
	                }
	              }
	              return successful;
	            };
	          })();


	          /***/
	        },
	        /* 67 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * Select a color.
	           *
	           * @return {Number}
	           * @api private
	           */

	          var selectColor = function () {
	            return exports.colors[prevColor++ % exports.colors.length];
	          };

	          /**
	           * Create a debugger with the given `namespace`.
	           *
	           * @param {String} namespace
	           * @return {Function}
	           * @api public
	           */

	          var debug = function (namespace) {
	            // define the `disabled` version
	            var disabled = function () {};

	            // define the `enabled` version
	            var enabled = function () {
	              var self = enabled;

	              // set `diff` timestamp
	              var curr = +new Date();
	              var ms = curr - (prevTime || curr);
	              self.diff = ms;
	              self.prev = prevTime;
	              self.curr = curr;
	              prevTime = curr;

	              // add the `color` if not set
	              if (null == self.useColors) self.useColors = exports.useColors();
	              if (null == self.color && self.useColors) self.color = selectColor();

	              var args = Array.prototype.slice.call(arguments);

	              args[0] = exports.coerce(args[0]);

	              if ("string" !== typeof args[0]) {
	                // anything else let's inspect with %o
	                args = ["%o"].concat(args);
	              }

	              // apply any `formatters` transformations
	              var index = 0;
	              args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
	                // if we encounter an escaped % then don't increase the array index
	                if (match === "%%") return match;
	                index++;
	                var formatter = exports.formatters[format];
	                if ("function" === typeof formatter) {
	                  var val = args[index];
	                  match = formatter.call(self, val);

	                  // now we need to remove `args[index]` since it's inlined in the `format`
	                  args.splice(index, 1);
	                  index--;
	                }
	                return match;
	              });

	              if ("function" === typeof exports.formatArgs) {
	                args = exports.formatArgs.apply(self, args);
	              }
	              var logFn = enabled.log || exports.log || console.log.bind(console);
	              logFn.apply(self, args);
	            };

	            disabled.enabled = false;
	            enabled.enabled = true;

	            var fn = exports.enabled(namespace) ? enabled : disabled;

	            fn.namespace = namespace;

	            return fn;
	          };

	          /**
	           * Enables a debug mode by namespaces. This can include modes
	           * separated by a colon and wildcards.
	           *
	           * @param {String} namespaces
	           * @api public
	           */

	          var enable = function (namespaces) {
	            exports.save(namespaces);

	            var split = (namespaces || "").split(/[\s,]+/);
	            var len = split.length;

	            for (var i = 0; i < len; i++) {
	              if (!split[i]) continue; // ignore empty strings
	              namespaces = split[i].replace(/\*/g, ".*?");
	              if (namespaces[0] === "-") {
	                exports.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
	              } else {
	                exports.names.push(new RegExp("^" + namespaces + "$"));
	              }
	            }
	          };

	          /**
	           * Disable debug output.
	           *
	           * @api public
	           */

	          var disable = function () {
	            exports.enable("");
	          };

	          /**
	           * Returns true if the given mode name is enabled, false otherwise.
	           *
	           * @param {String} name
	           * @return {Boolean}
	           * @api public
	           */

	          var enabled = function (name) {
	            var i, len;
	            for (i = 0, len = exports.skips.length; i < len; i++) {
	              if (exports.skips[i].test(name)) {
	                return false;
	              }
	            }
	            for (i = 0, len = exports.names.length; i < len; i++) {
	              if (exports.names[i].test(name)) {
	                return true;
	              }
	            }
	            return false;
	          };

	          /**
	           * Coerce `val`.
	           *
	           * @param {Mixed} val
	           * @return {Mixed}
	           * @api private
	           */

	          var coerce = function (val) {
	            if (val instanceof Error) return val.stack || val.message;
	            return val;
	          }


	          /***/;




	          /**
	           * This is the common logic for both the Node.js and web browser
	           * implementations of `debug()`.
	           *
	           * Expose `debug()` as the module.
	           */

	          exports = module.exports = debug;
	          exports.coerce = coerce;
	          exports.disable = disable;
	          exports.enable = enable;
	          exports.enabled = enabled;
	          exports.humanize = __webpack_require__(84);

	          /**
	           * The currently active debug mode names, and names to skip.
	           */

	          exports.names = [];
	          exports.skips = [];

	          /**
	           * Map of special "%n" handling functions, for the debug "format" argument.
	           *
	           * Valid key names are a single, lowercased letter, i.e. "n".
	           */

	          exports.formatters = {};

	          /**
	           * Previously assigned color.
	           */

	          var prevColor = 0;

	          /**
	           * Previous log timestamp.
	           */

	          var prevTime;
	        },
	        /* 68 */
	        /***/function (module, exports, __webpack_require__) {
	          var IncomingForm = function (opts) {
	            if (!(this instanceof IncomingForm)) return new IncomingForm(opts);
	            EventEmitter.call(this);

	            opts = opts || {};

	            this.error = null;
	            this.ended = false;

	            this.maxFields = opts.maxFields || 1000;
	            this.maxFieldsSize = opts.maxFieldsSize || 2 * 1024 * 1024;
	            this.keepExtensions = opts.keepExtensions || false;
	            this.uploadDir = opts.uploadDir || os.tmpDir();
	            this.encoding = opts.encoding || "utf-8";
	            this.headers = null;
	            this.type = null;
	            this.hash = false;

	            this.bytesReceived = null;
	            this.bytesExpected = null;

	            this._parser = null;
	            this._flushing = 0;
	            this._fieldsSize = 0;
	            this.openedFiles = [];

	            return this;
	          };

	          var dummyParser = function (self) {
	            return {
	              end: function () {
	                self.ended = true;
	                self._maybeEnd();
	                return null;
	              }
	            };
	          };

	          var require;if (global.GENTLY) require = GENTLY.hijack(__webpack_require__(73));

	          var fs = require("fs");
	          var util = require("util"),
	              path = require("path"),
	              File = require("./file"),
	              MultipartParser = require("./multipart_parser").MultipartParser,
	              QuerystringParser = require("./querystring_parser").QuerystringParser,
	              OctetParser = require("./octet_parser").OctetParser,
	              JSONParser = require("./json_parser").JSONParser,
	              StringDecoder = require("string_decoder").StringDecoder,
	              EventEmitter = require("events").EventEmitter,
	              Stream = require("stream").Stream,
	              os = require("os");

	          ;
	          util.inherits(IncomingForm, EventEmitter);
	          exports.IncomingForm = IncomingForm;

	          IncomingForm.prototype.parse = function (req, cb) {
	            this.pause = function () {
	              try {
	                req.pause();
	              } catch (err) {
	                // the stream was destroyed
	                if (!this.ended) {
	                  // before it was completed, crash & burn
	                  this._error(err);
	                }
	                return false;
	              }
	              return true;
	            };

	            this.resume = function () {
	              try {
	                req.resume();
	              } catch (err) {
	                // the stream was destroyed
	                if (!this.ended) {
	                  // before it was completed, crash & burn
	                  this._error(err);
	                }
	                return false;
	              }

	              return true;
	            };

	            // Setup callback first, so we don't miss anything from data events emitted
	            // immediately.
	            if (cb) {
	              var fields = {},
	                  files = {};
	              this.on("field", function (name, value) {
	                fields[name] = value;
	              }).on("file", function (name, file) {
	                files[name] = file;
	              }).on("error", function (err) {
	                cb(err, fields, files);
	              }).on("end", function () {
	                cb(null, fields, files);
	              });
	            }

	            // Parse headers and setup the parser, ready to start listening for data.
	            this.writeHeaders(req.headers);

	            // Start listening for data.
	            var self = this;
	            req.on("error", function (err) {
	              self._error(err);
	            }).on("aborted", function () {
	              self.emit("aborted");
	              self._error(new Error("Request aborted"));
	            }).on("data", function (buffer) {
	              self.write(buffer);
	            }).on("end", function () {
	              if (self.error) {
	                return;
	              }

	              var err = self._parser.end();
	              if (err) {
	                self._error(err);
	              }
	            });

	            return this;
	          };

	          IncomingForm.prototype.writeHeaders = function (headers) {
	            this.headers = headers;
	            this._parseContentLength();
	            this._parseContentType();
	          };

	          IncomingForm.prototype.write = function (buffer) {
	            if (!this._parser) {
	              this._error(new Error("unintialized parser"));
	              return;
	            }

	            this.bytesReceived += buffer.length;
	            this.emit("progress", this.bytesReceived, this.bytesExpected);

	            var bytesParsed = this._parser.write(buffer);
	            if (bytesParsed !== buffer.length) {
	              this._error(new Error("parser error, " + bytesParsed + " of " + buffer.length + " bytes parsed"));
	            }

	            return bytesParsed;
	          };

	          IncomingForm.prototype.pause = function () {
	            // this does nothing, unless overwritten in IncomingForm.parse
	            return false;
	          };

	          IncomingForm.prototype.resume = function () {
	            // this does nothing, unless overwritten in IncomingForm.parse
	            return false;
	          };

	          IncomingForm.prototype.onPart = function (part) {
	            // this method can be overwritten by the user
	            this.handlePart(part);
	          };

	          IncomingForm.prototype.handlePart = function (part) {
	            var self = this;

	            if (part.filename === undefined) {
	              var value = "",
	                  decoder = new StringDecoder(this.encoding);

	              part.on("data", function (buffer) {
	                self._fieldsSize += buffer.length;
	                if (self._fieldsSize > self.maxFieldsSize) {
	                  self._error(new Error("maxFieldsSize exceeded, received " + self._fieldsSize + " bytes of field data"));
	                  return;
	                }
	                value += decoder.write(buffer);
	              });

	              part.on("end", function () {
	                self.emit("field", part.name, value);
	              });
	              return;
	            }

	            this._flushing++;

	            var file = new File({
	              path: this._uploadPath(part.filename),
	              name: part.filename,
	              type: part.mime,
	              hash: self.hash
	            });

	            this.emit("fileBegin", part.name, file);

	            file.open();
	            this.openedFiles.push(file);

	            part.on("data", function (buffer) {
	              self.pause();
	              file.write(buffer, function () {
	                self.resume();
	              });
	            });

	            part.on("end", function () {
	              file.end(function () {
	                self._flushing--;
	                self.emit("file", part.name, file);
	                self._maybeEnd();
	              });
	            });
	          };

	          IncomingForm.prototype._parseContentType = function () {
	            if (this.bytesExpected === 0) {
	              this._parser = dummyParser(this);
	              return;
	            }

	            if (!this.headers["content-type"]) {
	              this._error(new Error("bad content-type header, no content-type"));
	              return;
	            }

	            if (this.headers["content-type"].match(/octet-stream/i)) {
	              this._initOctetStream();
	              return;
	            }

	            if (this.headers["content-type"].match(/urlencoded/i)) {
	              this._initUrlencoded();
	              return;
	            }

	            if (this.headers["content-type"].match(/multipart/i)) {
	              var m;
	              if (m = this.headers["content-type"].match(/boundary=(?:"([^"]+)"|([^;]+))/i)) {
	                this._initMultipart(m[1] || m[2]);
	              } else {
	                this._error(new Error("bad content-type header, no multipart boundary"));
	              }
	              return;
	            }

	            if (this.headers["content-type"].match(/json/i)) {
	              this._initJSONencoded();
	              return;
	            }

	            this._error(new Error("bad content-type header, unknown content-type: " + this.headers["content-type"]));
	          };

	          IncomingForm.prototype._error = function (err) {
	            if (this.error || this.ended) {
	              return;
	            }

	            this.error = err;
	            this.pause();
	            this.emit("error", err);

	            if (Array.isArray(this.openedFiles)) {
	              this.openedFiles.forEach(function (file) {
	                file._writeStream.destroy();
	                setTimeout(fs.unlink, 0, file.path);
	              });
	            }
	          };

	          IncomingForm.prototype._parseContentLength = function () {
	            this.bytesReceived = 0;
	            if (this.headers["content-length"]) {
	              this.bytesExpected = parseInt(this.headers["content-length"], 10);
	            } else if (this.headers["transfer-encoding"] === undefined) {
	              this.bytesExpected = 0;
	            }

	            if (this.bytesExpected !== null) {
	              this.emit("progress", this.bytesReceived, this.bytesExpected);
	            }
	          };

	          IncomingForm.prototype._newParser = function () {
	            return new MultipartParser();
	          };

	          IncomingForm.prototype._initMultipart = function (boundary) {
	            this.type = "multipart";

	            var parser = new MultipartParser(),
	                self = this,
	                headerField,
	                headerValue,
	                part;

	            parser.initWithBoundary(boundary);

	            parser.onPartBegin = function () {
	              part = new Stream();
	              part.readable = true;
	              part.headers = {};
	              part.name = null;
	              part.filename = null;
	              part.mime = null;

	              part.transferEncoding = "binary";
	              part.transferBuffer = "";

	              headerField = "";
	              headerValue = "";
	            };

	            parser.onHeaderField = function (b, start, end) {
	              headerField += b.toString(self.encoding, start, end);
	            };

	            parser.onHeaderValue = function (b, start, end) {
	              headerValue += b.toString(self.encoding, start, end);
	            };

	            parser.onHeaderEnd = function () {
	              headerField = headerField.toLowerCase();
	              part.headers[headerField] = headerValue;

	              var m;
	              if (headerField == "content-disposition") {
	                if (m = headerValue.match(/\bname="([^"]+)"/i)) {
	                  part.name = m[1];
	                }

	                part.filename = self._fileName(headerValue);
	              } else if (headerField == "content-type") {
	                part.mime = headerValue;
	              } else if (headerField == "content-transfer-encoding") {
	                part.transferEncoding = headerValue.toLowerCase();
	              }

	              headerField = "";
	              headerValue = "";
	            };

	            parser.onHeadersEnd = function () {
	              switch (part.transferEncoding) {
	                case "binary":
	                case "7bit":
	                case "8bit":
	                  parser.onPartData = function (b, start, end) {
	                    part.emit("data", b.slice(start, end));
	                  };

	                  parser.onPartEnd = function () {
	                    part.emit("end");
	                  };
	                  break;

	                case "base64":
	                  parser.onPartData = function (b, start, end) {
	                    part.transferBuffer += b.slice(start, end).toString("ascii");

	                    /*
	                    four bytes (chars) in base64 converts to three bytes in binary
	                    encoding. So we should always work with a number of bytes that
	                    can be divided by 4, it will result in a number of buytes that
	                    can be divided vy 3.
	                    */
	                    var offset = parseInt(part.transferBuffer.length / 4) * 4;
	                    part.emit("data", new Buffer(part.transferBuffer.substring(0, offset), "base64"));
	                    part.transferBuffer = part.transferBuffer.substring(offset);
	                  };

	                  parser.onPartEnd = function () {
	                    part.emit("data", new Buffer(part.transferBuffer, "base64"));
	                    part.emit("end");
	                  };
	                  break;

	                default:
	                  return self._error(new Error("unknown transfer-encoding"));
	              }

	              self.onPart(part);
	            };


	            parser.onEnd = function () {
	              self.ended = true;
	              self._maybeEnd();
	            };

	            this._parser = parser;
	          };

	          IncomingForm.prototype._fileName = function (headerValue) {
	            var m = headerValue.match(/\bfilename="(.*?)"($|; )/i);
	            if (!m) return;

	            var filename = m[1].substr(m[1].lastIndexOf("\\") + 1);
	            filename = filename.replace(/%22/g, "\"");
	            filename = filename.replace(/&#([\d]{4});/g, function (m, code) {
	              return String.fromCharCode(code);
	            });
	            return filename;
	          };

	          IncomingForm.prototype._initUrlencoded = function () {
	            this.type = "urlencoded";

	            var parser = new QuerystringParser(this.maxFields),
	                self = this;

	            parser.onField = function (key, val) {
	              self.emit("field", key, val);
	            };

	            parser.onEnd = function () {
	              self.ended = true;
	              self._maybeEnd();
	            };

	            this._parser = parser;
	          };

	          IncomingForm.prototype._initOctetStream = function () {
	            this.type = "octet-stream";
	            var filename = this.headers["x-file-name"];
	            var mime = this.headers["content-type"];

	            var file = new File({
	              path: this._uploadPath(filename),
	              name: filename,
	              type: mime
	            });

	            file.open();

	            this.emit("fileBegin", filename, file);

	            this._flushing++;

	            var self = this;

	            self._parser = new OctetParser();

	            //Keep track of writes that haven't finished so we don't emit the file before it's done being written
	            var outstandingWrites = 0;

	            self._parser.on("data", function (buffer) {
	              self.pause();
	              outstandingWrites++;

	              file.write(buffer, function () {
	                outstandingWrites--;
	                self.resume();

	                if (self.ended) {
	                  self._parser.emit("doneWritingFile");
	                }
	              });
	            });

	            self._parser.on("end", function () {
	              self._flushing--;
	              self.ended = true;

	              var done = function () {
	                self.emit("file", "file", file);
	                self._maybeEnd();
	              };

	              if (outstandingWrites === 0) {
	                done();
	              } else {
	                self._parser.once("doneWritingFile", done);
	              }
	            });
	          };

	          IncomingForm.prototype._initJSONencoded = function () {
	            this.type = "json";

	            var parser = new JSONParser(),
	                self = this;

	            if (this.bytesExpected) {
	              parser.initWithLength(this.bytesExpected);
	            }

	            parser.onField = function (key, val) {
	              self.emit("field", key, val);
	            };

	            parser.onEnd = function () {
	              self.ended = true;
	              self._maybeEnd();
	            };

	            this._parser = parser;
	          };

	          IncomingForm.prototype._uploadPath = function (filename) {
	            var name = "";
	            for (var i = 0; i < 32; i++) {
	              name += Math.floor(Math.random() * 16).toString(16);
	            }

	            if (this.keepExtensions) {
	              var ext = path.extname(filename);
	              ext = ext.replace(/(\.[a-z0-9]+).*/, "$1");

	              name += ext;
	            }

	            return path.join(this.uploadDir, name);
	          };

	          IncomingForm.prototype._maybeEnd = function () {
	            if (!this.ended || this._flushing || this.error) {
	              return;
	            }

	            this.emit("end");
	          };



	          /***/
	        },
	        /* 69 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          var isES5 = (function () {
	            "use strict";
	            return this === undefined;
	          })();

	          if (isES5) {
	            module.exports = {
	              freeze: Object.freeze,
	              defineProperty: Object.defineProperty,
	              keys: Object.keys,
	              getPrototypeOf: Object.getPrototypeOf,
	              isArray: Array.isArray,
	              isES5: isES5,
	              propertyIsWritable: function (obj, prop) {
	                var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	                return !!(!descriptor || descriptor.writable || descriptor.set);
	              }
	            };
	          } else {
	            var has = ({}).hasOwnProperty;
	            var str = ({}).toString;
	            var proto = ({}).constructor.prototype;

	            var ObjectKeys = function (o) {
	              var ret = [];
	              for (var key in o) {
	                if (has.call(o, key)) {
	                  ret.push(key);
	                }
	              }
	              return ret;
	            };

	            var ObjectDefineProperty = function (o, key, desc) {
	              o[key] = desc.value;
	              return o;
	            };

	            var ObjectFreeze = function (obj) {
	              return obj;
	            };

	            var ObjectGetPrototypeOf = function (obj) {
	              try {
	                return Object(obj).constructor.prototype;
	              } catch (e) {
	                return proto;
	              }
	            };

	            var ArrayIsArray = function (obj) {
	              try {
	                return str.call(obj) === "[object Array]";
	              } catch (e) {
	                return false;
	              }
	            };

	            module.exports = {
	              isArray: ArrayIsArray,
	              keys: ObjectKeys,
	              defineProperty: ObjectDefineProperty,
	              freeze: ObjectFreeze,
	              getPrototypeOf: ObjectGetPrototypeOf,
	              isES5: isES5,
	              propertyIsWritable: function () {
	                return true;
	              }
	            };
	          }


	          /***/
	        },
	        /* 70 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var schedule;
	          var _MutationObserver;
	          if (typeof process === "object" && typeof process.version === "string") {
	            schedule = function (fn) {
	              process.nextTick(fn);
	            };
	          } else if (typeof MutationObserver !== "undefined" && (_MutationObserver = MutationObserver) || typeof WebKitMutationObserver !== "undefined" && (_MutationObserver = WebKitMutationObserver)) {
	            schedule = (function () {
	              var div = document.createElement("div");
	              var queuedFn;
	              var observer = new _MutationObserver(function Promise$_Scheduler() {
	                var fn = queuedFn;
	                queuedFn = undefined;
	                fn();
	              });
	              observer.observe(div, {
	                attributes: true
	              });
	              return function Promise$_Scheduler(fn) {
	                queuedFn = fn;
	                div.classList.toggle("foo");
	              };
	            })();
	          } else if (typeof setTimeout !== "undefined") {
	            schedule = function (fn) {
	              setTimeout(fn, 0);
	            };
	          } else throw new Error("no async scheduler available");
	          module.exports = schedule;


	          /***/
	        },
	        /* 71 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * The MIT License (MIT)
	           * 
	           * Copyright (c) 2014 Petka Antonov
	           * 
	           * Permission is hereby granted, free of charge, to any person obtaining a copy
	           * of this software and associated documentation files (the "Software"), to deal
	           * in the Software without restriction, including without limitation the rights
	           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	           * copies of the Software, and to permit persons to whom the Software is
	           * furnished to do so, subject to the following conditions:</p>
	           * 
	           * The above copyright notice and this permission notice shall be included in
	           * all copies or substantial portions of the Software.
	           * 
	           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
	           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	           * THE SOFTWARE.
	           * 
	           */
	          "use strict";
	          var arrayCopy = function (src, srcIndex, dst, dstIndex, len) {
	            for (var j = 0; j < len; ++j) {
	              dst[j + dstIndex] = src[j + srcIndex];
	            }
	          };

	          var Queue = function (capacity) {
	            this._capacity = capacity;
	            this._length = 0;
	            this._front = 0;
	            this._makeCapacity();
	          };

	          Queue.prototype._willBeOverCapacity = function (size) {
	            return this._capacity < size;
	          };

	          Queue.prototype._pushOne = function (arg) {
	            var length = this.length();
	            this._checkCapacity(length + 1);
	            var i = this._front + length & this._capacity - 1;
	            this[i] = arg;
	            this._length = length + 1;
	          };

	          Queue.prototype._unshiftOne = function (value) {
	            var capacity = this._capacity;
	            this._checkCapacity(this.length() + 1);
	            var front = this._front;
	            var i = (front - 1 & capacity - 1 ^ capacity) - capacity;
	            this[i] = value;
	            this._front = i;
	            this._length = this.length() + 1;
	          };

	          Queue.prototype.unshift = function (fn, receiver, arg) {
	            this._unshiftOne(arg);
	            this._unshiftOne(receiver);
	            this._unshiftOne(fn);
	          };

	          Queue.prototype.push = function (fn, receiver, arg) {
	            var length = this.length() + 3;
	            if (this._willBeOverCapacity(length)) {
	              this._pushOne(fn);
	              this._pushOne(receiver);
	              this._pushOne(arg);
	              return;
	            }
	            var j = this._front + length - 3;
	            this._checkCapacity(length);
	            var wrapMask = this._capacity - 1;
	            this[j + 0 & wrapMask] = fn;
	            this[j + 1 & wrapMask] = receiver;
	            this[j + 2 & wrapMask] = arg;
	            this._length = length;
	          };

	          Queue.prototype.shift = function () {
	            var front = this._front,
	                ret = this[front];

	            this[front] = undefined;
	            this._front = front + 1 & this._capacity - 1;
	            this._length--;
	            return ret;
	          };

	          Queue.prototype.length = function () {
	            return this._length;
	          };

	          Queue.prototype._makeCapacity = function () {
	            var len = this._capacity;
	            for (var i = 0; i < len; ++i) {
	              this[i] = undefined;
	            }
	          };

	          Queue.prototype._checkCapacity = function (size) {
	            if (this._capacity < size) {
	              this._resizeTo(this._capacity << 3);
	            }
	          };

	          Queue.prototype._resizeTo = function (capacity) {
	            var oldFront = this._front;
	            var oldCapacity = this._capacity;
	            var oldQueue = new Array(oldCapacity);
	            var length = this.length();

	            arrayCopy(this, 0, oldQueue, 0, oldCapacity);
	            this._capacity = capacity;
	            this._makeCapacity();
	            this._front = 0;
	            if (oldFront + length <= oldCapacity) {
	              arrayCopy(oldQueue, oldFront, this, 0, length);
	            } else {
	              var lengthBeforeWrapping = length - (oldFront + length & oldCapacity - 1);

	              arrayCopy(oldQueue, oldFront, this, 0, lengthBeforeWrapping);
	              arrayCopy(oldQueue, 0, this, lengthBeforeWrapping, length - lengthBeforeWrapping);
	            }
	          };

	          module.exports = Queue;


	          /***/
	        },
	        /* 72 */
	        /***/function (module, exports, __webpack_require__) {
	          var PassThrough = function (options) {
	            if (!(this instanceof PassThrough)) return new PassThrough(options);

	            Transform.call(this, options);
	          };

	          // Copyright Joyent, Inc. and other Node contributors.
	          //
	          // Permission is hereby granted, free of charge, to any person obtaining a
	          // copy of this software and associated documentation files (the
	          // "Software"), to deal in the Software without restriction, including
	          // without limitation the rights to use, copy, modify, merge, publish,
	          // distribute, sublicense, and/or sell copies of the Software, and to permit
	          // persons to whom the Software is furnished to do so, subject to the
	          // following conditions:
	          //
	          // The above copyright notice and this permission notice shall be included
	          // in all copies or substantial portions of the Software.
	          //
	          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	          // USE OR OTHER DEALINGS IN THE SOFTWARE.

	          // a passthrough stream.
	          // basically just the most minimal sort of Transform stream.
	          // Every written chunk gets output as-is.

	          module.exports = PassThrough;

	          var Transform = __webpack_require__(78);

	          /*<replacement>*/
	          var util = __webpack_require__(89);
	          util.inherits = __webpack_require__(90);
	          /*</replacement>*/

	          util.inherits(PassThrough, Transform);

	          PassThrough.prototype._transform = function (chunk, encoding, cb) {
	            cb(null, chunk);
	          };


	          /***/
	        },
	        /* 73 */
	        /***/function (module, exports, __webpack_require__) {
	          var webpackContext = function (req) {
	            return __webpack_require__(webpackContextResolve(req));
	          };

	          var webpackContextResolve = function (req) {
	            return map[req] || (function () {
	              throw new Error("Cannot find module '" + req + "'.");
	            })();
	          };

	          var map = {
	            "./file": 79,
	            "./file.js": 79,
	            "./incoming_form": 68,
	            "./incoming_form.js": 68,
	            "./index": 24,
	            "./index.js": 24,
	            "./json_parser": 80,
	            "./json_parser.js": 80,
	            "./multipart_parser": 81,
	            "./multipart_parser.js": 81,
	            "./octet_parser": 82,
	            "./octet_parser.js": 82,
	            "./querystring_parser": 83,
	            "./querystring_parser.js": 83
	          };
	          ;
	          ;
	          webpackContext.keys = function webpackContextKeys() {
	            return Object.keys(map);
	          };
	          webpackContext.resolve = webpackContextResolve;
	          module.exports = webpackContext;
	          webpackContext.id = 73;


	          /***/
	        },
	        /* 74 */
	        /***/function (module, exports, __webpack_require__) {
	          // Load modules


	          // Declare internals

	          var internals = {
	            delimiter: "&"
	          };


	          internals.stringify = function (obj, prefix) {
	            if (Buffer.isBuffer(obj)) {
	              obj = obj.toString();
	            } else if (obj instanceof Date) {
	              obj = obj.toISOString();
	            } else if (obj === null) {
	              obj = "";
	            }

	            if (typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
	              return [encodeURIComponent(prefix) + "=" + encodeURIComponent(obj)];
	            }

	            var values = [];

	            for (var key in obj) {
	              if (obj.hasOwnProperty(key)) {
	                values = values.concat(internals.stringify(obj[key], prefix + "[" + key + "]"));
	              }
	            }

	            return values;
	          };


	          module.exports = function (obj, delimiter) {
	            delimiter = typeof delimiter === "undefined" ? internals.delimiter : delimiter;

	            var keys = [];

	            for (var key in obj) {
	              if (obj.hasOwnProperty(key)) {
	                keys = keys.concat(internals.stringify(obj[key], key));
	              }
	            }

	            return keys.join(delimiter);
	          };


	          /***/
	        },
	        /* 75 */
	        /***/function (module, exports, __webpack_require__) {
	          // Load modules

	          var Utils = __webpack_require__(85);


	          // Declare internals

	          var internals = {
	            delimiter: "&",
	            depth: 5,
	            arrayLimit: 20,
	            parametersLimit: 1000
	          };


	          internals.parseValues = function (str, delimiter) {
	            delimiter = typeof delimiter === "undefined" ? internals.delimiter : delimiter;

	            var obj = {};
	            var parts = str.split(delimiter, internals.parametersLimit);

	            for (var i = 0, il = parts.length; i < il; ++i) {
	              var part = parts[i];
	              var pos = part.indexOf("]=") === -1 ? part.indexOf("=") : part.indexOf("]=") + 1;

	              if (pos === -1) {
	                obj[Utils.decode(part)] = "";
	              } else {
	                var key = Utils.decode(part.slice(0, pos));
	                var val = Utils.decode(part.slice(pos + 1));

	                if (!obj[key]) {
	                  obj[key] = val;
	                } else {
	                  obj[key] = [].concat(obj[key]).concat(val);
	                }
	              }
	            }

	            return obj;
	          };


	          internals.parseObject = function (chain, val) {
	            if (!chain.length) {
	              return val;
	            }

	            var root = chain.shift();

	            var obj = {};
	            if (root === "[]") {
	              obj = [];
	              obj = obj.concat(internals.parseObject(chain, val));
	            } else {
	              var cleanRoot = root[0] === "[" && root[root.length - 1] === "]" ? root.slice(1, root.length - 1) : root;
	              var index = parseInt(cleanRoot, 10);
	              if (!isNaN(index) && root !== cleanRoot && index <= internals.arrayLimit) {
	                obj = [];
	                obj[index] = internals.parseObject(chain, val);
	              } else {
	                obj[cleanRoot] = internals.parseObject(chain, val);
	              }
	            }

	            return obj;
	          };


	          internals.parseKeys = function (key, val, depth) {
	            if (!key) {
	              return;
	            }

	            // The regex chunks

	            var parent = /^([^\[\]]*)/;
	            var child = /(\[[^\[\]]*\])/g;

	            // Get the parent

	            var segment = parent.exec(key);

	            // Don't allow them to overwrite object prototype properties

	            if (Object.prototype.hasOwnProperty(segment[1])) {
	              return;
	            }

	            // Stash the parent if it exists

	            var keys = [];
	            if (segment[1]) {
	              keys.push(segment[1]);
	            }

	            // Loop through children appending to the array until we hit depth

	            var i = 0;
	            while ((segment = child.exec(key)) !== null && i < depth) {
	              ++i;
	              if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ""))) {
	                keys.push(segment[1]);
	              }
	            }

	            // If there's a remainder, just add whatever is left

	            if (segment) {
	              keys.push("[" + key.slice(segment.index) + "]");
	            }

	            return internals.parseObject(keys, val);
	          };


	          module.exports = function (str, depth, delimiter) {
	            if (str === "" || str === null || typeof str === "undefined") {
	              return {};
	            }

	            if (typeof depth !== "number") {
	              delimiter = depth;
	              depth = internals.depth;
	            }

	            var tempObj = typeof str === "string" ? internals.parseValues(str, delimiter) : Utils.clone(str);
	            var obj = {};

	            // Iterate over the keys and setup the new object
	            //
	            for (var key in tempObj) {
	              if (tempObj.hasOwnProperty(key)) {
	                var newObj = internals.parseKeys(key, tempObj[key], depth);
	                obj = Utils.merge(obj, newObj);
	              }
	            }

	            return Utils.compact(obj);
	          };




	          /***/
	        },
	        /* 76 */
	        /***/function (module, exports, __webpack_require__) {
	          var CombinedStream = function () {
	            this.writable = false;
	            this.readable = true;
	            this.dataSize = 0;
	            this.maxDataSize = 2 * 1024 * 1024;
	            this.pauseStreams = true;

	            this._released = false;
	            this._streams = [];
	            this._currentStream = null;
	          };

	          var util = __webpack_require__(11);
	          var Stream = __webpack_require__(6).Stream;
	          var DelayedStream = __webpack_require__(91);

	          module.exports = CombinedStream;
	          util.inherits(CombinedStream, Stream);

	          CombinedStream.create = function (options) {
	            var combinedStream = new this();

	            options = options || {};
	            for (var option in options) {
	              combinedStream[option] = options[option];
	            }

	            return combinedStream;
	          };

	          CombinedStream.isStreamLike = function (stream) {
	            return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
	          };

	          CombinedStream.prototype.append = function (stream) {
	            var isStreamLike = CombinedStream.isStreamLike(stream);

	            if (isStreamLike) {
	              if (!(stream instanceof DelayedStream)) {
	                var newStream = DelayedStream.create(stream, {
	                  maxDataSize: Infinity,
	                  pauseStream: this.pauseStreams });
	                stream.on("data", this._checkDataSize.bind(this));
	                stream = newStream;
	              }

	              this._handleErrors(stream);

	              if (this.pauseStreams) {
	                stream.pause();
	              }
	            }

	            this._streams.push(stream);
	            return this;
	          };

	          CombinedStream.prototype.pipe = function (dest, options) {
	            Stream.prototype.pipe.call(this, dest, options);
	            this.resume();
	            return dest;
	          };

	          CombinedStream.prototype._getNext = function () {
	            this._currentStream = null;
	            var stream = this._streams.shift();


	            if (typeof stream == "undefined") {
	              this.end();
	              return;
	            }

	            if (typeof stream !== "function") {
	              this._pipeNext(stream);
	              return;
	            }

	            var getStream = stream;
	            getStream((function (stream) {
	              var isStreamLike = CombinedStream.isStreamLike(stream);
	              if (isStreamLike) {
	                stream.on("data", this._checkDataSize.bind(this));
	                this._handleErrors(stream);
	              }

	              this._pipeNext(stream);
	            }).bind(this));
	          };

	          CombinedStream.prototype._pipeNext = function (stream) {
	            this._currentStream = stream;

	            var isStreamLike = CombinedStream.isStreamLike(stream);
	            if (isStreamLike) {
	              stream.on("end", this._getNext.bind(this));
	              stream.pipe(this, { end: false });
	              return;
	            }

	            var value = stream;
	            this.write(value);
	            this._getNext();
	          };

	          CombinedStream.prototype._handleErrors = function (stream) {
	            var self = this;
	            stream.on("error", function (err) {
	              self._emitError(err);
	            });
	          };

	          CombinedStream.prototype.write = function (data) {
	            this.emit("data", data);
	          };

	          CombinedStream.prototype.pause = function () {
	            if (!this.pauseStreams) {
	              return;
	            }

	            if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function") this._currentStream.pause();
	            this.emit("pause");
	          };

	          CombinedStream.prototype.resume = function () {
	            if (!this._released) {
	              this._released = true;
	              this.writable = true;
	              this._getNext();
	            }

	            if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function") this._currentStream.resume();
	            this.emit("resume");
	          };

	          CombinedStream.prototype.end = function () {
	            this._reset();
	            this.emit("end");
	          };

	          CombinedStream.prototype.destroy = function () {
	            this._reset();
	            this.emit("close");
	          };

	          CombinedStream.prototype._reset = function () {
	            this.writable = false;
	            this._streams = [];
	            this._currentStream = null;
	          };

	          CombinedStream.prototype._checkDataSize = function () {
	            this._updateDataSize();
	            if (this.dataSize <= this.maxDataSize) {
	              return;
	            }

	            var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
	            this._emitError(new Error(message));
	          };

	          CombinedStream.prototype._updateDataSize = function () {
	            this.dataSize = 0;

	            var self = this;
	            this._streams.forEach(function (stream) {
	              if (!stream.dataSize) {
	                return;
	              }

	              self.dataSize += stream.dataSize;
	            });

	            if (this._currentStream && this._currentStream.dataSize) {
	              this.dataSize += this._currentStream.dataSize;
	            }
	          };

	          CombinedStream.prototype._emitError = function (err) {
	            this._reset();
	            this.emit("error", err);
	          };


	          /***/
	        },
	        /* 77 */
	        /***/function (module, exports, __webpack_require__) {
	          var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /*!
	                                                                           * async
	                                                                           * https://github.com/caolan/async
	                                                                           *
	                                                                           * Copyright 2010-2014 Caolan McMahon
	                                                                           * Released under the MIT license
	                                                                           */
	          /*jshint onevar: false, indent:4 */
	          /*global setImmediate: false, setTimeout: false, console: false */
	          (function () {
	            var only_once = function (fn) {
	              var called = false;
	              return function () {
	                if (called) throw new Error("Callback was already called.");
	                called = true;
	                fn.apply(root, arguments);
	              };
	            };

	            var async = {};

	            // global on the server, window in the browser
	            var root, previous_async;

	            root = this;
	            if (root != null) {
	              previous_async = root.async;
	            }

	            async.noConflict = function () {
	              root.async = previous_async;
	              return async;
	            };

	            //// cross-browser compatiblity functions ////

	            var _toString = Object.prototype.toString;

	            var _isArray = Array.isArray || function (obj) {
	              return _toString.call(obj) === "[object Array]";
	            };

	            var _each = function (arr, iterator) {
	              if (arr.forEach) {
	                return arr.forEach(iterator);
	              }
	              for (var i = 0; i < arr.length; i += 1) {
	                iterator(arr[i], i, arr);
	              }
	            };

	            var _map = function (arr, iterator) {
	              if (arr.map) {
	                return arr.map(iterator);
	              }
	              var results = [];
	              _each(arr, function (x, i, a) {
	                results.push(iterator(x, i, a));
	              });
	              return results;
	            };

	            var _reduce = function (arr, iterator, memo) {
	              if (arr.reduce) {
	                return arr.reduce(iterator, memo);
	              }
	              _each(arr, function (x, i, a) {
	                memo = iterator(memo, x, i, a);
	              });
	              return memo;
	            };

	            var _keys = function (obj) {
	              if (Object.keys) {
	                return Object.keys(obj);
	              }
	              var keys = [];
	              for (var k in obj) {
	                if (obj.hasOwnProperty(k)) {
	                  keys.push(k);
	                }
	              }
	              return keys;
	            };

	            //// exported async module functions ////

	            //// nextTick implementation with browser-compatible fallback ////
	            if (typeof process === "undefined" || !process.nextTick) {
	              if (typeof setImmediate === "function") {
	                async.nextTick = function (fn) {
	                  // not a direct alias for IE10 compatibility
	                  setImmediate(fn);
	                };
	                async.setImmediate = async.nextTick;
	              } else {
	                async.nextTick = function (fn) {
	                  setTimeout(fn, 0);
	                };
	                async.setImmediate = async.nextTick;
	              }
	            } else {
	              async.nextTick = process.nextTick;
	              if (typeof setImmediate !== "undefined") {
	                async.setImmediate = function (fn) {
	                  // not a direct alias for IE10 compatibility
	                  setImmediate(fn);
	                };
	              } else {
	                async.setImmediate = async.nextTick;
	              }
	            }

	            async.each = function (arr, iterator, callback) {
	              var done = function (err) {
	                if (err) {
	                  callback(err);
	                  callback = function () {};
	                } else {
	                  completed += 1;
	                  if (completed >= arr.length) {
	                    callback();
	                  }
	                }
	              };

	              callback = callback || function () {};
	              if (!arr.length) {
	                return callback();
	              }
	              var completed = 0;
	              _each(arr, function (x) {
	                iterator(x, only_once(done));
	              });
	            };
	            async.forEach = async.each;

	            async.eachSeries = function (arr, iterator, callback) {
	              callback = callback || function () {};
	              if (!arr.length) {
	                return callback();
	              }
	              var completed = 0;
	              var iterate = function () {
	                iterator(arr[completed], function (err) {
	                  if (err) {
	                    callback(err);
	                    callback = function () {};
	                  } else {
	                    completed += 1;
	                    if (completed >= arr.length) {
	                      callback();
	                    } else {
	                      iterate();
	                    }
	                  }
	                });
	              };
	              iterate();
	            };
	            async.forEachSeries = async.eachSeries;

	            async.eachLimit = function (arr, limit, iterator, callback) {
	              var fn = _eachLimit(limit);
	              fn.apply(null, [arr, iterator, callback]);
	            };
	            async.forEachLimit = async.eachLimit;

	            var _eachLimit = function (limit) {
	              return function (arr, iterator, callback) {
	                callback = callback || function () {};
	                if (!arr.length || limit <= 0) {
	                  return callback();
	                }
	                var completed = 0;
	                var started = 0;
	                var running = 0;

	                (function replenish() {
	                  if (completed >= arr.length) {
	                    return callback();
	                  }

	                  while (running < limit && started < arr.length) {
	                    started += 1;
	                    running += 1;
	                    iterator(arr[started - 1], function (err) {
	                      if (err) {
	                        callback(err);
	                        callback = function () {};
	                      } else {
	                        completed += 1;
	                        running -= 1;
	                        if (completed >= arr.length) {
	                          callback();
	                        } else {
	                          replenish();
	                        }
	                      }
	                    });
	                  }
	                })();
	              };
	            };


	            var doParallel = function (fn) {
	              return function () {
	                var args = Array.prototype.slice.call(arguments);
	                return fn.apply(null, [async.each].concat(args));
	              };
	            };
	            var doParallelLimit = function (limit, fn) {
	              return function () {
	                var args = Array.prototype.slice.call(arguments);
	                return fn.apply(null, [_eachLimit(limit)].concat(args));
	              };
	            };
	            var doSeries = function (fn) {
	              return function () {
	                var args = Array.prototype.slice.call(arguments);
	                return fn.apply(null, [async.eachSeries].concat(args));
	              };
	            };


	            var _asyncMap = function (eachfn, arr, iterator, callback) {
	              arr = _map(arr, function (x, i) {
	                return { index: i, value: x };
	              });
	              if (!callback) {
	                eachfn(arr, function (x, callback) {
	                  iterator(x.value, function (err) {
	                    callback(err);
	                  });
	                });
	              } else {
	                var results = [];
	                eachfn(arr, function (x, callback) {
	                  iterator(x.value, function (err, v) {
	                    results[x.index] = v;
	                    callback(err);
	                  });
	                }, function (err) {
	                  callback(err, results);
	                });
	              }
	            };
	            async.map = doParallel(_asyncMap);
	            async.mapSeries = doSeries(_asyncMap);
	            async.mapLimit = function (arr, limit, iterator, callback) {
	              return _mapLimit(limit)(arr, iterator, callback);
	            };

	            var _mapLimit = function (limit) {
	              return doParallelLimit(limit, _asyncMap);
	            };

	            // reduce only has a series version, as doing reduce in parallel won't
	            // work in many situations.
	            async.reduce = function (arr, memo, iterator, callback) {
	              async.eachSeries(arr, function (x, callback) {
	                iterator(memo, x, function (err, v) {
	                  memo = v;
	                  callback(err);
	                });
	              }, function (err) {
	                callback(err, memo);
	              });
	            };
	            // inject alias
	            async.inject = async.reduce;
	            // foldl alias
	            async.foldl = async.reduce;

	            async.reduceRight = function (arr, memo, iterator, callback) {
	              var reversed = _map(arr, function (x) {
	                return x;
	              }).reverse();
	              async.reduce(reversed, memo, iterator, callback);
	            };
	            // foldr alias
	            async.foldr = async.reduceRight;

	            var _filter = function (eachfn, arr, iterator, callback) {
	              var results = [];
	              arr = _map(arr, function (x, i) {
	                return { index: i, value: x };
	              });
	              eachfn(arr, function (x, callback) {
	                iterator(x.value, function (v) {
	                  if (v) {
	                    results.push(x);
	                  }
	                  callback();
	                });
	              }, function (err) {
	                callback(_map(results.sort(function (a, b) {
	                  return a.index - b.index;
	                }), function (x) {
	                  return x.value;
	                }));
	              });
	            };
	            async.filter = doParallel(_filter);
	            async.filterSeries = doSeries(_filter);
	            // select alias
	            async.select = async.filter;
	            async.selectSeries = async.filterSeries;

	            var _reject = function (eachfn, arr, iterator, callback) {
	              var results = [];
	              arr = _map(arr, function (x, i) {
	                return { index: i, value: x };
	              });
	              eachfn(arr, function (x, callback) {
	                iterator(x.value, function (v) {
	                  if (!v) {
	                    results.push(x);
	                  }
	                  callback();
	                });
	              }, function (err) {
	                callback(_map(results.sort(function (a, b) {
	                  return a.index - b.index;
	                }), function (x) {
	                  return x.value;
	                }));
	              });
	            };
	            async.reject = doParallel(_reject);
	            async.rejectSeries = doSeries(_reject);

	            var _detect = function (eachfn, arr, iterator, main_callback) {
	              eachfn(arr, function (x, callback) {
	                iterator(x, function (result) {
	                  if (result) {
	                    main_callback(x);
	                    main_callback = function () {};
	                  } else {
	                    callback();
	                  }
	                });
	              }, function (err) {
	                main_callback();
	              });
	            };
	            async.detect = doParallel(_detect);
	            async.detectSeries = doSeries(_detect);

	            async.some = function (arr, iterator, main_callback) {
	              async.each(arr, function (x, callback) {
	                iterator(x, function (v) {
	                  if (v) {
	                    main_callback(true);
	                    main_callback = function () {};
	                  }
	                  callback();
	                });
	              }, function (err) {
	                main_callback(false);
	              });
	            };
	            // any alias
	            async.any = async.some;

	            async.every = function (arr, iterator, main_callback) {
	              async.each(arr, function (x, callback) {
	                iterator(x, function (v) {
	                  if (!v) {
	                    main_callback(false);
	                    main_callback = function () {};
	                  }
	                  callback();
	                });
	              }, function (err) {
	                main_callback(true);
	              });
	            };
	            // all alias
	            async.all = async.every;

	            async.sortBy = function (arr, iterator, callback) {
	              async.map(arr, function (x, callback) {
	                iterator(x, function (err, criteria) {
	                  if (err) {
	                    callback(err);
	                  } else {
	                    callback(null, { value: x, criteria: criteria });
	                  }
	                });
	              }, function (err, results) {
	                if (err) {
	                  return callback(err);
	                } else {
	                  var fn = function (left, right) {
	                    var a = left.criteria,
	                        b = right.criteria;
	                    return a < b ? -1 : a > b ? 1 : 0;
	                  };
	                  callback(null, _map(results.sort(fn), function (x) {
	                    return x.value;
	                  }));
	                }
	              });
	            };

	            async.auto = function (tasks, callback) {
	              callback = callback || function () {};
	              var keys = _keys(tasks);
	              var remainingTasks = keys.length;
	              if (!remainingTasks) {
	                return callback();
	              }

	              var results = {};

	              var listeners = [];
	              var addListener = function (fn) {
	                listeners.unshift(fn);
	              };
	              var removeListener = function (fn) {
	                for (var i = 0; i < listeners.length; i += 1) {
	                  if (listeners[i] === fn) {
	                    listeners.splice(i, 1);
	                    return;
	                  }
	                }
	              };
	              var taskComplete = function () {
	                remainingTasks--;
	                _each(listeners.slice(0), function (fn) {
	                  fn();
	                });
	              };

	              addListener(function () {
	                if (!remainingTasks) {
	                  var theCallback = callback;
	                  // prevent final callback from calling itself if it errors
	                  callback = function () {};

	                  theCallback(null, results);
	                }
	              });

	              _each(keys, function (k) {
	                var task = _isArray(tasks[k]) ? tasks[k] : [tasks[k]];
	                var taskCallback = function (err) {
	                  var args = Array.prototype.slice.call(arguments, 1);
	                  if (args.length <= 1) {
	                    args = args[0];
	                  }
	                  if (err) {
	                    var safeResults = {};
	                    _each(_keys(results), function (rkey) {
	                      safeResults[rkey] = results[rkey];
	                    });
	                    safeResults[k] = args;
	                    callback(err, safeResults);
	                    // stop subsequent errors hitting callback multiple times
	                    callback = function () {};
	                  } else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                  }
	                };
	                var requires = task.slice(0, Math.abs(task.length - 1)) || [];
	                var ready = function () {
	                  return _reduce(requires, function (a, x) {
	                    return a && results.hasOwnProperty(x);
	                  }, true) && !results.hasOwnProperty(k);
	                };
	                if (ready()) {
	                  task[task.length - 1](taskCallback, results);
	                } else {
	                  var listener = function () {
	                    if (ready()) {
	                      removeListener(listener);
	                      task[task.length - 1](taskCallback, results);
	                    }
	                  };
	                  addListener(listener);
	                }
	              });
	            };

	            async.retry = function (times, task, callback) {
	              var DEFAULT_TIMES = 5;
	              var attempts = [];
	              // Use defaults if times not passed
	              if (typeof times === "function") {
	                callback = task;
	                task = times;
	                times = DEFAULT_TIMES;
	              }
	              // Make sure times is a number
	              times = parseInt(times, 10) || DEFAULT_TIMES;
	              var wrappedTask = function (wrappedCallback, wrappedResults) {
	                var retryAttempt = function (task, finalAttempt) {
	                  return function (seriesCallback) {
	                    task(function (err, result) {
	                      seriesCallback(!err || finalAttempt, { err: err, result: result });
	                    }, wrappedResults);
	                  };
	                };
	                while (times) {
	                  attempts.push(retryAttempt(task, !(times -= 1)));
	                }
	                async.series(attempts, function (done, data) {
	                  data = data[data.length - 1];
	                  (wrappedCallback || callback)(data.err, data.result);
	                });
	              };
	              // If a callback is passed, run this as a controll flow
	              return callback ? wrappedTask() : wrappedTask;
	            };

	            async.waterfall = function (tasks, callback) {
	              callback = callback || function () {};
	              if (!_isArray(tasks)) {
	                var err = new Error("First argument to waterfall must be an array of functions");
	                return callback(err);
	              }
	              if (!tasks.length) {
	                return callback();
	              }
	              var wrapIterator = function (iterator) {
	                return function (err) {
	                  if (err) {
	                    callback.apply(null, arguments);
	                    callback = function () {};
	                  } else {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    var next = iterator.next();
	                    if (next) {
	                      args.push(wrapIterator(next));
	                    } else {
	                      args.push(callback);
	                    }
	                    async.setImmediate(function () {
	                      iterator.apply(null, args);
	                    });
	                  }
	                };
	              };
	              wrapIterator(async.iterator(tasks))();
	            };

	            var _parallel = function (eachfn, tasks, callback) {
	              callback = callback || function () {};
	              if (_isArray(tasks)) {
	                eachfn.map(tasks, function (fn, callback) {
	                  if (fn) {
	                    fn(function (err) {
	                      var args = Array.prototype.slice.call(arguments, 1);
	                      if (args.length <= 1) {
	                        args = args[0];
	                      }
	                      callback.call(null, err, args);
	                    });
	                  }
	                }, callback);
	              } else {
	                var results = {};
	                eachfn.each(_keys(tasks), function (k, callback) {
	                  tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                      args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                  });
	                }, function (err) {
	                  callback(err, results);
	                });
	              }
	            };

	            async.parallel = function (tasks, callback) {
	              _parallel({ map: async.map, each: async.each }, tasks, callback);
	            };

	            async.parallelLimit = function (tasks, limit, callback) {
	              _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
	            };

	            async.series = function (tasks, callback) {
	              callback = callback || function () {};
	              if (_isArray(tasks)) {
	                async.mapSeries(tasks, function (fn, callback) {
	                  if (fn) {
	                    fn(function (err) {
	                      var args = Array.prototype.slice.call(arguments, 1);
	                      if (args.length <= 1) {
	                        args = args[0];
	                      }
	                      callback.call(null, err, args);
	                    });
	                  }
	                }, callback);
	              } else {
	                var results = {};
	                async.eachSeries(_keys(tasks), function (k, callback) {
	                  tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                      args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                  });
	                }, function (err) {
	                  callback(err, results);
	                });
	              }
	            };

	            async.iterator = function (tasks) {
	              var makeCallback = function (index) {
	                var fn = function () {
	                  if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                  }
	                  return fn.next();
	                };
	                fn.next = function () {
	                  return index < tasks.length - 1 ? makeCallback(index + 1) : null;
	                };
	                return fn;
	              };
	              return makeCallback(0);
	            };

	            async.apply = function (fn) {
	              var args = Array.prototype.slice.call(arguments, 1);
	              return function () {
	                return fn.apply(null, args.concat(Array.prototype.slice.call(arguments)));
	              };
	            };

	            var _concat = function (eachfn, arr, fn, callback) {
	              var r = [];
	              eachfn(arr, function (x, cb) {
	                fn(x, function (err, y) {
	                  r = r.concat(y || []);
	                  cb(err);
	                });
	              }, function (err) {
	                callback(err, r);
	              });
	            };
	            async.concat = doParallel(_concat);
	            async.concatSeries = doSeries(_concat);

	            async.whilst = function (test, iterator, callback) {
	              if (test()) {
	                iterator(function (err) {
	                  if (err) {
	                    return callback(err);
	                  }
	                  async.whilst(test, iterator, callback);
	                });
	              } else {
	                callback();
	              }
	            };

	            async.doWhilst = function (iterator, test, callback) {
	              iterator(function (err) {
	                if (err) {
	                  return callback(err);
	                }
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (test.apply(null, args)) {
	                  async.doWhilst(iterator, test, callback);
	                } else {
	                  callback();
	                }
	              });
	            };

	            async.until = function (test, iterator, callback) {
	              if (!test()) {
	                iterator(function (err) {
	                  if (err) {
	                    return callback(err);
	                  }
	                  async.until(test, iterator, callback);
	                });
	              } else {
	                callback();
	              }
	            };

	            async.doUntil = function (iterator, test, callback) {
	              iterator(function (err) {
	                if (err) {
	                  return callback(err);
	                }
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (!test.apply(null, args)) {
	                  async.doUntil(iterator, test, callback);
	                } else {
	                  callback();
	                }
	              });
	            };

	            async.queue = function (worker, concurrency) {
	              var _insert = function (q, data, pos, callback) {
	                if (!q.started) {
	                  q.started = true;
	                }
	                if (!_isArray(data)) {
	                  data = [data];
	                }
	                if (data.length == 0) {
	                  // call drain immediately if there are no tasks
	                  return async.setImmediate(function () {
	                    if (q.drain) {
	                      q.drain();
	                    }
	                  });
	                }
	                _each(data, function (task) {
	                  var item = {
	                    data: task,
	                    callback: typeof callback === "function" ? callback : null
	                  };

	                  if (pos) {
	                    q.tasks.unshift(item);
	                  } else {
	                    q.tasks.push(item);
	                  }

	                  if (q.saturated && q.tasks.length === q.concurrency) {
	                    q.saturated();
	                  }
	                  async.setImmediate(q.process);
	                });
	              };

	              if (concurrency === undefined) {
	                concurrency = 1;
	              }


	              var workers = 0;
	              var q = {
	                tasks: [],
	                concurrency: concurrency,
	                saturated: null,
	                empty: null,
	                drain: null,
	                started: false,
	                paused: false,
	                push: function (data, callback) {
	                  _insert(q, data, false, callback);
	                },
	                kill: function () {
	                  q.drain = null;
	                  q.tasks = [];
	                },
	                unshift: function (data, callback) {
	                  _insert(q, data, true, callback);
	                },
	                process: function () {
	                  if (!q.paused && workers < q.concurrency && q.tasks.length) {
	                    var task = q.tasks.shift();
	                    if (q.empty && q.tasks.length === 0) {
	                      q.empty();
	                    }
	                    workers += 1;
	                    var next = function () {
	                      workers -= 1;
	                      if (task.callback) {
	                        task.callback.apply(task, arguments);
	                      }
	                      if (q.drain && q.tasks.length + workers === 0) {
	                        q.drain();
	                      }
	                      q.process();
	                    };
	                    var cb = only_once(next);
	                    worker(task.data, cb);
	                  }
	                },
	                length: function () {
	                  return q.tasks.length;
	                },
	                running: function () {
	                  return workers;
	                },
	                idle: function () {
	                  return q.tasks.length + workers === 0;
	                },
	                pause: function () {
	                  if (q.paused === true) {
	                    return;
	                  }
	                  q.paused = true;
	                  q.process();
	                },
	                resume: function () {
	                  if (q.paused === false) {
	                    return;
	                  }
	                  q.paused = false;
	                  q.process();
	                }
	              };
	              return q;
	            };

	            async.priorityQueue = function (worker, concurrency) {
	              var _compareTasks = function (a, b) {
	                return a.priority - b.priority;
	              };

	              var _binarySearch = function (sequence, item, compare) {
	                var beg = -1,
	                    end = sequence.length - 1;
	                while (beg < end) {
	                  var mid = beg + (end - beg + 1 >>> 1);
	                  if (compare(item, sequence[mid]) >= 0) {
	                    beg = mid;
	                  } else {
	                    end = mid - 1;
	                  }
	                }
	                return beg;
	              };

	              var _insert = function (q, data, priority, callback) {
	                if (!q.started) {
	                  q.started = true;
	                }
	                if (!_isArray(data)) {
	                  data = [data];
	                }
	                if (data.length == 0) {
	                  // call drain immediately if there are no tasks
	                  return async.setImmediate(function () {
	                    if (q.drain) {
	                      q.drain();
	                    }
	                  });
	                }
	                _each(data, function (task) {
	                  var item = {
	                    data: task,
	                    priority: priority,
	                    callback: typeof callback === "function" ? callback : null
	                  };

	                  q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

	                  if (q.saturated && q.tasks.length === q.concurrency) {
	                    q.saturated();
	                  }
	                  async.setImmediate(q.process);
	                });
	              };

	              ;

	              // Start with a normal queue
	              var q = async.queue(worker, concurrency);

	              // Override push to accept second parameter representing priority
	              q.push = function (data, priority, callback) {
	                _insert(q, data, priority, callback);
	              };

	              // Remove unshift function
	              delete q.unshift;

	              return q;
	            };

	            async.cargo = function (worker, payload) {
	              var working = false,
	                  tasks = [];

	              var cargo = {
	                tasks: tasks,
	                payload: payload,
	                saturated: null,
	                empty: null,
	                drain: null,
	                drained: true,
	                push: function (data, callback) {
	                  if (!_isArray(data)) {
	                    data = [data];
	                  }
	                  _each(data, function (task) {
	                    tasks.push({
	                      data: task,
	                      callback: typeof callback === "function" ? callback : null
	                    });
	                    cargo.drained = false;
	                    if (cargo.saturated && tasks.length === payload) {
	                      cargo.saturated();
	                    }
	                  });
	                  async.setImmediate(cargo.process);
	                },
	                process: function process() {
	                  if (working) return;
	                  if (tasks.length === 0) {
	                    if (cargo.drain && !cargo.drained) cargo.drain();
	                    cargo.drained = true;
	                    return;
	                  }

	                  var ts = typeof payload === "number" ? tasks.splice(0, payload) : tasks.splice(0, tasks.length);

	                  var ds = _map(ts, function (task) {
	                    return task.data;
	                  });

	                  if (cargo.empty) cargo.empty();
	                  working = true;
	                  worker(ds, function () {
	                    working = false;

	                    var args = arguments;
	                    _each(ts, function (data) {
	                      if (data.callback) {
	                        data.callback.apply(null, args);
	                      }
	                    });

	                    process();
	                  });
	                },
	                length: function () {
	                  return tasks.length;
	                },
	                running: function () {
	                  return working;
	                }
	              };
	              return cargo;
	            };

	            var _console_fn = function (name) {
	              return function (fn) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                fn.apply(null, args.concat([function (err) {
	                  var args = Array.prototype.slice.call(arguments, 1);
	                  if (typeof console !== "undefined") {
	                    if (err) {
	                      if (console.error) {
	                        console.error(err);
	                      }
	                    } else if (console[name]) {
	                      _each(args, function (x) {
	                        console[name](x);
	                      });
	                    }
	                  }
	                }]));
	              };
	            };
	            async.log = _console_fn("log");
	            async.dir = _console_fn("dir");
	            /*async.info = _console_fn('info');
	            async.warn = _console_fn('warn');
	            async.error = _console_fn('error');*/

	            async.memoize = function (fn, hasher) {
	              var memo = {};
	              var queues = {};
	              hasher = hasher || function (x) {
	                return x;
	              };
	              var memoized = function () {
	                var args = Array.prototype.slice.call(arguments);
	                var callback = args.pop();
	                var key = hasher.apply(null, args);
	                if (key in memo) {
	                  async.nextTick(function () {
	                    callback.apply(null, memo[key]);
	                  });
	                } else if (key in queues) {
	                  queues[key].push(callback);
	                } else {
	                  queues[key] = [callback];
	                  fn.apply(null, args.concat([function () {
	                    memo[key] = arguments;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                      q[i].apply(null, arguments);
	                    }
	                  }]));
	                }
	              };
	              memoized.memo = memo;
	              memoized.unmemoized = fn;
	              return memoized;
	            };

	            async.unmemoize = function (fn) {
	              return function () {
	                return (fn.unmemoized || fn).apply(null, arguments);
	              };
	            };

	            async.times = function (count, iterator, callback) {
	              var counter = [];
	              for (var i = 0; i < count; i++) {
	                counter.push(i);
	              }
	              return async.map(counter, iterator, callback);
	            };

	            async.timesSeries = function (count, iterator, callback) {
	              var counter = [];
	              for (var i = 0; i < count; i++) {
	                counter.push(i);
	              }
	              return async.mapSeries(counter, iterator, callback);
	            };

	            async.seq = function () {
	              var fns = arguments;
	              return function () {
	                var that = this;
	                var args = Array.prototype.slice.call(arguments);
	                var callback = args.pop();
	                async.reduce(fns, args, function (newargs, fn, cb) {
	                  fn.apply(that, newargs.concat([function () {
	                    var err = arguments[0];
	                    var nextargs = Array.prototype.slice.call(arguments, 1);
	                    cb(err, nextargs);
	                  }]));
	                }, function (err, results) {
	                  callback.apply(that, [err].concat(results));
	                });
	              };
	            };

	            async.compose = function () {
	              return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	            };

	            var _applyEach = function (eachfn, fns /*args...*/) {
	              var go = function () {
	                var that = this;
	                var args = Array.prototype.slice.call(arguments);
	                var callback = args.pop();
	                return eachfn(fns, function (fn, cb) {
	                  fn.apply(that, args.concat([cb]));
	                }, callback);
	              };
	              if (arguments.length > 2) {
	                var args = Array.prototype.slice.call(arguments, 2);
	                return go.apply(this, args);
	              } else {
	                return go;
	              }
	            };
	            async.applyEach = doParallel(_applyEach);
	            async.applyEachSeries = doSeries(_applyEach);

	            async.forever = function (fn, callback) {
	              var next = function (err) {
	                if (err) {
	                  if (callback) {
	                    return callback(err);
	                  }
	                  throw err;
	                }
	                fn(next);
	              };

	              next();
	            };

	            // Node.js
	            if (typeof module !== "undefined" && module.exports) {
	              module.exports = async;
	            }
	            // AMD / RequireJS
	            else if (true) {
	              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
	                return async;
	              }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	            }
	            // included directly via <script> tag
	            else {
	              root.async = async;
	            }
	          })();


	          /***/
	        },
	        /* 78 */
	        /***/function (module, exports, __webpack_require__) {
	          var TransformState = function (options, stream) {
	            this.afterTransform = function (er, data) {
	              return afterTransform(stream, er, data);
	            };

	            this.needTransform = false;
	            this.transforming = false;
	            this.writecb = null;
	            this.writechunk = null;
	          };

	          var afterTransform = function (stream, er, data) {
	            var ts = stream._transformState;
	            ts.transforming = false;

	            var cb = ts.writecb;

	            if (!cb) return stream.emit("error", new Error("no writecb in Transform class"));

	            ts.writechunk = null;
	            ts.writecb = null;

	            if (data !== null && data !== undefined) stream.push(data);

	            if (cb) cb(er);

	            var rs = stream._readableState;
	            rs.reading = false;
	            if (rs.needReadable || rs.length < rs.highWaterMark) {
	              stream._read(rs.highWaterMark);
	            }
	          };

	          var Transform = function (options) {
	            if (!(this instanceof Transform)) return new Transform(options);

	            Duplex.call(this, options);

	            var ts = this._transformState = new TransformState(options, this);

	            // when the writable side finishes, then flush out anything remaining.
	            var stream = this;

	            // start out asking for a readable event once data is transformed.
	            this._readableState.needReadable = true;

	            // we have implemented the _read method, and done the other things
	            // that Readable wants before the first _read call, so unset the
	            // sync guard flag.
	            this._readableState.sync = false;

	            this.once("finish", function () {
	              if ("function" === typeof this._flush) this._flush(function (er) {
	                done(stream, er);
	              });else done(stream);
	            });
	          };

	          var done = function (stream, er) {
	            if (er) return stream.emit("error", er);

	            // if there's nothing in the write buffer, then that means
	            // that nothing more will ever be provided
	            var ws = stream._writableState;
	            var rs = stream._readableState;
	            var ts = stream._transformState;

	            if (ws.length) throw new Error("calling transform done when ws.length != 0");

	            if (ts.transforming) throw new Error("calling transform done when still transforming");

	            return stream.push(null);
	          }


	          /***/;

	          // Copyright Joyent, Inc. and other Node contributors.
	          //
	          // Permission is hereby granted, free of charge, to any person obtaining a
	          // copy of this software and associated documentation files (the
	          // "Software"), to deal in the Software without restriction, including
	          // without limitation the rights to use, copy, modify, merge, publish,
	          // distribute, sublicense, and/or sell copies of the Software, and to permit
	          // persons to whom the Software is furnished to do so, subject to the
	          // following conditions:
	          //
	          // The above copyright notice and this permission notice shall be included
	          // in all copies or substantial portions of the Software.
	          //
	          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	          // USE OR OTHER DEALINGS IN THE SOFTWARE.


	          // a transform stream is a readable/writable stream where you do
	          // something with the data.  Sometimes it's called a "filter",
	          // but that's not a great name for it, since that implies a thing where
	          // some bits pass through, and others are simply ignored.  (That would
	          // be a valid example of a transform, of course.)
	          //
	          // While the output is causally related to the input, it's not a
	          // necessarily symmetric or synchronous transformation.  For example,
	          // a zlib stream might take multiple plain-text writes(), and then
	          // emit a single compressed chunk some time in the future.
	          //
	          // Here's how this works:
	          //
	          // The Transform stream has all the aspects of the readable and writable
	          // stream classes.  When you write(chunk), that calls _write(chunk,cb)
	          // internally, and returns false if there's a lot of pending writes
	          // buffered up.  When you call read(), that calls _read(n) until
	          // there's enough pending readable data buffered up.
	          //
	          // In a transform stream, the written data is placed in a buffer.  When
	          // _read(n) is called, it transforms the queued up data, calling the
	          // buffered _write cb's as it consumes chunks.  If consuming a single
	          // written chunk would result in multiple output chunks, then the first
	          // outputted bit calls the readcb, and subsequent chunks just go into
	          // the read buffer, and will cause it to emit 'readable' if necessary.
	          //
	          // This way, back-pressure is actually determined by the reading side,
	          // since _read has to be called to start processing a new chunk.  However,
	          // a pathological inflate type of transform can cause excessive buffering
	          // here.  For example, imagine a stream where every byte of input is
	          // interpreted as an integer from 0-255, and then results in that many
	          // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	          // 1kb of data being output.  In this case, you could write a very small
	          // amount of input, and end up with a very large amount of output.  In
	          // such a pathological inflating mechanism, there'd be no way to tell
	          // the system to stop doing the transform.  A single 4MB write could
	          // cause the system to run out of memory.
	          //
	          // However, even in such a pathological case, only a single written chunk
	          // would be consumed, and then the rest would wait (un-transformed) until
	          // the results of the previous transformed chunk were consumed.

	          module.exports = Transform;

	          var Duplex = __webpack_require__(88);

	          /*<replacement>*/
	          var util = __webpack_require__(89);
	          util.inherits = __webpack_require__(90);
	          /*</replacement>*/

	          util.inherits(Transform, Duplex);


	          Transform.prototype.push = function (chunk, encoding) {
	            this._transformState.needTransform = false;
	            return Duplex.prototype.push.call(this, chunk, encoding);
	          };

	          // This is the part where you do stuff!
	          // override this function in implementation classes.
	          // 'chunk' is an input chunk.
	          //
	          // Call `push(newChunk)` to pass along transformed output
	          // to the readable side.  You may call 'push' zero or more times.
	          //
	          // Call `cb(err)` when you are done with this chunk.  If you pass
	          // an error, then that'll put the hurt on the whole operation.  If you
	          // never call cb(), then you'll never get another chunk.
	          Transform.prototype._transform = function (chunk, encoding, cb) {
	            throw new Error("not implemented");
	          };

	          Transform.prototype._write = function (chunk, encoding, cb) {
	            var ts = this._transformState;
	            ts.writecb = cb;
	            ts.writechunk = chunk;
	            ts.writeencoding = encoding;
	            if (!ts.transforming) {
	              var rs = this._readableState;
	              if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	            }
	          };

	          // Doesn't matter what the args are here.
	          // _transform does all the work.
	          // That we got here means that the readable side wants more data.
	          Transform.prototype._read = function (n) {
	            var ts = this._transformState;

	            if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	              ts.transforming = true;
	              this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	            } else {
	              // mark that we need a transform, so that any data that comes in
	              // will get processed, now that we've asked for it.
	              ts.needTransform = true;
	            }
	          };
	        },
	        /* 79 */
	        /***/function (module, exports, __webpack_require__) {
	          var File = function (properties) {
	            EventEmitter.call(this);

	            this.size = 0;
	            this.path = null;
	            this.name = null;
	            this.type = null;
	            this.hash = null;
	            this.lastModifiedDate = null;

	            this._writeStream = null;

	            for (var key in properties) {
	              this[key] = properties[key];
	            }

	            if (typeof this.hash === "string") {
	              this.hash = crypto.createHash(properties.hash);
	            } else {
	              this.hash = null;
	            }
	          };

	          var require;if (global.GENTLY) require = GENTLY.hijack(__webpack_require__(73));

	          var util = require("util"),
	              WriteStream = require("fs").WriteStream,
	              EventEmitter = require("events").EventEmitter,
	              crypto = require("crypto");

	          module.exports = File;
	          util.inherits(File, EventEmitter);

	          File.prototype.open = function () {
	            this._writeStream = new WriteStream(this.path);
	          };

	          File.prototype.toJSON = function () {
	            return {
	              size: this.size,
	              path: this.path,
	              name: this.name,
	              type: this.type,
	              mtime: this.lastModifiedDate,
	              length: this.length,
	              filename: this.filename,
	              mime: this.mime
	            };
	          };

	          File.prototype.write = function (buffer, cb) {
	            var self = this;
	            if (self.hash) {
	              self.hash.update(buffer);
	            }
	            this._writeStream.write(buffer, function () {
	              self.lastModifiedDate = new Date();
	              self.size += buffer.length;
	              self.emit("progress", self.size);
	              cb();
	            });
	          };

	          File.prototype.end = function (cb) {
	            var self = this;
	            if (self.hash) {
	              self.hash = self.hash.digest("hex");
	            }
	            this._writeStream.end(function () {
	              self.emit("end");
	              cb();
	            });
	          };


	          /***/
	        },
	        /* 80 */
	        /***/function (module, exports, __webpack_require__) {
	          var JSONParser = function () {
	            this.data = new Buffer("");
	            this.bytesWritten = 0;
	          };

	          var require;if (global.GENTLY) require = GENTLY.hijack(__webpack_require__(73));

	          var Buffer = require("buffer").Buffer;

	          ;
	          exports.JSONParser = JSONParser;

	          JSONParser.prototype.initWithLength = function (length) {
	            this.data = new Buffer(length);
	          };

	          JSONParser.prototype.write = function (buffer) {
	            if (this.data.length >= this.bytesWritten + buffer.length) {
	              buffer.copy(this.data, this.bytesWritten);
	            } else {
	              this.data = Buffer.concat([this.data, buffer]);
	            }
	            this.bytesWritten += buffer.length;
	            return buffer.length;
	          };

	          JSONParser.prototype.end = function () {
	            try {
	              var fields = JSON.parse(this.data.toString("utf8"));
	              for (var field in fields) {
	                this.onField(field, fields[field]);
	              }
	            } catch (e) {}
	            this.data = null;

	            this.onEnd();
	          }

	          /***/;
	        },
	        /* 81 */
	        /***/function (module, exports, __webpack_require__) {
	          var MultipartParser = function () {
	            this.boundary = null;
	            this.boundaryChars = null;
	            this.lookbehind = null;
	            this.state = S.PARSER_UNINITIALIZED;

	            this.index = null;
	            this.flags = 0;
	          };

	          var Buffer = __webpack_require__(86).Buffer,
	              s = 0,
	              S = { PARSER_UNINITIALIZED: s++,
	            START: s++,
	            START_BOUNDARY: s++,
	            HEADER_FIELD_START: s++,
	            HEADER_FIELD: s++,
	            HEADER_VALUE_START: s++,
	            HEADER_VALUE: s++,
	            HEADER_VALUE_ALMOST_DONE: s++,
	            HEADERS_ALMOST_DONE: s++,
	            PART_DATA_START: s++,
	            PART_DATA: s++,
	            PART_END: s++,
	            END: s++
	          },
	              f = 1,
	              F = { PART_BOUNDARY: f,
	            LAST_BOUNDARY: f *= 2
	          },
	              LF = 10,
	              CR = 13,
	              SPACE = 32,
	              HYPHEN = 45,
	              COLON = 58,
	              A = 97,
	              Z = 122,
	              lower = function (c) {
	            return c | 32;
	          };

	          for (s in S) {
	            exports[s] = S[s];
	          }

	          ;
	          exports.MultipartParser = MultipartParser;

	          MultipartParser.stateToString = function (stateNumber) {
	            for (var state in S) {
	              var number = S[state];
	              if (number === stateNumber) return state;
	            }
	          };

	          MultipartParser.prototype.initWithBoundary = function (str) {
	            this.boundary = new Buffer(str.length + 4);
	            this.boundary.write("\r\n--", "ascii", 0);
	            this.boundary.write(str, "ascii", 4);
	            this.lookbehind = new Buffer(this.boundary.length + 8);
	            this.state = S.START;

	            this.boundaryChars = {};
	            for (var i = 0; i < this.boundary.length; i++) {
	              this.boundaryChars[this.boundary[i]] = true;
	            }
	          };

	          MultipartParser.prototype.write = function (buffer) {
	            var self = this,
	                i = 0,
	                len = buffer.length,
	                prevIndex = this.index,
	                index = this.index,
	                state = this.state,
	                flags = this.flags,
	                lookbehind = this.lookbehind,
	                boundary = this.boundary,
	                boundaryChars = this.boundaryChars,
	                boundaryLength = this.boundary.length,
	                boundaryEnd = boundaryLength - 1,
	                bufferLength = buffer.length,
	                c,
	                cl,
	                mark = function (name) {
	              self[name + "Mark"] = i;
	            },
	                clear = function (name) {
	              delete self[name + "Mark"];
	            },
	                callback = function (name, buffer, start, end) {
	              if (start !== undefined && start === end) {
	                return;
	              }

	              var callbackSymbol = "on" + name.substr(0, 1).toUpperCase() + name.substr(1);
	              if (callbackSymbol in self) {
	                self[callbackSymbol](buffer, start, end);
	              }
	            },
	                dataCallback = function (name, clear) {
	              var markSymbol = name + "Mark";
	              if (!(markSymbol in self)) {
	                return;
	              }

	              if (!clear) {
	                callback(name, buffer, self[markSymbol], buffer.length);
	                self[markSymbol] = 0;
	              } else {
	                callback(name, buffer, self[markSymbol], i);
	                delete self[markSymbol];
	              }
	            };

	            for (i = 0; i < len; i++) {
	              c = buffer[i];
	              switch (state) {
	                case S.PARSER_UNINITIALIZED:
	                  return i;
	                case S.START:
	                  index = 0;
	                  state = S.START_BOUNDARY;
	                case S.START_BOUNDARY:
	                  if (index == boundary.length - 2) {
	                    if (c != CR) {
	                      return i;
	                    }
	                    index++;
	                    break;
	                  } else if (index - 1 == boundary.length - 2) {
	                    if (c != LF) {
	                      return i;
	                    }
	                    index = 0;
	                    callback("partBegin");
	                    state = S.HEADER_FIELD_START;
	                    break;
	                  }

	                  if (c != boundary[index + 2]) {
	                    index = -2;
	                  }
	                  if (c == boundary[index + 2]) {
	                    index++;
	                  }
	                  break;
	                case S.HEADER_FIELD_START:
	                  state = S.HEADER_FIELD;
	                  mark("headerField");
	                  index = 0;
	                case S.HEADER_FIELD:
	                  if (c == CR) {
	                    clear("headerField");
	                    state = S.HEADERS_ALMOST_DONE;
	                    break;
	                  }

	                  index++;
	                  if (c == HYPHEN) {
	                    break;
	                  }

	                  if (c == COLON) {
	                    if (index == 1) {
	                      // empty header field
	                      return i;
	                    }
	                    dataCallback("headerField", true);
	                    state = S.HEADER_VALUE_START;
	                    break;
	                  }

	                  cl = lower(c);
	                  if (cl < A || cl > Z) {
	                    return i;
	                  }
	                  break;
	                case S.HEADER_VALUE_START:
	                  if (c == SPACE) {
	                    break;
	                  }

	                  mark("headerValue");
	                  state = S.HEADER_VALUE;
	                case S.HEADER_VALUE:
	                  if (c == CR) {
	                    dataCallback("headerValue", true);
	                    callback("headerEnd");
	                    state = S.HEADER_VALUE_ALMOST_DONE;
	                  }
	                  break;
	                case S.HEADER_VALUE_ALMOST_DONE:
	                  if (c != LF) {
	                    return i;
	                  }
	                  state = S.HEADER_FIELD_START;
	                  break;
	                case S.HEADERS_ALMOST_DONE:
	                  if (c != LF) {
	                    return i;
	                  }

	                  callback("headersEnd");
	                  state = S.PART_DATA_START;
	                  break;
	                case S.PART_DATA_START:
	                  state = S.PART_DATA;
	                  mark("partData");
	                case S.PART_DATA:
	                  prevIndex = index;

	                  if (index == 0) {
	                    // boyer-moore derrived algorithm to safely skip non-boundary data
	                    i += boundaryEnd;
	                    while (i < bufferLength && !(buffer[i] in boundaryChars)) {
	                      i += boundaryLength;
	                    }
	                    i -= boundaryEnd;
	                    c = buffer[i];
	                  }

	                  if (index < boundary.length) {
	                    if (boundary[index] == c) {
	                      if (index == 0) {
	                        dataCallback("partData", true);
	                      }
	                      index++;
	                    } else {
	                      index = 0;
	                    }
	                  } else if (index == boundary.length) {
	                    index++;
	                    if (c == CR) {
	                      // CR = part boundary
	                      flags |= F.PART_BOUNDARY;
	                    } else if (c == HYPHEN) {
	                      // HYPHEN = end boundary
	                      flags |= F.LAST_BOUNDARY;
	                    } else {
	                      index = 0;
	                    }
	                  } else if (index - 1 == boundary.length) {
	                    if (flags & F.PART_BOUNDARY) {
	                      index = 0;
	                      if (c == LF) {
	                        // unset the PART_BOUNDARY flag
	                        flags &= ~F.PART_BOUNDARY;
	                        callback("partEnd");
	                        callback("partBegin");
	                        state = S.HEADER_FIELD_START;
	                        break;
	                      }
	                    } else if (flags & F.LAST_BOUNDARY) {
	                      if (c == HYPHEN) {
	                        callback("partEnd");
	                        callback("end");
	                        state = S.END;
	                      } else {
	                        index = 0;
	                      }
	                    } else {
	                      index = 0;
	                    }
	                  }

	                  if (index > 0) {
	                    // when matching a possible boundary, keep a lookbehind reference
	                    // in case it turns out to be a false lead
	                    lookbehind[index - 1] = c;
	                  } else if (prevIndex > 0) {
	                    // if our boundary turned out to be rubbish, the captured lookbehind
	                    // belongs to partData
	                    callback("partData", lookbehind, 0, prevIndex);
	                    prevIndex = 0;
	                    mark("partData");

	                    // reconsider the current character even so it interrupted the sequence
	                    // it could be the beginning of a new sequence
	                    i--;
	                  }

	                  break;
	                case S.END:
	                  break;
	                default:
	                  return i;
	              }
	            }

	            dataCallback("headerField");
	            dataCallback("headerValue");
	            dataCallback("partData");

	            this.index = index;
	            this.state = state;
	            this.flags = flags;

	            return len;
	          };

	          MultipartParser.prototype.end = function () {
	            var callback = function (self, name) {
	              var callbackSymbol = "on" + name.substr(0, 1).toUpperCase() + name.substr(1);
	              if (callbackSymbol in self) {
	                self[callbackSymbol]();
	              }
	            };
	            if (this.state == S.HEADER_FIELD_START && this.index == 0 || this.state == S.PART_DATA && this.index == this.boundary.length) {
	              callback(this, "partEnd");
	              callback(this, "end");
	            } else if (this.state != S.END) {
	              return new Error("MultipartParser.end(): stream ended unexpectedly: " + this.explain());
	            }
	          };

	          MultipartParser.prototype.explain = function () {
	            return "state = " + MultipartParser.stateToString(this.state);
	          };


	          /***/
	        },
	        /* 82 */
	        /***/function (module, exports, __webpack_require__) {
	          var OctetParser = function (options) {
	            if (!(this instanceof OctetParser)) return new OctetParser(options);
	            EventEmitter.call(this);
	          };

	          var EventEmitter = __webpack_require__(87).EventEmitter,
	              util = __webpack_require__(11);

	          util.inherits(OctetParser, EventEmitter);

	          exports.OctetParser = OctetParser;

	          OctetParser.prototype.write = function (buffer) {
	            this.emit("data", buffer);
	            return buffer.length;
	          };

	          OctetParser.prototype.end = function () {
	            this.emit("end");
	          };


	          /***/
	        },
	        /* 83 */
	        /***/function (module, exports, __webpack_require__) {
	          var QuerystringParser = function (maxKeys) {
	            this.maxKeys = maxKeys;
	            this.buffer = "";
	          };

	          var require;if (global.GENTLY) require = GENTLY.hijack(__webpack_require__(73));

	          // This is a buffering parser, not quite as nice as the multipart one.
	          // If I find time I'll rewrite this to be fully streaming as well
	          var querystring = require("querystring");

	          ;
	          exports.QuerystringParser = QuerystringParser;

	          QuerystringParser.prototype.write = function (buffer) {
	            this.buffer += buffer.toString("ascii");
	            return buffer.length;
	          };

	          QuerystringParser.prototype.end = function () {
	            var fields = querystring.parse(this.buffer, "&", "=", { maxKeys: this.maxKeys });
	            for (var field in fields) {
	              this.onField(field, fields[field]);
	            }
	            this.buffer = "";

	            this.onEnd();
	          };



	          /***/
	        },
	        /* 84 */
	        /***/function (module, exports, __webpack_require__) {
	          /**
	           * Parse the given `str` and return milliseconds.
	           *
	           * @param {String} str
	           * @return {Number}
	           * @api private
	           */

	          var parse = function (str) {
	            var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
	            if (!match) return;
	            var n = parseFloat(match[1]);
	            var type = (match[2] || "ms").toLowerCase();
	            switch (type) {
	              case "years":
	              case "year":
	              case "y":
	                return n * y;
	              case "days":
	              case "day":
	              case "d":
	                return n * d;
	              case "hours":
	              case "hour":
	              case "h":
	                return n * h;
	              case "minutes":
	              case "minute":
	              case "m":
	                return n * m;
	              case "seconds":
	              case "second":
	              case "s":
	                return n * s;
	              case "ms":
	                return n;
	            }
	          };

	          /**
	           * Short format for `ms`.
	           *
	           * @param {Number} ms
	           * @return {String}
	           * @api private
	           */

	          var short = function (ms) {
	            if (ms >= d) return Math.round(ms / d) + "d";
	            if (ms >= h) return Math.round(ms / h) + "h";
	            if (ms >= m) return Math.round(ms / m) + "m";
	            if (ms >= s) return Math.round(ms / s) + "s";
	            return ms + "ms";
	          };

	          /**
	           * Long format for `ms`.
	           *
	           * @param {Number} ms
	           * @return {String}
	           * @api private
	           */

	          var long = function (ms) {
	            return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
	          };

	          /**
	           * Pluralization helper.
	           */

	          var plural = function (ms, n, name) {
	            if (ms < n) return;
	            if (ms < n * 1.5) return Math.floor(ms / n) + " " + name;
	            return Math.ceil(ms / n) + " " + name + "s";
	          }


	          /***/;

	          /**
	           * Helpers.
	           */

	          var s = 1000;
	          var m = s * 60;
	          var h = m * 60;
	          var d = h * 24;
	          var y = d * 365.25;

	          /**
	           * Parse or format the given `val`.
	           *
	           * Options:
	           *
	           *  - `long` verbose formatting [false]
	           *
	           * @param {String|Number} val
	           * @param {Object} options
	           * @return {String|Number}
	           * @api public
	           */

	          module.exports = function (val, options) {
	            options = options || {};
	            if ("string" == typeof val) return parse(val);
	            return options.long ? long(val) : short(val);
	          };
	        },
	        /* 85 */
	        /***/function (module, exports, __webpack_require__) {
	          // Load modules


	          // Declare internals

	          var internals = {};


	          exports.arrayToObject = function (source) {
	            var obj = {};
	            for (var i = 0, il = source.length; i < il; ++i) {
	              if (typeof source[i] !== "undefined") {
	                obj[i] = source[i];
	              }
	            }

	            return obj;
	          };


	          exports.clone = function (source) {
	            if (typeof source !== "object" || source === null) {
	              return source;
	            }

	            if (Buffer.isBuffer(source)) {
	              return source.toString();
	            }

	            var obj = Array.isArray(source) ? [] : {};
	            for (var i in source) {
	              if (source.hasOwnProperty(i)) {
	                obj[i] = exports.clone(source[i]);
	              }
	            }

	            return obj;
	          };


	          exports.merge = function (target, source) {
	            if (!source) {
	              return target;
	            }

	            var obj = exports.clone(target);

	            if (Array.isArray(source)) {
	              for (var i = 0, il = source.length; i < il; ++i) {
	                if (typeof source[i] !== "undefined") {
	                  if (typeof obj[i] === "object") {
	                    obj[i] = exports.merge(obj[i], source[i]);
	                  } else {
	                    obj[i] = source[i];
	                  }
	                }
	              }

	              return obj;
	            }

	            if (Array.isArray(obj)) {
	              obj = exports.arrayToObject(obj);
	            }

	            var keys = Object.keys(source);
	            for (var k = 0, kl = keys.length; k < kl; ++k) {
	              var key = keys[k];
	              var value = source[key];

	              if (value && typeof value === "object") {
	                if (!obj[key]) {
	                  obj[key] = exports.clone(value);
	                } else {
	                  obj[key] = exports.merge(obj[key], value);
	                }
	              } else {
	                obj[key] = value;
	              }
	            }

	            return obj;
	          };


	          exports.decode = function (str) {
	            try {
	              return decodeURIComponent(str.replace(/\+/g, " "));
	            } catch (e) {
	              return str;
	            }
	          };


	          exports.compact = function (obj) {
	            if (typeof obj !== "object") {
	              return obj;
	            }

	            var compacted = {};

	            for (var key in obj) {
	              if (obj.hasOwnProperty(key)) {
	                if (Array.isArray(obj[key])) {
	                  compacted[key] = [];

	                  for (var i = 0, l = obj[key].length; i < l; i++) {
	                    if (typeof obj[key][i] !== "undefined") {
	                      compacted[key].push(obj[key][i]);
	                    }
	                  }
	                } else {
	                  compacted[key] = exports.compact(obj[key]);
	                }
	              }
	            }

	            return compacted;
	          };


	          /***/
	        },
	        /* 86 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(9);

	          /***/
	        },
	        /* 87 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(10);

	          /***/
	        },
	        /* 88 */
	        /***/function (module, exports, __webpack_require__) {
	          var Duplex = function (options) {
	            if (!(this instanceof Duplex)) return new Duplex(options);

	            Readable.call(this, options);
	            Writable.call(this, options);

	            if (options && options.readable === false) this.readable = false;

	            if (options && options.writable === false) this.writable = false;

	            this.allowHalfOpen = true;
	            if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	            this.once("end", onend);
	          };

	          // the no-half-open enforcer
	          var onend = function () {
	            // if we allow half-open state, or if the writable side ended,
	            // then we're ok.
	            if (this.allowHalfOpen || this._writableState.ended) return;

	            // no more data can be written.
	            // But allow more writes to happen in this tick.
	            process.nextTick(this.end.bind(this));
	          };

	          var forEach = function (xs, f) {
	            for (var i = 0, l = xs.length; i < l; i++) {
	              f(xs[i], i);
	            }
	          }


	          /***/;

	          // Copyright Joyent, Inc. and other Node contributors.
	          //
	          // Permission is hereby granted, free of charge, to any person obtaining a
	          // copy of this software and associated documentation files (the
	          // "Software"), to deal in the Software without restriction, including
	          // without limitation the rights to use, copy, modify, merge, publish,
	          // distribute, sublicense, and/or sell copies of the Software, and to permit
	          // persons to whom the Software is furnished to do so, subject to the
	          // following conditions:
	          //
	          // The above copyright notice and this permission notice shall be included
	          // in all copies or substantial portions of the Software.
	          //
	          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	          // USE OR OTHER DEALINGS IN THE SOFTWARE.

	          // a duplex stream is just a stream that is both readable and writable.
	          // Since JS doesn't have multiple prototypal inheritance, this class
	          // prototypally inherits from Readable, and then parasitically from
	          // Writable.

	          module.exports = Duplex;

	          /*<replacement>*/
	          var objectKeys = Object.keys || function (obj) {
	            var keys = [];
	            for (var key in obj) keys.push(key);
	            return keys;
	          };
	          /*</replacement>*/


	          /*<replacement>*/
	          var util = __webpack_require__(89);
	          util.inherits = __webpack_require__(90);
	          /*</replacement>*/

	          var Readable = __webpack_require__(92);
	          var Writable = __webpack_require__(93);

	          util.inherits(Duplex, Readable);

	          forEach(objectKeys(Writable.prototype), function (method) {
	            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	          });
	        },
	        /* 89 */
	        /***/function (module, exports, __webpack_require__) {
	          // Copyright Joyent, Inc. and other Node contributors.
	          //
	          // Permission is hereby granted, free of charge, to any person obtaining a
	          // copy of this software and associated documentation files (the
	          // "Software"), to deal in the Software without restriction, including
	          // without limitation the rights to use, copy, modify, merge, publish,
	          // distribute, sublicense, and/or sell copies of the Software, and to permit
	          // persons to whom the Software is furnished to do so, subject to the
	          // following conditions:
	          //
	          // The above copyright notice and this permission notice shall be included
	          // in all copies or substantial portions of the Software.
	          //
	          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	          // USE OR OTHER DEALINGS IN THE SOFTWARE.

	          // NOTE: These type checking functions intentionally don't use `instanceof`
	          // because it is fragile and can be easily faked with `Object.create()`.
	          var isArray = function (ar) {
	            return Array.isArray(ar);
	          };

	          var isBoolean = function (arg) {
	            return typeof arg === "boolean";
	          };

	          var isNull = function (arg) {
	            return arg === null;
	          };

	          var isNullOrUndefined = function (arg) {
	            return arg == null;
	          };

	          var isNumber = function (arg) {
	            return typeof arg === "number";
	          };

	          var isString = function (arg) {
	            return typeof arg === "string";
	          };

	          var isSymbol = function (arg) {
	            return typeof arg === "symbol";
	          };

	          var isUndefined = function (arg) {
	            return arg === void 0;
	          };

	          var isRegExp = function (re) {
	            return isObject(re) && objectToString(re) === "[object RegExp]";
	          };

	          var isObject = function (arg) {
	            return typeof arg === "object" && arg !== null;
	          };

	          var isDate = function (d) {
	            return isObject(d) && objectToString(d) === "[object Date]";
	          };

	          var isError = function (e) {
	            return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
	          };

	          var isFunction = function (arg) {
	            return typeof arg === "function";
	          };

	          var isPrimitive = function (arg) {
	            return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
	            typeof arg === "undefined";
	          };

	          var isBuffer = function (arg) {
	            return Buffer.isBuffer(arg);
	          };

	          var objectToString = function (o) {
	            return Object.prototype.toString.call(o);
	          }

	          /***/;

	          exports.isArray = isArray;

	          exports.isBoolean = isBoolean;

	          exports.isNull = isNull;

	          exports.isNullOrUndefined = isNullOrUndefined;

	          exports.isNumber = isNumber;

	          exports.isString = isString;

	          exports.isSymbol = isSymbol;

	          exports.isUndefined = isUndefined;

	          exports.isRegExp = isRegExp;

	          exports.isObject = isObject;

	          exports.isDate = isDate;

	          exports.isError = isError;

	          exports.isFunction = isFunction;

	          exports.isPrimitive = isPrimitive;

	          exports.isBuffer = isBuffer;
	        },
	        /* 90 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = __webpack_require__(11).inherits


	          /***/;
	        },
	        /* 91 */
	        /***/function (module, exports, __webpack_require__) {
	          var DelayedStream = function () {
	            this.source = null;
	            this.dataSize = 0;
	            this.maxDataSize = 1024 * 1024;
	            this.pauseStream = true;

	            this._maxDataSizeExceeded = false;
	            this._released = false;
	            this._bufferedEvents = [];
	          };

	          var Stream = __webpack_require__(6).Stream;
	          var util = __webpack_require__(11);

	          module.exports = DelayedStream;
	          util.inherits(DelayedStream, Stream);

	          DelayedStream.create = function (source, options) {
	            var delayedStream = new this();

	            options = options || {};
	            for (var option in options) {
	              delayedStream[option] = options[option];
	            }

	            delayedStream.source = source;

	            var realEmit = source.emit;
	            source.emit = function () {
	              delayedStream._handleEmit(arguments);
	              return realEmit.apply(source, arguments);
	            };

	            source.on("error", function () {});
	            if (delayedStream.pauseStream) {
	              source.pause();
	            }

	            return delayedStream;
	          };

	          DelayedStream.prototype.__defineGetter__("readable", function () {
	            return this.source.readable;
	          });

	          DelayedStream.prototype.resume = function () {
	            if (!this._released) {
	              this.release();
	            }

	            this.source.resume();
	          };

	          DelayedStream.prototype.pause = function () {
	            this.source.pause();
	          };

	          DelayedStream.prototype.release = function () {
	            this._released = true;

	            this._bufferedEvents.forEach((function (args) {
	              this.emit.apply(this, args);
	            }).bind(this));
	            this._bufferedEvents = [];
	          };

	          DelayedStream.prototype.pipe = function () {
	            var r = Stream.prototype.pipe.apply(this, arguments);
	            this.resume();
	            return r;
	          };

	          DelayedStream.prototype._handleEmit = function (args) {
	            if (this._released) {
	              this.emit.apply(this, args);
	              return;
	            }

	            if (args[0] === "data") {
	              this.dataSize += args[1].length;
	              this._checkIfMaxDataSizeExceeded();
	            }

	            this._bufferedEvents.push(args);
	          };

	          DelayedStream.prototype._checkIfMaxDataSizeExceeded = function () {
	            if (this._maxDataSizeExceeded) {
	              return;
	            }

	            if (this.dataSize <= this.maxDataSize) {
	              return;
	            }

	            this._maxDataSizeExceeded = true;
	            var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
	            this.emit("error", new Error(message));
	          };


	          /***/
	        },
	        /* 92 */
	        /***/function (module, exports, __webpack_require__) {
	          var ReadableState = function (options, stream) {
	            options = options || {};

	            // the point at which it stops calling _read() to fill the buffer
	            // Note: 0 is a valid value, means "don't call _read preemptively ever"
	            var hwm = options.highWaterMark;
	            this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024;

	            // cast to ints.
	            this.highWaterMark = ~ ~this.highWaterMark;

	            this.buffer = [];
	            this.length = 0;
	            this.pipes = null;
	            this.pipesCount = 0;
	            this.flowing = false;
	            this.ended = false;
	            this.endEmitted = false;
	            this.reading = false;

	            // In streams that never have any data, and do push(null) right away,
	            // the consumer can miss the 'end' event if they do some I/O before
	            // consuming the stream.  So, we don't emit('end') until some reading
	            // happens.
	            this.calledRead = false;

	            // a flag to be able to tell if the onwrite cb is called immediately,
	            // or on a later tick.  We set this to true at first, becuase any
	            // actions that shouldn't happen until "later" should generally also
	            // not happen before the first write call.
	            this.sync = true;

	            // whenever we return null, then we set a flag to say
	            // that we're awaiting a 'readable' event emission.
	            this.needReadable = false;
	            this.emittedReadable = false;
	            this.readableListening = false;


	            // object stream flag. Used to make read(n) ignore n and to
	            // make all the buffer merging and length checks go away
	            this.objectMode = !!options.objectMode;

	            // Crypto is kind of old and crusty.  Historically, its default string
	            // encoding is 'binary' so we have to make this configurable.
	            // Everything else in the universe uses 'utf8', though.
	            this.defaultEncoding = options.defaultEncoding || "utf8";

	            // when piping, we only care about 'readable' events that happen
	            // after read()ing all the bytes and not getting any pushback.
	            this.ranOut = false;

	            // the number of writers that are awaiting a drain event in .pipe()s
	            this.awaitDrain = 0;

	            // if true, a maybeReadMore has been scheduled
	            this.readingMore = false;

	            this.decoder = null;
	            this.encoding = null;
	            if (options.encoding) {
	              if (!StringDecoder) StringDecoder = __webpack_require__(95).StringDecoder;
	              this.decoder = new StringDecoder(options.encoding);
	              this.encoding = options.encoding;
	            }
	          };

	          var Readable = function (options) {
	            if (!(this instanceof Readable)) return new Readable(options);

	            this._readableState = new ReadableState(options, this);

	            // legacy
	            this.readable = true;

	            Stream.call(this);
	          };

	          var readableAddChunk = function (stream, state, chunk, encoding, addToFront) {
	            var er = chunkInvalid(state, chunk);
	            if (er) {
	              stream.emit("error", er);
	            } else if (chunk === null || chunk === undefined) {
	              state.reading = false;
	              if (!state.ended) onEofChunk(stream, state);
	            } else if (state.objectMode || chunk && chunk.length > 0) {
	              if (state.ended && !addToFront) {
	                var e = new Error("stream.push() after EOF");
	                stream.emit("error", e);
	              } else if (state.endEmitted && addToFront) {
	                var e = new Error("stream.unshift() after end event");
	                stream.emit("error", e);
	              } else {
	                if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk);

	                // update the buffer info.
	                state.length += state.objectMode ? 1 : chunk.length;
	                if (addToFront) {
	                  state.buffer.unshift(chunk);
	                } else {
	                  state.reading = false;
	                  state.buffer.push(chunk);
	                }

	                if (state.needReadable) emitReadable(stream);

	                maybeReadMore(stream, state);
	              }
	            } else if (!addToFront) {
	              state.reading = false;
	            }

	            return needMoreData(state);
	          };





	          // if it's past the high water mark, we can push in some more.
	          // Also, if we have no data yet, we can stand some
	          // more bytes.  This is to work around cases where hwm=0,
	          // such as the repl.  Also, if the push() triggered a
	          // readable event, and the user called read(largeNumber) such that
	          // needReadable was set, then we ought to push more, so that another
	          // 'readable' event will be triggered.
	          var needMoreData = function (state) {
	            return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	          };

	          var roundUpToNextPowerOf2 = function (n) {
	            if (n >= MAX_HWM) {
	              n = MAX_HWM;
	            } else {
	              // Get the next highest power of 2
	              n--;
	              for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	              n++;
	            }
	            return n;
	          };

	          var howMuchToRead = function (n, state) {
	            if (state.length === 0 && state.ended) return 0;

	            if (state.objectMode) return n === 0 ? 0 : 1;

	            if (isNaN(n) || n === null) {
	              // only flow one buffer at a time
	              if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
	            }

	            if (n <= 0) return 0;

	            // If we're asking for more than the target buffer level,
	            // then raise the water mark.  Bump up to the next highest
	            // power of 2, to prevent increasing it excessively in tiny
	            // amounts.
	            if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n);

	            // don't have that much.  return null, unless we've ended.
	            if (n > state.length) {
	              if (!state.ended) {
	                state.needReadable = true;
	                return 0;
	              } else return state.length;
	            }

	            return n;
	          };

	          var chunkInvalid = function (state, chunk) {
	            var er = null;
	            if (!Buffer.isBuffer(chunk) && "string" !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode && !er) {
	              er = new TypeError("Invalid non-string/buffer chunk");
	            }
	            return er;
	          };

	          var onEofChunk = function (stream, state) {
	            if (state.decoder && !state.ended) {
	              var chunk = state.decoder.end();
	              if (chunk && chunk.length) {
	                state.buffer.push(chunk);
	                state.length += state.objectMode ? 1 : chunk.length;
	              }
	            }
	            state.ended = true;

	            // if we've ended and we have some data left, then emit
	            // 'readable' now to make sure it gets picked up.
	            if (state.length > 0) emitReadable(stream);else endReadable(stream);
	          };

	          // Don't emit readable right away in sync mode, because this can trigger
	          // another read() call => stack overflow.  This way, it might trigger
	          // a nextTick recursion warning, but that's not so bad.
	          var emitReadable = function (stream) {
	            var state = stream._readableState;
	            state.needReadable = false;
	            if (state.emittedReadable) return;

	            state.emittedReadable = true;
	            if (state.sync) process.nextTick(function () {
	              emitReadable_(stream);
	            });else emitReadable_(stream);
	          };

	          var emitReadable_ = function (stream) {
	            stream.emit("readable");
	          };




	          // at this point, the user has presumably seen the 'readable' event,
	          // and called read() to consume some data.  that may have triggered
	          // in turn another _read(n) call, in which case reading = true if
	          // it's in progress.
	          // However, if we're not ended, or reading, and the length < hwm,
	          // then go ahead and try to read some more preemptively.
	          var maybeReadMore = function (stream, state) {
	            if (!state.readingMore) {
	              state.readingMore = true;
	              process.nextTick(function () {
	                maybeReadMore_(stream, state);
	              });
	            }
	          };

	          var maybeReadMore_ = function (stream, state) {
	            var len = state.length;
	            while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	              stream.read(0);
	              if (len === state.length)
	                // didn't get any data, stop spinning.
	                break;else len = state.length;
	            }
	            state.readingMore = false;
	          };

	          var pipeOnDrain = function (src) {
	            return function () {
	              var dest = this;
	              var state = src._readableState;
	              state.awaitDrain--;
	              if (state.awaitDrain === 0) flow(src);
	            };
	          };

	          var flow = function (src) {
	            var write = function (dest, i, list) {
	              var written = dest.write(chunk);
	              if (false === written) {
	                state.awaitDrain++;
	              }
	            };

	            var state = src._readableState;
	            var chunk;
	            state.awaitDrain = 0;

	            while (state.pipesCount && null !== (chunk = src.read())) {
	              if (state.pipesCount === 1) write(state.pipes, 0, null);else forEach(state.pipes, write);

	              src.emit("data", chunk);

	              // if anyone needs a drain, then we have to wait for that.
	              if (state.awaitDrain > 0) return;
	            }

	            // if every destination was unpiped, either before entering this
	            // function, or in the while loop, then stop flowing.
	            //
	            // NB: This is a pretty rare edge case.
	            if (state.pipesCount === 0) {
	              state.flowing = false;

	              // if there were data event listeners added, then switch to old mode.
	              if (EE.listenerCount(src, "data") > 0) emitDataEvents(src);
	              return;
	            }

	            // at this point, no one needed a drain, so we just ran out of data
	            // on the next readable event, start it over again.
	            state.ranOut = true;
	          };

	          var pipeOnReadable = function () {
	            if (this._readableState.ranOut) {
	              this._readableState.ranOut = false;
	              flow(this);
	            }
	          };

	          var emitDataEvents = function (stream, startPaused) {
	            var state = stream._readableState;

	            if (state.flowing) {
	              // https://github.com/isaacs/readable-stream/issues/16
	              throw new Error("Cannot switch to old mode now.");
	            }

	            var paused = startPaused || false;
	            var readable = false;

	            // convert to an old-style stream.
	            stream.readable = true;
	            stream.pipe = Stream.prototype.pipe;
	            stream.on = stream.addListener = Stream.prototype.on;

	            stream.on("readable", function () {
	              readable = true;

	              var c;
	              while (!paused && null !== (c = stream.read())) stream.emit("data", c);

	              if (c === null) {
	                readable = false;
	                stream._readableState.needReadable = true;
	              }
	            });

	            stream.pause = function () {
	              paused = true;
	              this.emit("pause");
	            };

	            stream.resume = function () {
	              paused = false;
	              if (readable) process.nextTick(function () {
	                stream.emit("readable");
	              });else this.read(0);
	              this.emit("resume");
	            };

	            // now make it start, just in case it hadn't already.
	            stream.emit("readable");
	          };

	          // Pluck off n bytes from an array of buffers.
	          // Length is the combined lengths of all the buffers in the list.
	          var fromList = function (n, state) {
	            var list = state.buffer;
	            var length = state.length;
	            var stringMode = !!state.decoder;
	            var objectMode = !!state.objectMode;
	            var ret;

	            // nothing in the list, definitely empty.
	            if (list.length === 0) return null;

	            if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
	              // read it all, truncate the array.
	              if (stringMode) ret = list.join("");else ret = Buffer.concat(list, length);
	              list.length = 0;
	            } else {
	              // read just some of it.
	              if (n < list[0].length) {
	                // just take a part of the first list item.
	                // slice is the same for buffers and strings.
	                var buf = list[0];
	                ret = buf.slice(0, n);
	                list[0] = buf.slice(n);
	              } else if (n === list[0].length) {
	                // first list is a perfect match
	                ret = list.shift();
	              } else {
	                // complex case.
	                // we have enough to cover it, but it spans past the first buffer.
	                if (stringMode) ret = "";else ret = new Buffer(n);

	                var c = 0;
	                for (var i = 0, l = list.length; i < l && c < n; i++) {
	                  var buf = list[0];
	                  var cpy = Math.min(n - c, buf.length);

	                  if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

	                  if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

	                  c += cpy;
	                }
	              }
	            }

	            return ret;
	          };

	          var endReadable = function (stream) {
	            var state = stream._readableState;

	            // If we get here before consuming all the bytes, then that is a
	            // bug in node.  Should never happen.
	            if (state.length > 0) throw new Error("endReadable called on non-empty stream");

	            if (!state.endEmitted && state.calledRead) {
	              state.ended = true;
	              process.nextTick(function () {
	                // Check that we didn't get one last unshift.
	                if (!state.endEmitted && state.length === 0) {
	                  state.endEmitted = true;
	                  stream.readable = false;
	                  stream.emit("end");
	                }
	              });
	            }
	          };

	          var forEach = function (xs, f) {
	            for (var i = 0, l = xs.length; i < l; i++) {
	              f(xs[i], i);
	            }
	          };

	          var indexOf = function (xs, x) {
	            for (var i = 0, l = xs.length; i < l; i++) {
	              if (xs[i] === x) return i;
	            }
	            return -1;
	          }


	          /***/;

	          // Copyright Joyent, Inc. and other Node contributors.
	          //
	          // Permission is hereby granted, free of charge, to any person obtaining a
	          // copy of this software and associated documentation files (the
	          // "Software"), to deal in the Software without restriction, including
	          // without limitation the rights to use, copy, modify, merge, publish,
	          // distribute, sublicense, and/or sell copies of the Software, and to permit
	          // persons to whom the Software is furnished to do so, subject to the
	          // following conditions:
	          //
	          // The above copyright notice and this permission notice shall be included
	          // in all copies or substantial portions of the Software.
	          //
	          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	          // USE OR OTHER DEALINGS IN THE SOFTWARE.

	          module.exports = Readable;

	          /*<replacement>*/
	          var isArray = __webpack_require__(94);
	          /*</replacement>*/


	          /*<replacement>*/
	          var Buffer = __webpack_require__(86).Buffer;
	          /*</replacement>*/

	          Readable.ReadableState = ReadableState;

	          var EE = __webpack_require__(87).EventEmitter;

	          /*<replacement>*/
	          if (!EE.listenerCount) EE.listenerCount = function (emitter, type) {
	            return emitter.listeners(type).length;
	          };
	          /*</replacement>*/

	          var Stream = __webpack_require__(6);

	          /*<replacement>*/
	          var util = __webpack_require__(89);
	          util.inherits = __webpack_require__(90);
	          /*</replacement>*/

	          var StringDecoder;

	          util.inherits(Readable, Stream);

	          // Manually shove something into the read() buffer.
	          // This returns true if the highWaterMark has not been hit yet,
	          // similar to how Writable.write() returns true if you should
	          // write() some more.
	          Readable.prototype.push = function (chunk, encoding) {
	            var state = this._readableState;

	            if (typeof chunk === "string" && !state.objectMode) {
	              encoding = encoding || state.defaultEncoding;
	              if (encoding !== state.encoding) {
	                chunk = new Buffer(chunk, encoding);
	                encoding = "";
	              }
	            }

	            return readableAddChunk(this, state, chunk, encoding, false);
	          };

	          // Unshift should *always* be something directly out of read()
	          Readable.prototype.unshift = function (chunk) {
	            var state = this._readableState;
	            return readableAddChunk(this, state, chunk, "", true);
	          };

	          // backwards compatibility.
	          Readable.prototype.setEncoding = function (enc) {
	            if (!StringDecoder) StringDecoder = __webpack_require__(95).StringDecoder;
	            this._readableState.decoder = new StringDecoder(enc);
	            this._readableState.encoding = enc;
	          };

	          // Don't raise the hwm > 128MB
	          var MAX_HWM = 8388608;


	          // you can override either this method, or the async _read(n) below.
	          Readable.prototype.read = function (n) {
	            var state = this._readableState;
	            state.calledRead = true;
	            var nOrig = n;

	            if (typeof n !== "number" || n > 0) state.emittedReadable = false;

	            // if we're doing read(0) to trigger a readable event, but we
	            // already have a bunch of data in the buffer, then just trigger
	            // the 'readable' event and move on.
	            if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	              emitReadable(this);
	              return null;
	            }

	            n = howMuchToRead(n, state);

	            // if we've ended, and we're now clear, then finish it up.
	            if (n === 0 && state.ended) {
	              if (state.length === 0) endReadable(this);
	              return null;
	            }

	            // All the actual chunk generation logic needs to be
	            // *below* the call to _read.  The reason is that in certain
	            // synthetic stream cases, such as passthrough streams, _read
	            // may be a completely synchronous operation which may change
	            // the state of the read buffer, providing enough data when
	            // before there was *not* enough.
	            //
	            // So, the steps are:
	            // 1. Figure out what the state of things will be after we do
	            // a read from the buffer.
	            //
	            // 2. If that resulting state will trigger a _read, then call _read.
	            // Note that this may be asynchronous, or synchronous.  Yes, it is
	            // deeply ugly to write APIs this way, but that still doesn't mean
	            // that the Readable class should behave improperly, as streams are
	            // designed to be sync/async agnostic.
	            // Take note if the _read call is sync or async (ie, if the read call
	            // has returned yet), so that we know whether or not it's safe to emit
	            // 'readable' etc.
	            //
	            // 3. Actually pull the requested chunks out of the buffer and return.

	            // if we need a readable event, then we need to do some reading.
	            var doRead = state.needReadable;

	            // if we currently have less than the highWaterMark, then also read some
	            if (state.length - n <= state.highWaterMark) doRead = true;

	            // however, if we've ended, then there's no point, and if we're already
	            // reading, then it's unnecessary.
	            if (state.ended || state.reading) doRead = false;

	            if (doRead) {
	              state.reading = true;
	              state.sync = true;
	              // if the length is currently zero, then we *need* a readable event.
	              if (state.length === 0) state.needReadable = true;
	              // call internal read method
	              this._read(state.highWaterMark);
	              state.sync = false;
	            }

	            // If _read called its callback synchronously, then `reading`
	            // will be false, and we need to re-evaluate how much data we
	            // can return to the user.
	            if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

	            var ret;
	            if (n > 0) ret = fromList(n, state);else ret = null;

	            if (ret === null) {
	              state.needReadable = true;
	              n = 0;
	            }

	            state.length -= n;

	            // If we have nothing in the buffer, then we want to know
	            // as soon as we *do* get something into the buffer.
	            if (state.length === 0 && !state.ended) state.needReadable = true;

	            // If we happened to read() exactly the remaining amount in the
	            // buffer, and the EOF has been seen at this point, then make sure
	            // that we emit 'end' on the very next tick.
	            if (state.ended && !state.endEmitted && state.length === 0) endReadable(this);

	            return ret;
	          };

	          // abstract method.  to be overridden in specific implementation classes.
	          // call cb(er, data) where data is <= n in length.
	          // for virtual (non-string, non-buffer) streams, "length" is somewhat
	          // arbitrary, and perhaps not very meaningful.
	          Readable.prototype._read = function (n) {
	            this.emit("error", new Error("not implemented"));
	          };

	          Readable.prototype.pipe = function (dest, pipeOpts) {
	            var onunpipe = function (readable) {
	              if (readable !== src) return;
	              cleanup();
	            };

	            var onend = function () {
	              dest.end();
	            };

	            var cleanup = function () {
	              // cleanup event handlers once the pipe is broken
	              dest.removeListener("close", onclose);
	              dest.removeListener("finish", onfinish);
	              dest.removeListener("drain", ondrain);
	              dest.removeListener("error", onerror);
	              dest.removeListener("unpipe", onunpipe);
	              src.removeListener("end", onend);
	              src.removeListener("end", cleanup);

	              // if the reader is waiting for a drain event from this
	              // specific writer, then it would cause it to never start
	              // flowing again.
	              // So, if this is awaiting a drain, then we just call it now.
	              // If we don't know, then assume that we are waiting for one.
	              if (!dest._writableState || dest._writableState.needDrain) ondrain();
	            };

	            // if the dest has an error, then stop piping into it.
	            // however, don't suppress the throwing behavior for this.
	            var onerror = function (er) {
	              unpipe();
	              dest.removeListener("error", onerror);
	              if (EE.listenerCount(dest, "error") === 0) dest.emit("error", er);
	            };





	            // Both close and finish should trigger unpipe, but only once.
	            var onclose = function () {
	              dest.removeListener("finish", onfinish);
	              unpipe();
	            };

	            var onfinish = function () {
	              dest.removeListener("close", onclose);
	              unpipe();
	            };

	            var unpipe = function () {
	              src.unpipe(dest);
	            };

	            var src = this;
	            var state = this._readableState;

	            switch (state.pipesCount) {
	              case 0:
	                state.pipes = dest;
	                break;
	              case 1:
	                state.pipes = [state.pipes, dest];
	                break;
	              default:
	                state.pipes.push(dest);
	                break;
	            }
	            state.pipesCount += 1;

	            var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	            var endFn = doEnd ? onend : cleanup;
	            if (state.endEmitted) process.nextTick(endFn);else src.once("end", endFn);

	            dest.on("unpipe", onunpipe);


	            // when the dest drains, it reduces the awaitDrain counter
	            // on the source.  This would be more elegant with a .once()
	            // handler in flow(), but adding and removing repeatedly is
	            // too slow.
	            var ondrain = pipeOnDrain(src);
	            dest.on("drain", ondrain);

	            // This is a brutally ugly hack to make sure that our error handler
	            // is attached before any userland ones.  NEVER DO THIS.
	            if (!dest._events || !dest._events.error) dest.on("error", onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];
	            dest.once("close", onclose);
	            dest.once("finish", onfinish);

	            // tell the dest that it's being piped to
	            dest.emit("pipe", src);

	            // start the flow if it hasn't been started already.
	            if (!state.flowing) {
	              // the handler that waits for readable events after all
	              // the data gets sucked out in flow.
	              // This would be easier to follow with a .once() handler
	              // in flow(), but that is too slow.
	              this.on("readable", pipeOnReadable);

	              state.flowing = true;
	              process.nextTick(function () {
	                flow(src);
	              });
	            }

	            return dest;
	          };




	          Readable.prototype.unpipe = function (dest) {
	            var state = this._readableState;

	            // if we're not piping anywhere, then do nothing.
	            if (state.pipesCount === 0) return this;

	            // just one destination.  most common case.
	            if (state.pipesCount === 1) {
	              // passed in one, but it's not the right one.
	              if (dest && dest !== state.pipes) return this;

	              if (!dest) dest = state.pipes;

	              // got a match.
	              state.pipes = null;
	              state.pipesCount = 0;
	              this.removeListener("readable", pipeOnReadable);
	              state.flowing = false;
	              if (dest) dest.emit("unpipe", this);
	              return this;
	            }

	            // slow case. multiple pipe destinations.

	            if (!dest) {
	              // remove all.
	              var dests = state.pipes;
	              var len = state.pipesCount;
	              state.pipes = null;
	              state.pipesCount = 0;
	              this.removeListener("readable", pipeOnReadable);
	              state.flowing = false;

	              for (var i = 0; i < len; i++) dests[i].emit("unpipe", this);
	              return this;
	            }

	            // try to find the right one.
	            var i = indexOf(state.pipes, dest);
	            if (i === -1) return this;

	            state.pipes.splice(i, 1);
	            state.pipesCount -= 1;
	            if (state.pipesCount === 1) state.pipes = state.pipes[0];

	            dest.emit("unpipe", this);

	            return this;
	          };

	          // set up data events if they are asked for
	          // Ensure readable listeners eventually get something
	          Readable.prototype.on = function (ev, fn) {
	            var res = Stream.prototype.on.call(this, ev, fn);

	            if (ev === "data" && !this._readableState.flowing) emitDataEvents(this);

	            if (ev === "readable" && this.readable) {
	              var state = this._readableState;
	              if (!state.readableListening) {
	                state.readableListening = true;
	                state.emittedReadable = false;
	                state.needReadable = true;
	                if (!state.reading) {
	                  this.read(0);
	                } else if (state.length) {
	                  emitReadable(this, state);
	                }
	              }
	            }

	            return res;
	          };
	          Readable.prototype.addListener = Readable.prototype.on;

	          // pause() and resume() are remnants of the legacy readable stream API
	          // If the user uses them, then switch into old mode.
	          Readable.prototype.resume = function () {
	            emitDataEvents(this);
	            this.read(0);
	            this.emit("resume");
	          };

	          Readable.prototype.pause = function () {
	            emitDataEvents(this, true);
	            this.emit("pause");
	          };

	          // wrap an old-style stream as the async data source.
	          // This is *not* part of the readable stream interface.
	          // It is an ugly unfortunate mess of history.
	          Readable.prototype.wrap = function (stream) {
	            var state = this._readableState;
	            var paused = false;

	            var self = this;
	            stream.on("end", function () {
	              if (state.decoder && !state.ended) {
	                var chunk = state.decoder.end();
	                if (chunk && chunk.length) self.push(chunk);
	              }

	              self.push(null);
	            });

	            stream.on("data", function (chunk) {
	              if (state.decoder) chunk = state.decoder.write(chunk);
	              if (!chunk || !state.objectMode && !chunk.length) return;

	              var ret = self.push(chunk);
	              if (!ret) {
	                paused = true;
	                stream.pause();
	              }
	            });

	            // proxy all the other methods.
	            // important when wrapping filters and duplexes.
	            for (var i in stream) {
	              if (typeof stream[i] === "function" && typeof this[i] === "undefined") {
	                this[i] = (function (method) {
	                  return function () {
	                    return stream[method].apply(stream, arguments);
	                  };
	                })(i);
	              }
	            }

	            // proxy certain important events.
	            var events = ["error", "close", "destroy", "pause", "resume"];
	            forEach(events, function (ev) {
	              stream.on(ev, self.emit.bind(self, ev));
	            });

	            // when we try to consume some more bytes, simply unpause the
	            // underlying stream.
	            self._read = function (n) {
	              if (paused) {
	                paused = false;
	                stream.resume();
	              }
	            };

	            return self;
	          };



	          // exposed for testing purposes only.
	          Readable._fromList = fromList;
	        },
	        /* 93 */
	        /***/function (module, exports, __webpack_require__) {
	          var WriteReq = function (chunk, encoding, cb) {
	            this.chunk = chunk;
	            this.encoding = encoding;
	            this.callback = cb;
	          };

	          var WritableState = function (options, stream) {
	            options = options || {};

	            // the point at which write() starts returning false
	            // Note: 0 is a valid value, means that we always return false if
	            // the entire buffer is not flushed immediately on write()
	            var hwm = options.highWaterMark;
	            this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024;

	            // object stream flag to indicate whether or not this stream
	            // contains buffers or objects.
	            this.objectMode = !!options.objectMode;

	            // cast to ints.
	            this.highWaterMark = ~ ~this.highWaterMark;

	            this.needDrain = false;
	            // at the start of calling end()
	            this.ending = false;
	            // when end() has been called, and returned
	            this.ended = false;
	            // when 'finish' is emitted
	            this.finished = false;

	            // should we decode strings into buffers before passing to _write?
	            // this is here so that some node-core streams can optimize string
	            // handling at a lower level.
	            var noDecode = options.decodeStrings === false;
	            this.decodeStrings = !noDecode;

	            // Crypto is kind of old and crusty.  Historically, its default string
	            // encoding is 'binary' so we have to make this configurable.
	            // Everything else in the universe uses 'utf8', though.
	            this.defaultEncoding = options.defaultEncoding || "utf8";

	            // not an actual buffer we keep track of, but a measurement
	            // of how much we're waiting to get pushed to some underlying
	            // socket or file.
	            this.length = 0;

	            // a flag to see when we're in the middle of a write.
	            this.writing = false;

	            // a flag to be able to tell if the onwrite cb is called immediately,
	            // or on a later tick.  We set this to true at first, becuase any
	            // actions that shouldn't happen until "later" should generally also
	            // not happen before the first write call.
	            this.sync = true;

	            // a flag to know if we're processing previously buffered items, which
	            // may call the _write() callback in the same tick, so that we don't
	            // end up in an overlapped onwrite situation.
	            this.bufferProcessing = false;

	            // the callback that's passed to _write(chunk,cb)
	            this.onwrite = function (er) {
	              onwrite(stream, er);
	            };

	            // the callback that the user supplies to write(chunk,encoding,cb)
	            this.writecb = null;

	            // the amount that is being written when _write is called.
	            this.writelen = 0;

	            this.buffer = [];

	            // True if the error was already emitted and should not be thrown again
	            this.errorEmitted = false;
	          };

	          var Writable = function (options) {
	            var Duplex = __webpack_require__(88);

	            // Writable ctor is applied to Duplexes, though they're not
	            // instanceof Writable, they're instanceof Readable.
	            if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	            this._writableState = new WritableState(options, this);

	            // legacy.
	            this.writable = true;

	            Stream.call(this);
	          };

	          var writeAfterEnd = function (stream, state, cb) {
	            var er = new Error("write after end");
	            // TODO: defer error events consistently everywhere, not just the cb
	            stream.emit("error", er);
	            process.nextTick(function () {
	              cb(er);
	            });
	          };

	          // If we get something that is not a buffer, string, null, or undefined,
	          // and we're not in objectMode, then that's an error.
	          // Otherwise stream chunks are all considered to be of length=1, and the
	          // watermarks determine how many objects to keep in the buffer, rather than
	          // how many bytes or characters.
	          var validChunk = function (stream, state, chunk, cb) {
	            var valid = true;
	            if (!Buffer.isBuffer(chunk) && "string" !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {
	              var er = new TypeError("Invalid non-string/buffer chunk");
	              stream.emit("error", er);
	              process.nextTick(function () {
	                cb(er);
	              });
	              valid = false;
	            }
	            return valid;
	          };

	          var decodeChunk = function (state, chunk, encoding) {
	            if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
	              chunk = new Buffer(chunk, encoding);
	            }
	            return chunk;
	          };

	          // if we're already writing something, then just put this
	          // in the queue, and wait our turn.  Otherwise, call _write
	          // If we return false, then we need a drain event, so set that flag.
	          var writeOrBuffer = function (stream, state, chunk, encoding, cb) {
	            chunk = decodeChunk(state, chunk, encoding);
	            if (Buffer.isBuffer(chunk)) encoding = "buffer";
	            var len = state.objectMode ? 1 : chunk.length;

	            state.length += len;

	            var ret = state.length < state.highWaterMark;
	            // we must ensure that previous needDrain will not be reset to false.
	            if (!ret) state.needDrain = true;

	            if (state.writing) state.buffer.push(new WriteReq(chunk, encoding, cb));else doWrite(stream, state, len, chunk, encoding, cb);

	            return ret;
	          };

	          var doWrite = function (stream, state, len, chunk, encoding, cb) {
	            state.writelen = len;
	            state.writecb = cb;
	            state.writing = true;
	            state.sync = true;
	            stream._write(chunk, encoding, state.onwrite);
	            state.sync = false;
	          };

	          var onwriteError = function (stream, state, sync, er, cb) {
	            if (sync) process.nextTick(function () {
	              cb(er);
	            });else cb(er);

	            stream._writableState.errorEmitted = true;
	            stream.emit("error", er);
	          };

	          var onwriteStateUpdate = function (state) {
	            state.writing = false;
	            state.writecb = null;
	            state.length -= state.writelen;
	            state.writelen = 0;
	          };

	          var onwrite = function (stream, er) {
	            var state = stream._writableState;
	            var sync = state.sync;
	            var cb = state.writecb;

	            onwriteStateUpdate(state);

	            if (er) onwriteError(stream, state, sync, er, cb);else {
	              // Check if we're actually ready to finish, but don't emit yet
	              var finished = needFinish(stream, state);

	              if (!finished && !state.bufferProcessing && state.buffer.length) clearBuffer(stream, state);

	              if (sync) {
	                process.nextTick(function () {
	                  afterWrite(stream, state, finished, cb);
	                });
	              } else {
	                afterWrite(stream, state, finished, cb);
	              }
	            }
	          };

	          var afterWrite = function (stream, state, finished, cb) {
	            if (!finished) onwriteDrain(stream, state);
	            cb();
	            if (finished) finishMaybe(stream, state);
	          };

	          // Must force callback to be called on nextTick, so that we don't
	          // emit 'drain' before the write() consumer gets the 'false' return
	          // value, and has a chance to attach a 'drain' listener.
	          var onwriteDrain = function (stream, state) {
	            if (state.length === 0 && state.needDrain) {
	              state.needDrain = false;
	              stream.emit("drain");
	            }
	          };




	          // if there's something in the buffer waiting, then process it
	          var clearBuffer = function (stream, state) {
	            state.bufferProcessing = true;

	            for (var c = 0; c < state.buffer.length; c++) {
	              var entry = state.buffer[c];
	              var chunk = entry.chunk;
	              var encoding = entry.encoding;
	              var cb = entry.callback;
	              var len = state.objectMode ? 1 : chunk.length;

	              doWrite(stream, state, len, chunk, encoding, cb);

	              // if we didn't call the onwrite immediately, then
	              // it means that we need to wait until it does.
	              // also, that means that the chunk and cb are currently
	              // being processed, so move the buffer counter past them.
	              if (state.writing) {
	                c++;
	                break;
	              }
	            }

	            state.bufferProcessing = false;
	            if (c < state.buffer.length) state.buffer = state.buffer.slice(c);else state.buffer.length = 0;
	          };

	          var needFinish = function (stream, state) {
	            return state.ending && state.length === 0 && !state.finished && !state.writing;
	          };

	          var finishMaybe = function (stream, state) {
	            var need = needFinish(stream, state);
	            if (need) {
	              state.finished = true;
	              stream.emit("finish");
	            }
	            return need;
	          };

	          var endWritable = function (stream, state, cb) {
	            state.ending = true;
	            finishMaybe(stream, state);
	            if (cb) {
	              if (state.finished) process.nextTick(cb);else stream.once("finish", cb);
	            }
	            state.ended = true;
	          }


	          /***/;

	          // Copyright Joyent, Inc. and other Node contributors.
	          //
	          // Permission is hereby granted, free of charge, to any person obtaining a
	          // copy of this software and associated documentation files (the
	          // "Software"), to deal in the Software without restriction, including
	          // without limitation the rights to use, copy, modify, merge, publish,
	          // distribute, sublicense, and/or sell copies of the Software, and to permit
	          // persons to whom the Software is furnished to do so, subject to the
	          // following conditions:
	          //
	          // The above copyright notice and this permission notice shall be included
	          // in all copies or substantial portions of the Software.
	          //
	          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	          // USE OR OTHER DEALINGS IN THE SOFTWARE.

	          // A bit simpler than readable streams.
	          // Implement an async ._write(chunk, cb), and it'll handle all
	          // the drain event emission and buffering.

	          module.exports = Writable;

	          /*<replacement>*/
	          var Buffer = __webpack_require__(86).Buffer;
	          /*</replacement>*/

	          Writable.WritableState = WritableState;


	          /*<replacement>*/
	          var util = __webpack_require__(89);
	          util.inherits = __webpack_require__(90);
	          /*</replacement>*/


	          var Stream = __webpack_require__(6);

	          util.inherits(Writable, Stream);

	          // Otherwise people can pipe Writable streams, which is just wrong.
	          Writable.prototype.pipe = function () {
	            this.emit("error", new Error("Cannot pipe. Not readable."));
	          };


	          Writable.prototype.write = function (chunk, encoding, cb) {
	            var state = this._writableState;
	            var ret = false;

	            if (typeof encoding === "function") {
	              cb = encoding;
	              encoding = null;
	            }

	            if (Buffer.isBuffer(chunk)) encoding = "buffer";else if (!encoding) encoding = state.defaultEncoding;

	            if (typeof cb !== "function") cb = function () {};

	            if (state.ended) writeAfterEnd(this, state, cb);else if (validChunk(this, state, chunk, cb)) ret = writeOrBuffer(this, state, chunk, encoding, cb);

	            return ret;
	          };

	          Writable.prototype._write = function (chunk, encoding, cb) {
	            cb(new Error("not implemented"));
	          };

	          Writable.prototype.end = function (chunk, encoding, cb) {
	            var state = this._writableState;

	            if (typeof chunk === "function") {
	              cb = chunk;
	              chunk = null;
	              encoding = null;
	            } else if (typeof encoding === "function") {
	              cb = encoding;
	              encoding = null;
	            }

	            if (typeof chunk !== "undefined" && chunk !== null) this.write(chunk, encoding);

	            // ignore unnecessary end() calls.
	            if (!state.ending && !state.finished) endWritable(this, state, cb);
	          };
	        },
	        /* 94 */
	        /***/function (module, exports, __webpack_require__) {
	          module.exports = Array.isArray || function (arr) {
	            return Object.prototype.toString.call(arr) == "[object Array]";
	          };


	          /***/
	        },
	        /* 95 */
	        /***/function (module, exports, __webpack_require__) {
	          var assertEncoding = function (encoding) {
	            if (encoding && !isBufferEncoding(encoding)) {
	              throw new Error("Unknown encoding: " + encoding);
	            }
	          };

	          var passThroughWrite = function (buffer) {
	            return buffer.toString(this.encoding);
	          };

	          var utf16DetectIncompleteChar = function (buffer) {
	            this.charReceived = buffer.length % 2;
	            this.charLength = this.charReceived ? 2 : 0;
	          };

	          var base64DetectIncompleteChar = function (buffer) {
	            this.charReceived = buffer.length % 3;
	            this.charLength = this.charReceived ? 3 : 0;
	          }


	          /***/;

	          // Copyright Joyent, Inc. and other Node contributors.
	          //
	          // Permission is hereby granted, free of charge, to any person obtaining a
	          // copy of this software and associated documentation files (the
	          // "Software"), to deal in the Software without restriction, including
	          // without limitation the rights to use, copy, modify, merge, publish,
	          // distribute, sublicense, and/or sell copies of the Software, and to permit
	          // persons to whom the Software is furnished to do so, subject to the
	          // following conditions:
	          //
	          // The above copyright notice and this permission notice shall be included
	          // in all copies or substantial portions of the Software.
	          //
	          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	          // USE OR OTHER DEALINGS IN THE SOFTWARE.

	          var Buffer = __webpack_require__(86).Buffer;

	          var isBufferEncoding = Buffer.isEncoding || function (encoding) {
	            switch (encoding && encoding.toLowerCase()) {
	              case "hex":
	              case "utf8":
	              case "utf-8":
	              case "ascii":
	              case "binary":
	              case "base64":
	              case "ucs2":
	              case "ucs-2":
	              case "utf16le":
	              case "utf-16le":
	              case "raw":
	                return true;
	              default:
	                return false;
	            }
	          };


	          // StringDecoder provides an interface for efficiently splitting a series of
	          // buffers into a series of JS strings without breaking apart multi-byte
	          // characters. CESU-8 is handled as part of the UTF-8 encoding.
	          //
	          // @TODO Handling all encodings inside a single object makes it very difficult
	          // to reason about this code, so it should be split up in the future.
	          // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	          // points as used by CESU-8.
	          var StringDecoder = exports.StringDecoder = function (encoding) {
	            this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
	            assertEncoding(encoding);
	            switch (this.encoding) {
	              case "utf8":
	                // CESU-8 represents each of Surrogate Pair by 3-bytes
	                this.surrogateSize = 3;
	                break;
	              case "ucs2":
	              case "utf16le":
	                // UTF-16 represents each of Surrogate Pair by 2-bytes
	                this.surrogateSize = 2;
	                this.detectIncompleteChar = utf16DetectIncompleteChar;
	                break;
	              case "base64":
	                // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	                this.surrogateSize = 3;
	                this.detectIncompleteChar = base64DetectIncompleteChar;
	                break;
	              default:
	                this.write = passThroughWrite;
	                return;
	            }

	            // Enough space to store all bytes of a single character. UTF-8 needs 4
	            // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	            this.charBuffer = new Buffer(6);
	            // Number of bytes received for the current incomplete multi-byte character.
	            this.charReceived = 0;
	            // Number of bytes expected for the current incomplete multi-byte character.
	            this.charLength = 0;
	          };


	          // write decodes the given buffer and returns it as JS string that is
	          // guaranteed to not contain any partial multi-byte characters. Any partial
	          // character found at the end of the buffer is buffered up, and will be
	          // returned when calling write again with the remaining bytes.
	          //
	          // Note: Converting a Buffer containing an orphan surrogate to a String
	          // currently works, but converting a String to a Buffer (via `new Buffer`, or
	          // Buffer#write) will replace incomplete surrogates with the unicode
	          // replacement character. See https://codereview.chromium.org/121173009/ .
	          StringDecoder.prototype.write = function (buffer) {
	            var charStr = "";
	            // if our last write ended with an incomplete multibyte character
	            while (this.charLength) {
	              // determine how many remaining bytes this buffer has to offer for this char
	              var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;

	              // add the new bytes to the char buffer
	              buffer.copy(this.charBuffer, this.charReceived, 0, available);
	              this.charReceived += available;

	              if (this.charReceived < this.charLength) {
	                // still not enough chars in this buffer? wait for more ...
	                return "";
	              }

	              // remove bytes belonging to the current character from the buffer
	              buffer = buffer.slice(available, buffer.length);

	              // get the character that was split
	              charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	              // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	              var charCode = charStr.charCodeAt(charStr.length - 1);
	              if (charCode >= 55296 && charCode <= 56319) {
	                this.charLength += this.surrogateSize;
	                charStr = "";
	                continue;
	              }
	              this.charReceived = this.charLength = 0;

	              // if there are no more bytes in this buffer, just emit our char
	              if (buffer.length === 0) {
	                return charStr;
	              }
	              break;
	            }

	            // determine and set charLength / charReceived
	            this.detectIncompleteChar(buffer);

	            var end = buffer.length;
	            if (this.charLength) {
	              // buffer the incomplete character bytes we got
	              buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	              end -= this.charReceived;
	            }

	            charStr += buffer.toString(this.encoding, 0, end);

	            var end = charStr.length - 1;
	            var charCode = charStr.charCodeAt(end);
	            // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	            if (charCode >= 55296 && charCode <= 56319) {
	              var size = this.surrogateSize;
	              this.charLength += size;
	              this.charReceived += size;
	              this.charBuffer.copy(this.charBuffer, size, 0, size);
	              buffer.copy(this.charBuffer, 0, 0, size);
	              return charStr.substring(0, end);
	            }

	            // or just emit the charStr
	            return charStr;
	          };

	          // detectIncompleteChar determines if there is an incomplete UTF-8 character at
	          // the end of the given buffer. If so, it sets this.charLength to the byte
	          // length that character, and sets this.charReceived to the number of bytes
	          // that are available for this character.
	          StringDecoder.prototype.detectIncompleteChar = function (buffer) {
	            // determine how many bytes we have to check at the end of this buffer
	            var i = buffer.length >= 3 ? 3 : buffer.length;

	            // Figure out if one of the last i bytes of our buffer announces an
	            // incomplete char.
	            for (; i > 0; i--) {
	              var c = buffer[buffer.length - i];

	              // See http://en.wikipedia.org/wiki/UTF-8#Description

	              // 110XXXXX
	              if (i == 1 && c >> 5 == 6) {
	                this.charLength = 2;
	                break;
	              }

	              // 1110XXXX
	              if (i <= 2 && c >> 4 == 14) {
	                this.charLength = 3;
	                break;
	              }

	              // 11110XXX
	              if (i <= 3 && c >> 3 == 30) {
	                this.charLength = 4;
	                break;
	              }
	            }
	            this.charReceived = i;
	          };

	          StringDecoder.prototype.end = function (buffer) {
	            var res = "";
	            if (buffer && buffer.length) res = this.write(buffer);

	            if (this.charReceived) {
	              var cr = this.charReceived;
	              var buf = this.charBuffer;
	              var enc = this.encoding;
	              res += buf.slice(0, cr).toString(enc);
	            }

	            return res;
	          };
	        }
	        /******/]);
	        /************************************************************************/
	        /******/
	        // ignore
	        /* 15 */ /* functions... */ /* functions... */
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(9).Buffer, __webpack_require__(11), (function () {
	        return this;
	      })(), __webpack_require__(12).setImmediate);

	      /***/
	    },
	    /* 1 */
	    /***/function (module, exports, __webpack_require__) {
	      var Url = function () {
	        this.protocol = null;
	        this.slashes = null;
	        this.auth = null;
	        this.host = null;
	        this.port = null;
	        this.hostname = null;
	        this.hash = null;
	        this.search = null;
	        this.query = null;
	        this.pathname = null;
	        this.path = null;
	        this.href = null;
	      };

	      var urlParse = function (url, parseQueryString, slashesDenoteHost) {
	        if (url && isObject(url) && url instanceof Url) return url;

	        var u = new Url();
	        u.parse(url, parseQueryString, slashesDenoteHost);
	        return u;
	      };

	      // format a parsed object into a url string
	      var urlFormat = function (obj) {
	        // ensure it's an object, and not a string url.
	        // If it's an obj, this is a no-op.
	        // this way, you can call url_format() on strings
	        // to clean up potentially wonky urls.
	        if (isString(obj)) obj = urlParse(obj);
	        if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	        return obj.format();
	      };

	      var urlResolve = function (source, relative) {
	        return urlParse(source, false, true).resolve(relative);
	      };

	      var urlResolveObject = function (source, relative) {
	        if (!source) return relative;
	        return urlParse(source, false, true).resolveObject(relative);
	      };

	      var isString = function (arg) {
	        return typeof arg === "string";
	      };

	      var isObject = function (arg) {
	        return typeof arg === "object" && arg !== null;
	      };

	      var isNull = function (arg) {
	        return arg === null;
	      };

	      var isNullOrUndefined = function (arg) {
	        return arg == null;
	      }


	      /***/;

	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.

	      var punycode = __webpack_require__(18);

	      exports.parse = urlParse;
	      exports.resolve = urlResolve;
	      exports.resolveObject = urlResolveObject;
	      exports.format = urlFormat;

	      exports.Url = Url;

	      // Reference: RFC 3986, RFC 1808, RFC 2396

	      // define these here so at least they only have to be
	      // compiled once on the first module load.
	      var protocolPattern = /^([a-z0-9.+-]+:)/i,
	          portPattern = /:[0-9]*$/,



	      // RFC 2396: characters reserved for delimiting URLs.
	      // We actually just auto-escape these.
	      delims = ["<", ">", "\"", "`", " ", "\r", "\n", "\t"],



	      // RFC 2396: characters not allowed for various reasons.
	      unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims),



	      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	      autoEscape = ["'"].concat(unwise),


	      // Characters that are never ever allowed in a hostname.
	      // Note that any invalid chars are also handled, but these
	      // are the ones that are *expected* to be seen, so we fast-path
	      // them.
	      nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape),
	          hostEndingChars = ["/", "?", "#"],
	          hostnameMaxLen = 255,
	          hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	          hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,


	      // protocols that can allow "unsafe" and "unwise" chars.
	      unsafeProtocol = {
	        javascript: true,
	        "javascript:": true
	      },


	      // protocols that never have a hostname.
	      hostlessProtocol = {
	        javascript: true,
	        "javascript:": true
	      },


	      // protocols that always contain a // bit.
	      slashedProtocol = {
	        http: true,
	        https: true,
	        ftp: true,
	        gopher: true,
	        file: true,
	        "http:": true,
	        "https:": true,
	        "ftp:": true,
	        "gopher:": true,
	        "file:": true
	      },
	          querystring = __webpack_require__(17);

	      Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
	        if (!isString(url)) {
	          throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	        }

	        var rest = url;

	        // trim before proceeding.
	        // This is to support parse stuff like "  http://foo.com  \n"
	        rest = rest.trim();

	        var proto = protocolPattern.exec(rest);
	        if (proto) {
	          proto = proto[0];
	          var lowerProto = proto.toLowerCase();
	          this.protocol = lowerProto;
	          rest = rest.substr(proto.length);
	        }

	        // figure out if it's got a host
	        // user@server is *always* interpreted as a hostname, and url
	        // resolution will treat //foo/bar as host=foo,path=bar because that's
	        // how the browser resolves relative URLs.
	        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	          var slashes = rest.substr(0, 2) === "//";
	          if (slashes && !(proto && hostlessProtocol[proto])) {
	            rest = rest.substr(2);
	            this.slashes = true;
	          }
	        }

	        if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
	          // there's a hostname.
	          // the first instance of /, ?, ;, or # ends the host.
	          //
	          // If there is an @ in the hostname, then non-host chars *are* allowed
	          // to the left of the last @ sign, unless some host-ending character
	          // comes *before* the @-sign.
	          // URLs are obnoxious.
	          //
	          // ex:
	          // http://a@b@c/ => user:a@b host:c
	          // http://a@b?@c => user:a host:c path:/?@c

	          // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	          // Review our test case against browsers more comprehensively.

	          // find the first instance of any hostEndingChars
	          var hostEnd = -1;
	          for (var i = 0; i < hostEndingChars.length; i++) {
	            var hec = rest.indexOf(hostEndingChars[i]);
	            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
	          }

	          // at this point, either we have an explicit point where the
	          // auth portion cannot go past, or the last @ char is the decider.
	          var auth, atSign;
	          if (hostEnd === -1) {
	            // atSign can be anywhere.
	            atSign = rest.lastIndexOf("@");
	          } else {
	            // atSign must be in auth portion.
	            // http://a@b/c@d => host:b auth:a path:/c@d
	            atSign = rest.lastIndexOf("@", hostEnd);
	          }

	          // Now we have a portion which is definitely the auth.
	          // Pull that off.
	          if (atSign !== -1) {
	            auth = rest.slice(0, atSign);
	            rest = rest.slice(atSign + 1);
	            this.auth = decodeURIComponent(auth);
	          }

	          // the host is the remaining to the left of the first non-host char
	          hostEnd = -1;
	          for (var i = 0; i < nonHostChars.length; i++) {
	            var hec = rest.indexOf(nonHostChars[i]);
	            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
	          }
	          // if we still have not hit it, then the entire thing is a host.
	          if (hostEnd === -1) hostEnd = rest.length;

	          this.host = rest.slice(0, hostEnd);
	          rest = rest.slice(hostEnd);

	          // pull out port.
	          this.parseHost();

	          // we've indicated that there is a hostname,
	          // so even if it's empty, it has to be present.
	          this.hostname = this.hostname || "";

	          // if hostname begins with [ and ends with ]
	          // assume that it's an IPv6 address.
	          var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";

	          // validate a little.
	          if (!ipv6Hostname) {
	            var hostparts = this.hostname.split(/\./);
	            for (var i = 0, l = hostparts.length; i < l; i++) {
	              var part = hostparts[i];
	              if (!part) continue;
	              if (!part.match(hostnamePartPattern)) {
	                var newpart = "";
	                for (var j = 0, k = part.length; j < k; j++) {
	                  if (part.charCodeAt(j) > 127) {
	                    // we replace non-ASCII char with a temporary placeholder
	                    // we need this to make sure size of hostname is not
	                    // broken by replacing non-ASCII by nothing
	                    newpart += "x";
	                  } else {
	                    newpart += part[j];
	                  }
	                }
	                // we test again with ASCII char only
	                if (!newpart.match(hostnamePartPattern)) {
	                  var validParts = hostparts.slice(0, i);
	                  var notHost = hostparts.slice(i + 1);
	                  var bit = part.match(hostnamePartStart);
	                  if (bit) {
	                    validParts.push(bit[1]);
	                    notHost.unshift(bit[2]);
	                  }
	                  if (notHost.length) {
	                    rest = "/" + notHost.join(".") + rest;
	                  }
	                  this.hostname = validParts.join(".");
	                  break;
	                }
	              }
	            }
	          }

	          if (this.hostname.length > hostnameMaxLen) {
	            this.hostname = "";
	          } else {
	            // hostnames are always lower case.
	            this.hostname = this.hostname.toLowerCase();
	          }

	          if (!ipv6Hostname) {
	            // IDNA Support: Returns a puny coded representation of "domain".
	            // It only converts the part of the domain name that
	            // has non ASCII characters. I.e. it dosent matter if
	            // you call it with a domain that already is in ASCII.
	            var domainArray = this.hostname.split(".");
	            var newOut = [];
	            for (var i = 0; i < domainArray.length; ++i) {
	              var s = domainArray[i];
	              newOut.push(s.match(/[^A-Za-z0-9_-]/) ? "xn--" + punycode.encode(s) : s);
	            }
	            this.hostname = newOut.join(".");
	          }

	          var p = this.port ? ":" + this.port : "";
	          var h = this.hostname || "";
	          this.host = h + p;
	          this.href += this.host;

	          // strip [ and ] from the hostname
	          // the host field still retains them, though
	          if (ipv6Hostname) {
	            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	            if (rest[0] !== "/") {
	              rest = "/" + rest;
	            }
	          }
	        }

	        // now rest is set to the post-host stuff.
	        // chop off any delim chars.
	        if (!unsafeProtocol[lowerProto]) {
	          // First, make 100% sure that any "autoEscape" chars get
	          // escaped, even if encodeURIComponent doesn't think they
	          // need to be.
	          for (var i = 0, l = autoEscape.length; i < l; i++) {
	            var ae = autoEscape[i];
	            var esc = encodeURIComponent(ae);
	            if (esc === ae) {
	              esc = escape(ae);
	            }
	            rest = rest.split(ae).join(esc);
	          }
	        }


	        // chop off from the tail first.
	        var hash = rest.indexOf("#");
	        if (hash !== -1) {
	          // got a fragment string.
	          this.hash = rest.substr(hash);
	          rest = rest.slice(0, hash);
	        }
	        var qm = rest.indexOf("?");
	        if (qm !== -1) {
	          this.search = rest.substr(qm);
	          this.query = rest.substr(qm + 1);
	          if (parseQueryString) {
	            this.query = querystring.parse(this.query);
	          }
	          rest = rest.slice(0, qm);
	        } else if (parseQueryString) {
	          // no query string, but parseQueryString still requested
	          this.search = "";
	          this.query = {};
	        }
	        if (rest) this.pathname = rest;
	        if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
	          this.pathname = "/";
	        }

	        //to support http.request
	        if (this.pathname || this.search) {
	          var p = this.pathname || "";
	          var s = this.search || "";
	          this.path = p + s;
	        }

	        // finally, reconstruct the href based on what has been validated.
	        this.href = this.format();
	        return this;
	      };

	      Url.prototype.format = function () {
	        var auth = this.auth || "";
	        if (auth) {
	          auth = encodeURIComponent(auth);
	          auth = auth.replace(/%3A/i, ":");
	          auth += "@";
	        }

	        var protocol = this.protocol || "",
	            pathname = this.pathname || "",
	            hash = this.hash || "",
	            host = false,
	            query = "";

	        if (this.host) {
	          host = auth + this.host;
	        } else if (this.hostname) {
	          host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
	          if (this.port) {
	            host += ":" + this.port;
	          }
	        }

	        if (this.query && isObject(this.query) && Object.keys(this.query).length) {
	          query = querystring.stringify(this.query);
	        }

	        var search = this.search || query && "?" + query || "";

	        if (protocol && protocol.substr(-1) !== ":") protocol += ":";

	        // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	        // unless they had them to begin with.
	        if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
	          host = "//" + (host || "");
	          if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
	        } else if (!host) {
	          host = "";
	        }

	        if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
	        if (search && search.charAt(0) !== "?") search = "?" + search;

	        pathname = pathname.replace(/[?#]/g, function (match) {
	          return encodeURIComponent(match);
	        });
	        search = search.replace("#", "%23");

	        return protocol + host + pathname + search + hash;
	      };

	      Url.prototype.resolve = function (relative) {
	        return this.resolveObject(urlParse(relative, false, true)).format();
	      };

	      Url.prototype.resolveObject = function (relative) {
	        if (isString(relative)) {
	          var rel = new Url();
	          rel.parse(relative, false, true);
	          relative = rel;
	        }

	        var result = new Url();
	        Object.keys(this).forEach(function (k) {
	          result[k] = this[k];
	        }, this);

	        // hash is always overridden, no matter what.
	        // even href="" will remove it.
	        result.hash = relative.hash;

	        // if the relative url is empty, then there's nothing left to do here.
	        if (relative.href === "") {
	          result.href = result.format();
	          return result;
	        }

	        // hrefs like //foo/bar always cut to the protocol.
	        if (relative.slashes && !relative.protocol) {
	          // take everything except the protocol from relative
	          Object.keys(relative).forEach(function (k) {
	            if (k !== "protocol") result[k] = relative[k];
	          });

	          //urlParse appends trailing / to urls like http://www.example.com
	          if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
	            result.path = result.pathname = "/";
	          }

	          result.href = result.format();
	          return result;
	        }

	        if (relative.protocol && relative.protocol !== result.protocol) {
	          // if it's a known url protocol, then changing
	          // the protocol does weird things
	          // first, if it's not file:, then we MUST have a host,
	          // and if there was a path
	          // to begin with, then we MUST have a path.
	          // if it is file:, then the host is dropped,
	          // because that's known to be hostless.
	          // anything else is assumed to be absolute.
	          if (!slashedProtocol[relative.protocol]) {
	            Object.keys(relative).forEach(function (k) {
	              result[k] = relative[k];
	            });
	            result.href = result.format();
	            return result;
	          }

	          result.protocol = relative.protocol;
	          if (!relative.host && !hostlessProtocol[relative.protocol]) {
	            var relPath = (relative.pathname || "").split("/");
	            while (relPath.length && !(relative.host = relPath.shift()));
	            if (!relative.host) relative.host = "";
	            if (!relative.hostname) relative.hostname = "";
	            if (relPath[0] !== "") relPath.unshift("");
	            if (relPath.length < 2) relPath.unshift("");
	            result.pathname = relPath.join("/");
	          } else {
	            result.pathname = relative.pathname;
	          }
	          result.search = relative.search;
	          result.query = relative.query;
	          result.host = relative.host || "";
	          result.auth = relative.auth;
	          result.hostname = relative.hostname || relative.host;
	          result.port = relative.port;
	          // to support http.request
	          if (result.pathname || result.search) {
	            var p = result.pathname || "";
	            var s = result.search || "";
	            result.path = p + s;
	          }
	          result.slashes = result.slashes || relative.slashes;
	          result.href = result.format();
	          return result;
	        }

	        var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/",
	            isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/",
	            mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
	            removeAllDots = mustEndAbs,
	            srcPath = result.pathname && result.pathname.split("/") || [],
	            relPath = relative.pathname && relative.pathname.split("/") || [],
	            psychotic = result.protocol && !slashedProtocol[result.protocol];

	        // if the url is a non-slashed url, then relative
	        // links like ../.. should be able
	        // to crawl up to the hostname, as well.  This is strange.
	        // result.protocol has already been set by now.
	        // Later on, put the first path part into the host field.
	        if (psychotic) {
	          result.hostname = "";
	          result.port = null;
	          if (result.host) {
	            if (srcPath[0] === "") srcPath[0] = result.host;else srcPath.unshift(result.host);
	          }
	          result.host = "";
	          if (relative.protocol) {
	            relative.hostname = null;
	            relative.port = null;
	            if (relative.host) {
	              if (relPath[0] === "") relPath[0] = relative.host;else relPath.unshift(relative.host);
	            }
	            relative.host = null;
	          }
	          mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
	        }

	        if (isRelAbs) {
	          // it's absolute.
	          result.host = relative.host || relative.host === "" ? relative.host : result.host;
	          result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
	          result.search = relative.search;
	          result.query = relative.query;
	          srcPath = relPath;
	          // fall through to the dot-handling below.
	        } else if (relPath.length) {
	          // it's relative
	          // throw away the existing file, and take the new path instead.
	          if (!srcPath) srcPath = [];
	          srcPath.pop();
	          srcPath = srcPath.concat(relPath);
	          result.search = relative.search;
	          result.query = relative.query;
	        } else if (!isNullOrUndefined(relative.search)) {
	          // just pull out the search.
	          // like href='?foo'.
	          // Put this after the other two cases because it simplifies the booleans
	          if (psychotic) {
	            result.hostname = result.host = srcPath.shift();
	            //occationaly the auth can get stuck only in host
	            //this especialy happens in cases like
	            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
	            if (authInHost) {
	              result.auth = authInHost.shift();
	              result.host = result.hostname = authInHost.shift();
	            }
	          }
	          result.search = relative.search;
	          result.query = relative.query;
	          //to support http.request
	          if (!isNull(result.pathname) || !isNull(result.search)) {
	            result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
	          }
	          result.href = result.format();
	          return result;
	        }

	        if (!srcPath.length) {
	          // no path at all.  easy.
	          // we've already handled the other stuff above.
	          result.pathname = null;
	          //to support http.request
	          if (result.search) {
	            result.path = "/" + result.search;
	          } else {
	            result.path = null;
	          }
	          result.href = result.format();
	          return result;
	        }

	        // if a url ENDs in . or .., then it must get a trailing slash.
	        // however, if it ends in anything else non-slashy,
	        // then it must NOT get a trailing slash.
	        var last = srcPath.slice(-1)[0];
	        var hasTrailingSlash = (result.host || relative.host) && (last === "." || last === "..") || last === "";

	        // strip single dots, resolve double dots to parent dir
	        // if the path tries to go above the root, `up` ends up > 0
	        var up = 0;
	        for (var i = srcPath.length; i >= 0; i--) {
	          last = srcPath[i];
	          if (last == ".") {
	            srcPath.splice(i, 1);
	          } else if (last === "..") {
	            srcPath.splice(i, 1);
	            up++;
	          } else if (up) {
	            srcPath.splice(i, 1);
	            up--;
	          }
	        }

	        // if the path is allowed to go above the root, restore leading ..s
	        if (!mustEndAbs && !removeAllDots) {
	          for (; up--; up) {
	            srcPath.unshift("..");
	          }
	        }

	        if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
	          srcPath.unshift("");
	        }

	        if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
	          srcPath.push("");
	        }

	        var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";

	        // put the host back
	        if (psychotic) {
	          result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
	          //occationaly the auth can get stuck only in host
	          //this especialy happens in cases like
	          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
	          if (authInHost) {
	            result.auth = authInHost.shift();
	            result.host = result.hostname = authInHost.shift();
	          }
	        }

	        mustEndAbs = mustEndAbs || result.host && srcPath.length;

	        if (mustEndAbs && !isAbsolute) {
	          srcPath.unshift("");
	        }

	        if (!srcPath.length) {
	          result.pathname = null;
	          result.path = null;
	        } else {
	          result.pathname = srcPath.join("/");
	        }

	        //to support request.http
	        if (!isNull(result.pathname) || !isNull(result.search)) {
	          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
	        }
	        result.auth = relative.auth || result.auth;
	        result.slashes = result.slashes || relative.slashes;
	        result.href = result.format();
	        return result;
	      };

	      Url.prototype.parseHost = function () {
	        var host = this.host;
	        var port = portPattern.exec(host);
	        if (port) {
	          port = port[0];
	          if (port !== ":") {
	            this.port = port.substr(1);
	          }
	          host = host.substr(0, host.length - port.length);
	        }
	        if (host) this.hostname = host;
	      };
	    },
	    /* 2 */
	    /***/function (module, exports, __webpack_require__) {



	      // old-style streams.  Note that the pipe method (the only relevant
	      // part of this class) is overridden in the Readable class.

	      var Stream = function () {
	        EE.call(this);
	      };

	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.

	      module.exports = Stream;

	      var EE = __webpack_require__(10).EventEmitter;
	      var inherits = __webpack_require__(28);

	      inherits(Stream, EE);
	      Stream.Readable = __webpack_require__(20);
	      Stream.Writable = __webpack_require__(21);
	      Stream.Duplex = __webpack_require__(22);
	      Stream.Transform = __webpack_require__(19);
	      Stream.PassThrough = __webpack_require__(23);

	      // Backwards-compat with node 0.4.x
	      Stream.Stream = Stream;

	      Stream.prototype.pipe = function (dest, options) {
	        var ondata = function (chunk) {
	          if (dest.writable) {
	            if (false === dest.write(chunk) && source.pause) {
	              source.pause();
	            }
	          }
	        };

	        var ondrain = function () {
	          if (source.readable && source.resume) {
	            source.resume();
	          }
	        };

	        var onend = function () {
	          if (didOnEnd) return;
	          didOnEnd = true;

	          dest.end();
	        };

	        var onclose = function () {
	          if (didOnEnd) return;
	          didOnEnd = true;

	          if (typeof dest.destroy === "function") dest.destroy();
	        };

	        // don't leave dangling pipes when there are errors.
	        var onerror = function (er) {
	          cleanup();
	          if (EE.listenerCount(this, "error") === 0) {
	            throw er; // Unhandled stream error in pipe.
	          }
	        };

	        // remove all the event listeners that were added.
	        var cleanup = function () {
	          source.removeListener("data", ondata);
	          dest.removeListener("drain", ondrain);

	          source.removeListener("end", onend);
	          source.removeListener("close", onclose);

	          source.removeListener("error", onerror);
	          dest.removeListener("error", onerror);

	          source.removeListener("end", cleanup);
	          source.removeListener("close", cleanup);

	          dest.removeListener("close", cleanup);
	        };

	        var source = this;

	        source.on("data", ondata);

	        dest.on("drain", ondrain);

	        // If the 'end' option is not supplied, dest.end() will be called when
	        // source gets the 'end' or 'close' events.  Only dest.end() once.
	        if (!dest._isStdio && (!options || options.end !== false)) {
	          source.on("end", onend);
	          source.on("close", onclose);
	        }

	        var didOnEnd = false;


	        source.on("error", onerror);
	        dest.on("error", onerror);

	        source.on("end", cleanup);
	        source.on("close", cleanup);

	        dest.on("close", cleanup);

	        dest.emit("pipe", source);

	        // Allow for unix-like usage: A.pipe(B).pipe(C)
	        return dest;
	      };


	      /***/
	    },
	    /* 3 */
	    /***/function (module, exports, __webpack_require__) {
	      var http = __webpack_require__(4);

	      var https = module.exports;

	      for (var key in http) {
	        if (http.hasOwnProperty(key)) https[key] = http[key];
	      };

	      https.request = function (params, cb) {
	        if (!params) params = {};
	        params.scheme = "https";
	        return http.request.call(this, params, cb);
	      }


	      /***/;
	    },
	    /* 4 */
	    /***/function (module, exports, __webpack_require__) {
	      var http = module.exports;
	      var EventEmitter = __webpack_require__(10).EventEmitter;
	      var Request = __webpack_require__(14);
	      var url = __webpack_require__(1);

	      http.request = function (params, cb) {
	        if (typeof params === "string") {
	          params = url.parse(params);
	        }
	        if (!params) params = {};
	        if (!params.host && !params.port) {
	          params.port = parseInt(window.location.port, 10);
	        }
	        if (!params.host && params.hostname) {
	          params.host = params.hostname;
	        }

	        if (!params.protocol) {
	          if (params.scheme) {
	            params.protocol = params.scheme + ":";
	          } else {
	            params.protocol = window.location.protocol;
	          }
	        }

	        if (!params.host) {
	          params.host = window.location.hostname || window.location.host;
	        }
	        if (/:/.test(params.host)) {
	          if (!params.port) {
	            params.port = params.host.split(":")[1];
	          }
	          params.host = params.host.split(":")[0];
	        }
	        if (!params.port) params.port = params.protocol == "https:" ? 443 : 80;

	        var req = new Request(new xhrHttp(), params);
	        if (cb) req.on("response", cb);
	        return req;
	      };

	      http.get = function (params, cb) {
	        params.method = "GET";
	        var req = http.request(params, cb);
	        req.end();
	        return req;
	      };

	      http.Agent = function () {};
	      http.Agent.defaultMaxSockets = 4;

	      var xhrHttp = (function () {
	        if (typeof window === "undefined") {
	          throw new Error("no window object present");
	        } else if (window.XMLHttpRequest) {
	          return window.XMLHttpRequest;
	        } else if (window.ActiveXObject) {
	          var axs = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.3.0", "Microsoft.XMLHTTP"];
	          for (var i = 0; i < axs.length; i++) {
	            try {
	              var ax = new window.ActiveXObject(axs[i]);
	              return function () {
	                if (ax) {
	                  var ax_ = ax;
	                  ax = null;
	                  return ax_;
	                } else {
	                  return new window.ActiveXObject(axs[i]);
	                }
	              };
	            } catch (e) {}
	          }
	          throw new Error("ajax not supported in this browser");
	        } else {
	          throw new Error("ajax not supported in this browser");
	        }
	      })();

	      http.STATUS_CODES = {
	        100: "Continue",
	        101: "Switching Protocols",
	        102: "Processing", // RFC 2518, obsoleted by RFC 4918
	        200: "OK",
	        201: "Created",
	        202: "Accepted",
	        203: "Non-Authoritative Information",
	        204: "No Content",
	        205: "Reset Content",
	        206: "Partial Content",
	        207: "Multi-Status", // RFC 4918
	        300: "Multiple Choices",
	        301: "Moved Permanently",
	        302: "Moved Temporarily",
	        303: "See Other",
	        304: "Not Modified",
	        305: "Use Proxy",
	        307: "Temporary Redirect",
	        400: "Bad Request",
	        401: "Unauthorized",
	        402: "Payment Required",
	        403: "Forbidden",
	        404: "Not Found",
	        405: "Method Not Allowed",
	        406: "Not Acceptable",
	        407: "Proxy Authentication Required",
	        408: "Request Time-out",
	        409: "Conflict",
	        410: "Gone",
	        411: "Length Required",
	        412: "Precondition Failed",
	        413: "Request Entity Too Large",
	        414: "Request-URI Too Large",
	        415: "Unsupported Media Type",
	        416: "Requested Range Not Satisfiable",
	        417: "Expectation Failed",
	        418: "I'm a teapot", // RFC 2324
	        422: "Unprocessable Entity", // RFC 4918
	        423: "Locked", // RFC 4918
	        424: "Failed Dependency", // RFC 4918
	        425: "Unordered Collection", // RFC 4918
	        426: "Upgrade Required", // RFC 2817
	        428: "Precondition Required", // RFC 6585
	        429: "Too Many Requests", // RFC 6585
	        431: "Request Header Fields Too Large", // RFC 6585
	        500: "Internal Server Error",
	        501: "Not Implemented",
	        502: "Bad Gateway",
	        503: "Service Unavailable",
	        504: "Gateway Time-out",
	        505: "HTTP Version Not Supported",
	        506: "Variant Also Negotiates", // RFC 2295
	        507: "Insufficient Storage", // RFC 4918
	        509: "Bandwidth Limit Exceeded",
	        510: "Not Extended", // RFC 2774
	        511: "Network Authentication Required" // RFC 6585
	      };

	      /***/
	    },
	    /* 5 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (global, process) {


	        /**
	         * Echos the value of a value. Trys to print the value out
	         * in the best way possible given the different types.
	         *
	         * @param {Object} obj The object to print out.
	         * @param {Object} opts Optional options object that alters the output.
	         */
	        /* legacy: obj, showHidden, depth, colors*/
	        var inspect = function (obj, opts) {
	          // default options
	          var ctx = {
	            seen: [],
	            stylize: stylizeNoColor
	          };
	          // legacy...
	          if (arguments.length >= 3) ctx.depth = arguments[2];
	          if (arguments.length >= 4) ctx.colors = arguments[3];
	          if (isBoolean(opts)) {
	            // legacy...
	            ctx.showHidden = opts;
	          } else if (opts) {
	            // got an "options" object
	            exports._extend(ctx, opts);
	          }
	          // set default options
	          if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	          if (isUndefined(ctx.depth)) ctx.depth = 2;
	          if (isUndefined(ctx.colors)) ctx.colors = false;
	          if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	          if (ctx.colors) ctx.stylize = stylizeWithColor;
	          return formatValue(ctx, obj, ctx.depth);
	        };

	        var stylizeWithColor = function (str, styleType) {
	          var style = inspect.styles[styleType];

	          if (style) {
	            return "\u001b[" + inspect.colors[style][0] + "m" + str + "\u001b[" + inspect.colors[style][1] + "m";
	          } else {
	            return str;
	          }
	        };

	        var stylizeNoColor = function (str, styleType) {
	          return str;
	        };

	        var arrayToHash = function (array) {
	          var hash = {};

	          array.forEach(function (val, idx) {
	            hash[val] = true;
	          });

	          return hash;
	        };

	        var formatValue = function (ctx, value, recurseTimes) {
	          // Provide a hook for user-specified inspect functions.
	          // Check that value is an object with an inspect function on it
	          if (ctx.customInspect && value && isFunction(value.inspect) &&
	          // Filter out the util module, it's inspect function is special
	          value.inspect !== exports.inspect &&
	          // Also filter out any prototype objects using the circular check.
	          !(value.constructor && value.constructor.prototype === value)) {
	            var ret = value.inspect(recurseTimes, ctx);
	            if (!isString(ret)) {
	              ret = formatValue(ctx, ret, recurseTimes);
	            }
	            return ret;
	          }

	          // Primitive types cannot have properties
	          var primitive = formatPrimitive(ctx, value);
	          if (primitive) {
	            return primitive;
	          }

	          // Look up the keys of the object.
	          var keys = Object.keys(value);
	          var visibleKeys = arrayToHash(keys);

	          if (ctx.showHidden) {
	            keys = Object.getOwnPropertyNames(value);
	          }

	          // IE doesn't make error fields non-enumerable
	          // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	          if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
	            return formatError(value);
	          }

	          // Some type of object without properties can be shortcutted.
	          if (keys.length === 0) {
	            if (isFunction(value)) {
	              var name = value.name ? ": " + value.name : "";
	              return ctx.stylize("[Function" + name + "]", "special");
	            }
	            if (isRegExp(value)) {
	              return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
	            }
	            if (isDate(value)) {
	              return ctx.stylize(Date.prototype.toString.call(value), "date");
	            }
	            if (isError(value)) {
	              return formatError(value);
	            }
	          }

	          var base = "",
	              array = false,
	              braces = ["{", "}"];

	          // Make Array say that they are Array
	          if (isArray(value)) {
	            array = true;
	            braces = ["[", "]"];
	          }

	          // Make functions say that they are functions
	          if (isFunction(value)) {
	            var n = value.name ? ": " + value.name : "";
	            base = " [Function" + n + "]";
	          }

	          // Make RegExps say that they are RegExps
	          if (isRegExp(value)) {
	            base = " " + RegExp.prototype.toString.call(value);
	          }

	          // Make dates with properties first say the date
	          if (isDate(value)) {
	            base = " " + Date.prototype.toUTCString.call(value);
	          }

	          // Make error with message first say the error
	          if (isError(value)) {
	            base = " " + formatError(value);
	          }

	          if (keys.length === 0 && (!array || value.length == 0)) {
	            return braces[0] + base + braces[1];
	          }

	          if (recurseTimes < 0) {
	            if (isRegExp(value)) {
	              return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
	            } else {
	              return ctx.stylize("[Object]", "special");
	            }
	          }

	          ctx.seen.push(value);

	          var output;
	          if (array) {
	            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	          } else {
	            output = keys.map(function (key) {
	              return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	            });
	          }

	          ctx.seen.pop();

	          return reduceToSingleString(output, base, braces);
	        };

	        var formatPrimitive = function (ctx, value) {
	          if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
	          if (isString(value)) {
	            var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, "\"") + "'";
	            return ctx.stylize(simple, "string");
	          }
	          if (isNumber(value)) return ctx.stylize("" + value, "number");
	          if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
	          // For some reason typeof null is "object", so special case here.
	          if (isNull(value)) return ctx.stylize("null", "null");
	        };

	        var formatError = function (value) {
	          return "[" + Error.prototype.toString.call(value) + "]";
	        };

	        var formatArray = function (ctx, value, recurseTimes, visibleKeys, keys) {
	          var output = [];
	          for (var i = 0, l = value.length; i < l; ++i) {
	            if (hasOwnProperty(value, String(i))) {
	              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
	            } else {
	              output.push("");
	            }
	          }
	          keys.forEach(function (key) {
	            if (!key.match(/^\d+$/)) {
	              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
	            }
	          });
	          return output;
	        };

	        var formatProperty = function (ctx, value, recurseTimes, visibleKeys, key, array) {
	          var name, str, desc;
	          desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	          if (desc.get) {
	            if (desc.set) {
	              str = ctx.stylize("[Getter/Setter]", "special");
	            } else {
	              str = ctx.stylize("[Getter]", "special");
	            }
	          } else {
	            if (desc.set) {
	              str = ctx.stylize("[Setter]", "special");
	            }
	          }
	          if (!hasOwnProperty(visibleKeys, key)) {
	            name = "[" + key + "]";
	          }
	          if (!str) {
	            if (ctx.seen.indexOf(desc.value) < 0) {
	              if (isNull(recurseTimes)) {
	                str = formatValue(ctx, desc.value, null);
	              } else {
	                str = formatValue(ctx, desc.value, recurseTimes - 1);
	              }
	              if (str.indexOf("\n") > -1) {
	                if (array) {
	                  str = str.split("\n").map(function (line) {
	                    return "  " + line;
	                  }).join("\n").substr(2);
	                } else {
	                  str = "\n" + str.split("\n").map(function (line) {
	                    return "   " + line;
	                  }).join("\n");
	                }
	              }
	            } else {
	              str = ctx.stylize("[Circular]", "special");
	            }
	          }
	          if (isUndefined(name)) {
	            if (array && key.match(/^\d+$/)) {
	              return str;
	            }
	            name = JSON.stringify("" + key);
	            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	              name = name.substr(1, name.length - 2);
	              name = ctx.stylize(name, "name");
	            } else {
	              name = name.replace(/'/g, "\\'").replace(/\\"/g, "\"").replace(/(^"|"$)/g, "'");
	              name = ctx.stylize(name, "string");
	            }
	          }

	          return name + ": " + str;
	        };

	        var reduceToSingleString = function (output, base, braces) {
	          var numLinesEst = 0;
	          var length = output.reduce(function (prev, cur) {
	            numLinesEst++;
	            if (cur.indexOf("\n") >= 0) numLinesEst++;
	            return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
	          }, 0);

	          if (length > 60) {
	            return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
	          }

	          return braces[0] + base + " " + output.join(", ") + " " + braces[1];
	        };




	        // NOTE: These type checking functions intentionally don't use `instanceof`
	        // because it is fragile and can be easily faked with `Object.create()`.
	        var isArray = function (ar) {
	          return Array.isArray(ar);
	        };

	        var isBoolean = function (arg) {
	          return typeof arg === "boolean";
	        };

	        var isNull = function (arg) {
	          return arg === null;
	        };

	        var isNullOrUndefined = function (arg) {
	          return arg == null;
	        };

	        var isNumber = function (arg) {
	          return typeof arg === "number";
	        };

	        var isString = function (arg) {
	          return typeof arg === "string";
	        };

	        var isSymbol = function (arg) {
	          return typeof arg === "symbol";
	        };

	        var isUndefined = function (arg) {
	          return arg === void 0;
	        };

	        var isRegExp = function (re) {
	          return isObject(re) && objectToString(re) === "[object RegExp]";
	        };

	        var isObject = function (arg) {
	          return typeof arg === "object" && arg !== null;
	        };

	        var isDate = function (d) {
	          return isObject(d) && objectToString(d) === "[object Date]";
	        };

	        var isError = function (e) {
	          return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
	        };

	        var isFunction = function (arg) {
	          return typeof arg === "function";
	        };

	        var isPrimitive = function (arg) {
	          return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
	          typeof arg === "undefined";
	        };

	        var objectToString = function (o) {
	          return Object.prototype.toString.call(o);
	        };

	        var pad = function (n) {
	          return n < 10 ? "0" + n.toString(10) : n.toString(10);
	        };

	        // 26 Feb 16:19:34
	        var timestamp = function () {
	          var d = new Date();
	          var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(":");
	          return [d.getDate(), months[d.getMonth()], time].join(" ");
	        };

	        var hasOwnProperty = function (obj, prop) {
	          return Object.prototype.hasOwnProperty.call(obj, prop);
	        }

	        /* WEBPACK VAR INJECTION */;

	        // Copyright Joyent, Inc. and other Node contributors.
	        //
	        // Permission is hereby granted, free of charge, to any person obtaining a
	        // copy of this software and associated documentation files (the
	        // "Software"), to deal in the Software without restriction, including
	        // without limitation the rights to use, copy, modify, merge, publish,
	        // distribute, sublicense, and/or sell copies of the Software, and to permit
	        // persons to whom the Software is furnished to do so, subject to the
	        // following conditions:
	        //
	        // The above copyright notice and this permission notice shall be included
	        // in all copies or substantial portions of the Software.
	        //
	        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	        // USE OR OTHER DEALINGS IN THE SOFTWARE.

	        var formatRegExp = /%[sdj%]/g;
	        exports.format = function (f) {
	          if (!isString(f)) {
	            var objects = [];
	            for (var i = 0; i < arguments.length; i++) {
	              objects.push(inspect(arguments[i]));
	            }
	            return objects.join(" ");
	          }

	          var i = 1;
	          var args = arguments;
	          var len = args.length;
	          var str = String(f).replace(formatRegExp, function (x) {
	            if (x === "%%") return "%";
	            if (i >= len) return x;
	            switch (x) {
	              case "%s":
	                return String(args[i++]);
	              case "%d":
	                return Number(args[i++]);
	              case "%j":
	                try {
	                  return JSON.stringify(args[i++]);
	                } catch (_) {
	                  return "[Circular]";
	                }
	              default:
	                return x;
	            }
	          });
	          for (var x = args[i]; i < len; x = args[++i]) {
	            if (isNull(x) || !isObject(x)) {
	              str += " " + x;
	            } else {
	              str += " " + inspect(x);
	            }
	          }
	          return str;
	        };


	        // Mark that a method should not be used.
	        // Returns a modified function which warns once by default.
	        // If --no-deprecation is set, then it is a no-op.
	        exports.deprecate = function (fn, msg) {
	          var deprecated = function () {
	            if (!warned) {
	              if (process.throwDeprecation) {
	                throw new Error(msg);
	              } else if (process.traceDeprecation) {
	                console.trace(msg);
	              } else {
	                console.error(msg);
	              }
	              warned = true;
	            }
	            return fn.apply(this, arguments);
	          };

	          // Allow for deprecating things in the process of starting up.
	          if (isUndefined(global.process)) {
	            return function () {
	              return exports.deprecate(fn, msg).apply(this, arguments);
	            };
	          }

	          if (process.noDeprecation === true) {
	            return fn;
	          }

	          var warned = false;


	          return deprecated;
	        };


	        var debugs = {};
	        var debugEnviron;
	        exports.debuglog = function (set) {
	          if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || "";
	          set = set.toUpperCase();
	          if (!debugs[set]) {
	            if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
	              var pid = process.pid;
	              debugs[set] = function () {
	                var msg = exports.format.apply(exports, arguments);
	                console.error("%s %d: %s", set, pid, msg);
	              };
	            } else {
	              debugs[set] = function () {};
	            }
	          }
	          return debugs[set];
	        };
	        exports.inspect = inspect;


	        // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	        inspect.colors = {
	          bold: [1, 22],
	          italic: [3, 23],
	          underline: [4, 24],
	          inverse: [7, 27],
	          white: [37, 39],
	          grey: [90, 39],
	          black: [30, 39],
	          blue: [34, 39],
	          cyan: [36, 39],
	          green: [32, 39],
	          magenta: [35, 39],
	          red: [31, 39],
	          yellow: [33, 39]
	        };

	        // Don't use 'blue' not visible on cmd.exe
	        inspect.styles = {
	          special: "cyan",
	          number: "yellow",
	          boolean: "yellow",
	          undefined: "grey",
	          "null": "bold",
	          string: "green",
	          date: "magenta",
	          // "name": intentionally not styling
	          regexp: "red"
	        };


	        exports.isArray = isArray;

	        exports.isBoolean = isBoolean;

	        exports.isNull = isNull;

	        exports.isNullOrUndefined = isNullOrUndefined;

	        exports.isNumber = isNumber;

	        exports.isString = isString;

	        exports.isSymbol = isSymbol;

	        exports.isUndefined = isUndefined;

	        exports.isRegExp = isRegExp;

	        exports.isObject = isObject;

	        exports.isDate = isDate;

	        exports.isError = isError;

	        exports.isFunction = isFunction;

	        exports.isPrimitive = isPrimitive;

	        exports.isBuffer = __webpack_require__(16);




	        var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];


	        // log is just a thin wrapper to console.log that prepends a timestamp
	        exports.log = function () {
	          console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
	        };


	        /**
	         * Inherit the prototype methods from one constructor into another.
	         *
	         * The Function.prototype.inherits from lang.js rewritten as a standalone
	         * function (not on Function.prototype). NOTE: If this file is to be loaded
	         * during bootstrapping this function needs to be rewritten using some native
	         * functions as prototype setup using normal JavaScript does not work as
	         * expected during bootstrapping (see mirror.js in r114903).
	         *
	         * @param {function} ctor Constructor function which needs to inherit the
	         *     prototype.
	         * @param {function} superCtor Constructor function to inherit prototype from.
	         */
	        exports.inherits = __webpack_require__(30);

	        exports._extend = function (origin, add) {
	          // Don't do anything if add isn't an object
	          if (!add || !isObject(add)) return origin;

	          var keys = Object.keys(add);
	          var i = keys.length;
	          while (i--) {
	            origin[keys[i]] = add[keys[i]];
	          }
	          return origin;
	        };
	      }).call(exports, (function () {
	        return this;
	      })(), __webpack_require__(11));

	      /***/
	    },
	    /* 6 */
	    /***/function (module, exports, __webpack_require__) {
	      var assertEncoding = function (encoding) {
	        if (encoding && !isBufferEncoding(encoding)) {
	          throw new Error("Unknown encoding: " + encoding);
	        }
	      };

	      var passThroughWrite = function (buffer) {
	        return buffer.toString(this.encoding);
	      };

	      var utf16DetectIncompleteChar = function (buffer) {
	        this.charReceived = buffer.length % 2;
	        this.charLength = this.charReceived ? 2 : 0;
	      };

	      var base64DetectIncompleteChar = function (buffer) {
	        this.charReceived = buffer.length % 3;
	        this.charLength = this.charReceived ? 3 : 0;
	      }


	      /***/;

	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.

	      var Buffer = __webpack_require__(9).Buffer;

	      var isBufferEncoding = Buffer.isEncoding || function (encoding) {
	        switch (encoding && encoding.toLowerCase()) {
	          case "hex":
	          case "utf8":
	          case "utf-8":
	          case "ascii":
	          case "binary":
	          case "base64":
	          case "ucs2":
	          case "ucs-2":
	          case "utf16le":
	          case "utf-16le":
	          case "raw":
	            return true;
	          default:
	            return false;
	        }
	      };


	      // StringDecoder provides an interface for efficiently splitting a series of
	      // buffers into a series of JS strings without breaking apart multi-byte
	      // characters. CESU-8 is handled as part of the UTF-8 encoding.
	      //
	      // @TODO Handling all encodings inside a single object makes it very difficult
	      // to reason about this code, so it should be split up in the future.
	      // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	      // points as used by CESU-8.
	      var StringDecoder = exports.StringDecoder = function (encoding) {
	        this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
	        assertEncoding(encoding);
	        switch (this.encoding) {
	          case "utf8":
	            // CESU-8 represents each of Surrogate Pair by 3-bytes
	            this.surrogateSize = 3;
	            break;
	          case "ucs2":
	          case "utf16le":
	            // UTF-16 represents each of Surrogate Pair by 2-bytes
	            this.surrogateSize = 2;
	            this.detectIncompleteChar = utf16DetectIncompleteChar;
	            break;
	          case "base64":
	            // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	            this.surrogateSize = 3;
	            this.detectIncompleteChar = base64DetectIncompleteChar;
	            break;
	          default:
	            this.write = passThroughWrite;
	            return;
	        }

	        // Enough space to store all bytes of a single character. UTF-8 needs 4
	        // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	        this.charBuffer = new Buffer(6);
	        // Number of bytes received for the current incomplete multi-byte character.
	        this.charReceived = 0;
	        // Number of bytes expected for the current incomplete multi-byte character.
	        this.charLength = 0;
	      };


	      // write decodes the given buffer and returns it as JS string that is
	      // guaranteed to not contain any partial multi-byte characters. Any partial
	      // character found at the end of the buffer is buffered up, and will be
	      // returned when calling write again with the remaining bytes.
	      //
	      // Note: Converting a Buffer containing an orphan surrogate to a String
	      // currently works, but converting a String to a Buffer (via `new Buffer`, or
	      // Buffer#write) will replace incomplete surrogates with the unicode
	      // replacement character. See https://codereview.chromium.org/121173009/ .
	      StringDecoder.prototype.write = function (buffer) {
	        var charStr = "";
	        // if our last write ended with an incomplete multibyte character
	        while (this.charLength) {
	          // determine how many remaining bytes this buffer has to offer for this char
	          var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;

	          // add the new bytes to the char buffer
	          buffer.copy(this.charBuffer, this.charReceived, 0, available);
	          this.charReceived += available;

	          if (this.charReceived < this.charLength) {
	            // still not enough chars in this buffer? wait for more ...
	            return "";
	          }

	          // remove bytes belonging to the current character from the buffer
	          buffer = buffer.slice(available, buffer.length);

	          // get the character that was split
	          charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	          // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	          var charCode = charStr.charCodeAt(charStr.length - 1);
	          if (charCode >= 55296 && charCode <= 56319) {
	            this.charLength += this.surrogateSize;
	            charStr = "";
	            continue;
	          }
	          this.charReceived = this.charLength = 0;

	          // if there are no more bytes in this buffer, just emit our char
	          if (buffer.length === 0) {
	            return charStr;
	          }
	          break;
	        }

	        // determine and set charLength / charReceived
	        this.detectIncompleteChar(buffer);

	        var end = buffer.length;
	        if (this.charLength) {
	          // buffer the incomplete character bytes we got
	          buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	          end -= this.charReceived;
	        }

	        charStr += buffer.toString(this.encoding, 0, end);

	        var end = charStr.length - 1;
	        var charCode = charStr.charCodeAt(end);
	        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	        if (charCode >= 55296 && charCode <= 56319) {
	          var size = this.surrogateSize;
	          this.charLength += size;
	          this.charReceived += size;
	          this.charBuffer.copy(this.charBuffer, size, 0, size);
	          buffer.copy(this.charBuffer, 0, 0, size);
	          return charStr.substring(0, end);
	        }

	        // or just emit the charStr
	        return charStr;
	      };

	      // detectIncompleteChar determines if there is an incomplete UTF-8 character at
	      // the end of the given buffer. If so, it sets this.charLength to the byte
	      // length that character, and sets this.charReceived to the number of bytes
	      // that are available for this character.
	      StringDecoder.prototype.detectIncompleteChar = function (buffer) {
	        // determine how many bytes we have to check at the end of this buffer
	        var i = buffer.length >= 3 ? 3 : buffer.length;

	        // Figure out if one of the last i bytes of our buffer announces an
	        // incomplete char.
	        for (; i > 0; i--) {
	          var c = buffer[buffer.length - i];

	          // See http://en.wikipedia.org/wiki/UTF-8#Description

	          // 110XXXXX
	          if (i == 1 && c >> 5 == 6) {
	            this.charLength = 2;
	            break;
	          }

	          // 1110XXXX
	          if (i <= 2 && c >> 4 == 14) {
	            this.charLength = 3;
	            break;
	          }

	          // 11110XXX
	          if (i <= 3 && c >> 3 == 30) {
	            this.charLength = 4;
	            break;
	          }
	        }
	        this.charReceived = i;
	      };

	      StringDecoder.prototype.end = function (buffer) {
	        var res = "";
	        if (buffer && buffer.length) res = this.write(buffer);

	        if (this.charReceived) {
	          var cr = this.charReceived;
	          var buf = this.charBuffer;
	          var enc = this.encoding;
	          res += buf.slice(0, cr).toString(enc);
	        }

	        return res;
	      };
	    },
	    /* 7 */
	    /***/function (module, exports, __webpack_require__) {
	      var ReadStream = function () {
	        throw new Error("tty.ReadStream is not implemented");
	      };

	      var WriteStream = function () {
	        throw new Error("tty.ReadStream is not implemented");
	      };

	      exports.isatty = function () {
	        return false;
	      };

	      exports.ReadStream = ReadStream;

	      exports.WriteStream = WriteStream;


	      /***/
	    },
	    /* 8 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (process) {
	        // Copyright Joyent, Inc. and other Node contributors.
	        //
	        // Permission is hereby granted, free of charge, to any person obtaining a
	        // copy of this software and associated documentation files (the
	        // "Software"), to deal in the Software without restriction, including
	        // without limitation the rights to use, copy, modify, merge, publish,
	        // distribute, sublicense, and/or sell copies of the Software, and to permit
	        // persons to whom the Software is furnished to do so, subject to the
	        // following conditions:
	        //
	        // The above copyright notice and this permission notice shall be included
	        // in all copies or substantial portions of the Software.
	        //
	        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	        // USE OR OTHER DEALINGS IN THE SOFTWARE.

	        // resolves . and .. elements in a path array with directory names there
	        // must be no slashes, empty elements, or device names (c:\) in the array
	        // (so also no leading and trailing slashes - it does not distinguish
	        // relative and absolute paths)
	        var normalizeArray = function (parts, allowAboveRoot) {
	          // if the path tries to go above the root, `up` ends up > 0
	          var up = 0;
	          for (var i = parts.length - 1; i >= 0; i--) {
	            var last = parts[i];
	            if (last === ".") {
	              parts.splice(i, 1);
	            } else if (last === "..") {
	              parts.splice(i, 1);
	              up++;
	            } else if (up) {
	              parts.splice(i, 1);
	              up--;
	            }
	          }

	          // if the path is allowed to go above the root, restore leading ..s
	          if (allowAboveRoot) {
	            for (; up--; up) {
	              parts.unshift("..");
	            }
	          }

	          return parts;
	        };

	        var filter = function (xs, f) {
	          if (xs.filter) return xs.filter(f);
	          var res = [];
	          for (var i = 0; i < xs.length; i++) {
	            if (f(xs[i], i, xs)) res.push(xs[i]);
	          }
	          return res;
	        };

	        // Split a filename into [root, dir, basename, ext], unix version
	        // 'root' is just a slash, or nothing.
	        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	        var splitPath = function (filename) {
	          return splitPathRe.exec(filename).slice(1);
	        };

	        // path.resolve([from ...], to)
	        // posix version
	        exports.resolve = function () {
	          var resolvedPath = "",
	              resolvedAbsolute = false;

	          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	            var path = i >= 0 ? arguments[i] : process.cwd();

	            // Skip empty and invalid entries
	            if (typeof path !== "string") {
	              throw new TypeError("Arguments to path.resolve must be strings");
	            } else if (!path) {
	              continue;
	            }

	            resolvedPath = path + "/" + resolvedPath;
	            resolvedAbsolute = path.charAt(0) === "/";
	          }

	          // At this point the path should be resolved to a full absolute path, but
	          // handle relative paths to be safe (might happen when process.cwd() fails)

	          // Normalize the path
	          resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function (p) {
	            return !!p;
	          }), !resolvedAbsolute).join("/");

	          return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
	        };

	        // path.normalize(path)
	        // posix version
	        exports.normalize = function (path) {
	          var isAbsolute = exports.isAbsolute(path),
	              trailingSlash = substr(path, -1) === "/";

	          // Normalize the path
	          path = normalizeArray(filter(path.split("/"), function (p) {
	            return !!p;
	          }), !isAbsolute).join("/");

	          if (!path && !isAbsolute) {
	            path = ".";
	          }
	          if (path && trailingSlash) {
	            path += "/";
	          }

	          return (isAbsolute ? "/" : "") + path;
	        };

	        // posix version
	        exports.isAbsolute = function (path) {
	          return path.charAt(0) === "/";
	        };

	        // posix version
	        exports.join = function () {
	          var paths = Array.prototype.slice.call(arguments, 0);
	          return exports.normalize(filter(paths, function (p, index) {
	            if (typeof p !== "string") {
	              throw new TypeError("Arguments to path.join must be strings");
	            }
	            return p;
	          }).join("/"));
	        };


	        // path.relative(from, to)
	        // posix version
	        exports.relative = function (from, to) {
	          var trim = function (arr) {
	            var start = 0;
	            for (; start < arr.length; start++) {
	              if (arr[start] !== "") break;
	            }

	            var end = arr.length - 1;
	            for (; end >= 0; end--) {
	              if (arr[end] !== "") break;
	            }

	            if (start > end) return [];
	            return arr.slice(start, end - start + 1);
	          };

	          from = exports.resolve(from).substr(1);
	          to = exports.resolve(to).substr(1);

	          var fromParts = trim(from.split("/"));
	          var toParts = trim(to.split("/"));

	          var length = Math.min(fromParts.length, toParts.length);
	          var samePartsLength = length;
	          for (var i = 0; i < length; i++) {
	            if (fromParts[i] !== toParts[i]) {
	              samePartsLength = i;
	              break;
	            }
	          }

	          var outputParts = [];
	          for (var i = samePartsLength; i < fromParts.length; i++) {
	            outputParts.push("..");
	          }

	          outputParts = outputParts.concat(toParts.slice(samePartsLength));

	          return outputParts.join("/");
	        };

	        exports.sep = "/";
	        exports.delimiter = ":";

	        exports.dirname = function (path) {
	          var result = splitPath(path),
	              root = result[0],
	              dir = result[1];

	          if (!root && !dir) {
	            // No dirname whatsoever
	            return ".";
	          }

	          if (dir) {
	            // It has a dirname, strip trailing slash
	            dir = dir.substr(0, dir.length - 1);
	          }

	          return root + dir;
	        };


	        exports.basename = function (path, ext) {
	          var f = splitPath(path)[2];
	          // TODO: make this comparison case-insensitive on windows?
	          if (ext && f.substr(-1 * ext.length) === ext) {
	            f = f.substr(0, f.length - ext.length);
	          }
	          return f;
	        };


	        exports.extname = function (path) {
	          return splitPath(path)[3];
	        };

	        // String.prototype.substr - negative index don't work in IE8
	        var substr = "ab".substr(-1) === "b" ? function (str, start, len) {
	          return str.substr(start, len);
	        } : function (str, start, len) {
	          if (start < 0) start = str.length + start;
	          return str.substr(start, len);
	        };

	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(11));

	      /***/
	    },
	    /* 9 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (Buffer) {
	        /**
	         * Class: Buffer
	         * =============
	         *
	         * The Buffer constructor returns instances of `Uint8Array` that are augmented
	         * with function properties for all the node `Buffer` API functions. We use
	         * `Uint8Array` so that square bracket notation works as expected -- it returns
	         * a single octet.
	         *
	         * By augmenting the instances, we can avoid modifying the `Uint8Array`
	         * prototype.
	         */
	        var Buffer = function (subject, encoding, noZero) {
	          if (!(this instanceof Buffer)) return new Buffer(subject, encoding, noZero);

	          var type = typeof subject;

	          // Find the length
	          var length;
	          if (type === "number") length = subject > 0 ? subject >>> 0 : 0;else if (type === "string") {
	            if (encoding === "base64") subject = base64clean(subject);
	            length = Buffer.byteLength(subject, encoding);
	          } else if (type === "object" && subject !== null) {
	            // assume object is array-like
	            if (subject.type === "Buffer" && isArray(subject.data)) subject = subject.data;
	            length = +subject.length > 0 ? Math.floor(+subject.length) : 0;
	          } else throw new TypeError("must start with number, buffer, array or string");

	          if (this.length > kMaxLength) throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + kMaxLength.toString(16) + " bytes");

	          var buf;
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            // Preferred: Return an augmented `Uint8Array` instance for best performance
	            buf = Buffer._augment(new Uint8Array(length));
	          } else {
	            // Fallback: Return THIS instance of Buffer (created by `new`)
	            buf = this;
	            buf.length = length;
	            buf._isBuffer = true;
	          }

	          var i;
	          if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === "number") {
	            // Speed optimization -- use set if we're copying from a typed array
	            buf._set(subject);
	          } else if (isArrayish(subject)) {
	            // Treat array-ish objects as a byte array
	            if (Buffer.isBuffer(subject)) {
	              for (i = 0; i < length; i++) buf[i] = subject.readUInt8(i);
	            } else {
	              for (i = 0; i < length; i++) buf[i] = (subject[i] % 256 + 256) % 256;
	            }
	          } else if (type === "string") {
	            buf.write(subject, 0, encoding);
	          } else if (type === "number" && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
	            for (i = 0; i < length; i++) {
	              buf[i] = 0;
	            }
	          }

	          return buf;
	        };

	        var hexWrite = function (buf, string, offset, length) {
	          offset = Number(offset) || 0;
	          var remaining = buf.length - offset;
	          if (!length) {
	            length = remaining;
	          } else {
	            length = Number(length);
	            if (length > remaining) {
	              length = remaining;
	            }
	          }

	          // must be an even number of digits
	          var strLen = string.length;
	          if (strLen % 2 !== 0) throw new Error("Invalid hex string");

	          if (length > strLen / 2) {
	            length = strLen / 2;
	          }
	          for (var i = 0; i < length; i++) {
	            var byte = parseInt(string.substr(i * 2, 2), 16);
	            if (isNaN(byte)) throw new Error("Invalid hex string");
	            buf[offset + i] = byte;
	          }
	          return i;
	        };

	        var utf8Write = function (buf, string, offset, length) {
	          var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length);
	          return charsWritten;
	        };

	        var asciiWrite = function (buf, string, offset, length) {
	          var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length);
	          return charsWritten;
	        };

	        var binaryWrite = function (buf, string, offset, length) {
	          return asciiWrite(buf, string, offset, length);
	        };

	        var base64Write = function (buf, string, offset, length) {
	          var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length);
	          return charsWritten;
	        };

	        var utf16leWrite = function (buf, string, offset, length) {
	          var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length, 2);
	          return charsWritten;
	        };

	        var base64Slice = function (buf, start, end) {
	          if (start === 0 && end === buf.length) {
	            return base64.fromByteArray(buf);
	          } else {
	            return base64.fromByteArray(buf.slice(start, end));
	          }
	        };

	        var utf8Slice = function (buf, start, end) {
	          var res = "";
	          var tmp = "";
	          end = Math.min(buf.length, end);

	          for (var i = start; i < end; i++) {
	            if (buf[i] <= 127) {
	              res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
	              tmp = "";
	            } else {
	              tmp += "%" + buf[i].toString(16);
	            }
	          }

	          return res + decodeUtf8Char(tmp);
	        };

	        var asciiSlice = function (buf, start, end) {
	          var ret = "";
	          end = Math.min(buf.length, end);

	          for (var i = start; i < end; i++) {
	            ret += String.fromCharCode(buf[i]);
	          }
	          return ret;
	        };

	        var binarySlice = function (buf, start, end) {
	          return asciiSlice(buf, start, end);
	        };

	        var hexSlice = function (buf, start, end) {
	          var len = buf.length;

	          if (!start || start < 0) start = 0;
	          if (!end || end < 0 || end > len) end = len;

	          var out = "";
	          for (var i = start; i < end; i++) {
	            out += toHex(buf[i]);
	          }
	          return out;
	        };

	        var utf16leSlice = function (buf, start, end) {
	          var bytes = buf.slice(start, end);
	          var res = "";
	          for (var i = 0; i < bytes.length; i += 2) {
	            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	          }
	          return res;
	        };

	        /*
	         * Need to make sure that buffer isn't trying to write out of bounds.
	         */
	        var checkOffset = function (offset, ext, length) {
	          if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
	          if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
	        };

	        var checkInt = function (buf, value, offset, ext, max, min) {
	          if (!Buffer.isBuffer(buf)) throw new TypeError("buffer must be a Buffer instance");
	          if (value > max || value < min) throw new TypeError("value is out of bounds");
	          if (offset + ext > buf.length) throw new TypeError("index out of range");
	        };

	        var objectWriteUInt16 = function (buf, value, offset, littleEndian) {
	          if (value < 0) value = 65535 + value + 1;
	          for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	            buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
	          }
	        };

	        var objectWriteUInt32 = function (buf, value, offset, littleEndian) {
	          if (value < 0) value = 4294967295 + value + 1;
	          for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	            buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
	          }
	        };

	        var checkIEEE754 = function (buf, value, offset, ext, max, min) {
	          if (value > max || value < min) throw new TypeError("value is out of bounds");
	          if (offset + ext > buf.length) throw new TypeError("index out of range");
	        };

	        var writeFloat = function (buf, value, offset, littleEndian, noAssert) {
	          if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
	          ieee754.write(buf, value, offset, littleEndian, 23, 4);
	          return offset + 4;
	        };

	        var writeDouble = function (buf, value, offset, littleEndian, noAssert) {
	          if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157e+308, -1.7976931348623157e+308);
	          ieee754.write(buf, value, offset, littleEndian, 52, 8);
	          return offset + 8;
	        };

	        var base64clean = function (str) {
	          // Node strips out invalid characters like \n and \t from the string, base64-js does not
	          str = stringtrim(str).replace(INVALID_BASE64_RE, "");
	          // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	          while (str.length % 4 !== 0) {
	            str = str + "=";
	          }
	          return str;
	        };

	        var stringtrim = function (str) {
	          if (str.trim) return str.trim();
	          return str.replace(/^\s+|\s+$/g, "");
	        };

	        var isArrayish = function (subject) {
	          return isArray(subject) || Buffer.isBuffer(subject) || subject && typeof subject === "object" && typeof subject.length === "number";
	        };

	        var toHex = function (n) {
	          if (n < 16) return "0" + n.toString(16);
	          return n.toString(16);
	        };

	        var utf8ToBytes = function (str) {
	          var byteArray = [];
	          for (var i = 0; i < str.length; i++) {
	            var b = str.charCodeAt(i);
	            if (b <= 127) {
	              byteArray.push(b);
	            } else {
	              var start = i;
	              if (b >= 55296 && b <= 57343) i++;
	              var h = encodeURIComponent(str.slice(start, i + 1)).substr(1).split("%");
	              for (var j = 0; j < h.length; j++) {
	                byteArray.push(parseInt(h[j], 16));
	              }
	            }
	          }
	          return byteArray;
	        };

	        var asciiToBytes = function (str) {
	          var byteArray = [];
	          for (var i = 0; i < str.length; i++) {
	            // Node's code seems to be doing this and not & 0x7F..
	            byteArray.push(str.charCodeAt(i) & 255);
	          }
	          return byteArray;
	        };

	        var utf16leToBytes = function (str) {
	          var c, hi, lo;
	          var byteArray = [];
	          for (var i = 0; i < str.length; i++) {
	            c = str.charCodeAt(i);
	            hi = c >> 8;
	            lo = c % 256;
	            byteArray.push(lo);
	            byteArray.push(hi);
	          }

	          return byteArray;
	        };

	        var base64ToBytes = function (str) {
	          return base64.toByteArray(str);
	        };

	        var blitBuffer = function (src, dst, offset, length, unitSize) {
	          if (unitSize) length -= length % unitSize;
	          for (var i = 0; i < length; i++) {
	            if (i + offset >= dst.length || i >= src.length) break;
	            dst[i + offset] = src[i];
	          }
	          return i;
	        };

	        var decodeUtf8Char = function (str) {
	          try {
	            return decodeURIComponent(str);
	          } catch (err) {
	            return String.fromCharCode(65533) // UTF 8 invalid char
	            ;
	          }
	        }

	        /* WEBPACK VAR INJECTION */;

	        /*!
	        * The buffer module from node.js, for the browser.
	        *
	        * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	        * @license  MIT
	        */

	        var base64 = __webpack_require__(31);
	        var ieee754 = __webpack_require__(25);
	        var isArray = __webpack_require__(26);

	        exports.Buffer = Buffer;
	        exports.SlowBuffer = Buffer;
	        exports.INSPECT_MAX_BYTES = 50;
	        Buffer.poolSize = 8192; // not used by this implementation

	        var kMaxLength = 1073741823;

	        /**
	         * If `Buffer.TYPED_ARRAY_SUPPORT`:
	         *   === true    Use Uint8Array implementation (fastest)
	         *   === false   Use Object implementation (most compatible, even IE6)
	         *
	         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	         * Opera 11.6+, iOS 4.2+.
	         *
	         * Note:
	         *
	         * - Implementation must support adding new properties to `Uint8Array` instances.
	         *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	         *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	         *
	         *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	         *
	         *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	         *    incorrect length in some situations.
	         *
	         * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	         * get the Object implementation, which is slower but will work correctly.
	         */
	        Buffer.TYPED_ARRAY_SUPPORT = (function () {
	          try {
	            var buf = new ArrayBuffer(0);
	            var arr = new Uint8Array(buf);
	            arr.foo = function () {
	              return 42;
	            };
	            return 42 === arr.foo() && // typed array instances can be augmented
	            typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
	            new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	            ;
	          } catch (e) {
	            return false;
	          }
	        })();

	        Buffer.isBuffer = function (b) {
	          return !!(b != null && b._isBuffer);
	        };

	        Buffer.compare = function (a, b) {
	          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");

	          var x = a.length;
	          var y = b.length;
	          for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
	          if (i !== len) {
	            x = a[i];
	            y = b[i];
	          }
	          if (x < y) return -1;
	          if (y < x) return 1;
	          return 0;
	        };

	        Buffer.isEncoding = function (encoding) {
	          switch (String(encoding).toLowerCase()) {
	            case "hex":
	            case "utf8":
	            case "utf-8":
	            case "ascii":
	            case "binary":
	            case "base64":
	            case "raw":
	            case "ucs2":
	            case "ucs-2":
	            case "utf16le":
	            case "utf-16le":
	              return true;
	            default:
	              return false;
	          }
	        };

	        Buffer.concat = function (list, totalLength) {
	          if (!isArray(list)) throw new TypeError("Usage: Buffer.concat(list[, length])");

	          if (list.length === 0) {
	            return new Buffer(0);
	          } else if (list.length === 1) {
	            return list[0];
	          }

	          var i;
	          if (totalLength === undefined) {
	            totalLength = 0;
	            for (i = 0; i < list.length; i++) {
	              totalLength += list[i].length;
	            }
	          }

	          var buf = new Buffer(totalLength);
	          var pos = 0;
	          for (i = 0; i < list.length; i++) {
	            var item = list[i];
	            item.copy(buf, pos);
	            pos += item.length;
	          }
	          return buf;
	        };

	        Buffer.byteLength = function (str, encoding) {
	          var ret;
	          str = str + "";
	          switch (encoding || "utf8") {
	            case "ascii":
	            case "binary":
	            case "raw":
	              ret = str.length;
	              break;
	            case "ucs2":
	            case "ucs-2":
	            case "utf16le":
	            case "utf-16le":
	              ret = str.length * 2;
	              break;
	            case "hex":
	              ret = str.length >>> 1;
	              break;
	            case "utf8":
	            case "utf-8":
	              ret = utf8ToBytes(str).length;
	              break;
	            case "base64":
	              ret = base64ToBytes(str).length;
	              break;
	            default:
	              ret = str.length;
	          }
	          return ret;
	        };

	        // pre-set for values that may exist in the future
	        Buffer.prototype.length = undefined;
	        Buffer.prototype.parent = undefined;

	        // toString(encoding, start=0, end=buffer.length)
	        Buffer.prototype.toString = function (encoding, start, end) {
	          var loweredCase = false;

	          start = start >>> 0;
	          end = end === undefined || end === Infinity ? this.length : end >>> 0;

	          if (!encoding) encoding = "utf8";
	          if (start < 0) start = 0;
	          if (end > this.length) end = this.length;
	          if (end <= start) return "";

	          while (true) {
	            switch (encoding) {
	              case "hex":
	                return hexSlice(this, start, end);

	              case "utf8":
	              case "utf-8":
	                return utf8Slice(this, start, end);

	              case "ascii":
	                return asciiSlice(this, start, end);

	              case "binary":
	                return binarySlice(this, start, end);

	              case "base64":
	                return base64Slice(this, start, end);

	              case "ucs2":
	              case "ucs-2":
	              case "utf16le":
	              case "utf-16le":
	                return utf16leSlice(this, start, end);

	              default:
	                if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
	                encoding = (encoding + "").toLowerCase();
	                loweredCase = true;
	            }
	          }
	        };

	        Buffer.prototype.equals = function (b) {
	          if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
	          return Buffer.compare(this, b) === 0;
	        };

	        Buffer.prototype.inspect = function () {
	          var str = "";
	          var max = exports.INSPECT_MAX_BYTES;
	          if (this.length > 0) {
	            str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
	            if (this.length > max) str += " ... ";
	          }
	          return "<Buffer " + str + ">";
	        };

	        Buffer.prototype.compare = function (b) {
	          if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
	          return Buffer.compare(this, b);
	        };

	        // `get` will be removed in Node 0.13+
	        Buffer.prototype.get = function (offset) {
	          console.log(".get() is deprecated. Access using array indexes instead.");
	          return this.readUInt8(offset);
	        };

	        // `set` will be removed in Node 0.13+
	        Buffer.prototype.set = function (v, offset) {
	          console.log(".set() is deprecated. Access using array indexes instead.");
	          return this.writeUInt8(v, offset);
	        };

	        Buffer.prototype.write = function (string, offset, length, encoding) {
	          // Support both (string, offset, length, encoding)
	          // and the legacy (string, encoding, offset, length)
	          if (isFinite(offset)) {
	            if (!isFinite(length)) {
	              encoding = length;
	              length = undefined;
	            }
	          } else {
	            // legacy
	            var swap = encoding;
	            encoding = offset;
	            offset = length;
	            length = swap;
	          }

	          offset = Number(offset) || 0;
	          var remaining = this.length - offset;
	          if (!length) {
	            length = remaining;
	          } else {
	            length = Number(length);
	            if (length > remaining) {
	              length = remaining;
	            }
	          }
	          encoding = String(encoding || "utf8").toLowerCase();

	          var ret;
	          switch (encoding) {
	            case "hex":
	              ret = hexWrite(this, string, offset, length);
	              break;
	            case "utf8":
	            case "utf-8":
	              ret = utf8Write(this, string, offset, length);
	              break;
	            case "ascii":
	              ret = asciiWrite(this, string, offset, length);
	              break;
	            case "binary":
	              ret = binaryWrite(this, string, offset, length);
	              break;
	            case "base64":
	              ret = base64Write(this, string, offset, length);
	              break;
	            case "ucs2":
	            case "ucs-2":
	            case "utf16le":
	            case "utf-16le":
	              ret = utf16leWrite(this, string, offset, length);
	              break;
	            default:
	              throw new TypeError("Unknown encoding: " + encoding);
	          }
	          return ret;
	        };

	        Buffer.prototype.toJSON = function () {
	          return {
	            type: "Buffer",
	            data: Array.prototype.slice.call(this._arr || this, 0)
	          };
	        };

	        Buffer.prototype.slice = function (start, end) {
	          var len = this.length;
	          start = ~ ~start;
	          end = end === undefined ? len : ~ ~end;

	          if (start < 0) {
	            start += len;
	            if (start < 0) start = 0;
	          } else if (start > len) {
	            start = len;
	          }

	          if (end < 0) {
	            end += len;
	            if (end < 0) end = 0;
	          } else if (end > len) {
	            end = len;
	          }

	          if (end < start) end = start;

	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            return Buffer._augment(this.subarray(start, end));
	          } else {
	            var sliceLen = end - start;
	            var newBuf = new Buffer(sliceLen, undefined, true);
	            for (var i = 0; i < sliceLen; i++) {
	              newBuf[i] = this[i + start];
	            }
	            return newBuf;
	          }
	        };

	        Buffer.prototype.readUInt8 = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 1, this.length);
	          return this[offset];
	        };

	        Buffer.prototype.readUInt16LE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 2, this.length);
	          return this[offset] | this[offset + 1] << 8;
	        };

	        Buffer.prototype.readUInt16BE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 2, this.length);
	          return this[offset] << 8 | this[offset + 1];
	        };

	        Buffer.prototype.readUInt32LE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 4, this.length);

	          return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
	        };

	        Buffer.prototype.readUInt32BE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 4, this.length);

	          return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	        };

	        Buffer.prototype.readInt8 = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 1, this.length);
	          if (!(this[offset] & 128)) return this[offset];
	          return (255 - this[offset] + 1) * -1;
	        };

	        Buffer.prototype.readInt16LE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 2, this.length);
	          var val = this[offset] | this[offset + 1] << 8;
	          return val & 32768 ? val | 4294901760 : val;
	        };

	        Buffer.prototype.readInt16BE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 2, this.length);
	          var val = this[offset + 1] | this[offset] << 8;
	          return val & 32768 ? val | 4294901760 : val;
	        };

	        Buffer.prototype.readInt32LE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 4, this.length);

	          return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	        };

	        Buffer.prototype.readInt32BE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 4, this.length);

	          return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	        };

	        Buffer.prototype.readFloatLE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 4, this.length);
	          return ieee754.read(this, offset, true, 23, 4);
	        };

	        Buffer.prototype.readFloatBE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 4, this.length);
	          return ieee754.read(this, offset, false, 23, 4);
	        };

	        Buffer.prototype.readDoubleLE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 8, this.length);
	          return ieee754.read(this, offset, true, 52, 8);
	        };

	        Buffer.prototype.readDoubleBE = function (offset, noAssert) {
	          if (!noAssert) checkOffset(offset, 8, this.length);
	          return ieee754.read(this, offset, false, 52, 8);
	        };

	        Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
	          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	          this[offset] = value;
	          return offset + 1;
	        };

	        Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            this[offset] = value;
	            this[offset + 1] = value >>> 8;
	          } else objectWriteUInt16(this, value, offset, true);
	          return offset + 2;
	        };

	        Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            this[offset] = value >>> 8;
	            this[offset + 1] = value;
	          } else objectWriteUInt16(this, value, offset, false);
	          return offset + 2;
	        };

	        Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            this[offset + 3] = value >>> 24;
	            this[offset + 2] = value >>> 16;
	            this[offset + 1] = value >>> 8;
	            this[offset] = value;
	          } else objectWriteUInt32(this, value, offset, true);
	          return offset + 4;
	        };

	        Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            this[offset] = value >>> 24;
	            this[offset + 1] = value >>> 16;
	            this[offset + 2] = value >>> 8;
	            this[offset + 3] = value;
	          } else objectWriteUInt32(this, value, offset, false);
	          return offset + 4;
	        };

	        Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
	          if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	          if (value < 0) value = 255 + value + 1;
	          this[offset] = value;
	          return offset + 1;
	        };

	        Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            this[offset] = value;
	            this[offset + 1] = value >>> 8;
	          } else objectWriteUInt16(this, value, offset, true);
	          return offset + 2;
	        };

	        Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            this[offset] = value >>> 8;
	            this[offset + 1] = value;
	          } else objectWriteUInt16(this, value, offset, false);
	          return offset + 2;
	        };

	        Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            this[offset] = value;
	            this[offset + 1] = value >>> 8;
	            this[offset + 2] = value >>> 16;
	            this[offset + 3] = value >>> 24;
	          } else objectWriteUInt32(this, value, offset, true);
	          return offset + 4;
	        };

	        Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
	          value = +value;
	          offset = offset >>> 0;
	          if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
	          if (value < 0) value = 4294967295 + value + 1;
	          if (Buffer.TYPED_ARRAY_SUPPORT) {
	            this[offset] = value >>> 24;
	            this[offset + 1] = value >>> 16;
	            this[offset + 2] = value >>> 8;
	            this[offset + 3] = value;
	          } else objectWriteUInt32(this, value, offset, false);
	          return offset + 4;
	        };

	        Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
	          return writeFloat(this, value, offset, true, noAssert);
	        };

	        Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
	          return writeFloat(this, value, offset, false, noAssert);
	        };

	        Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
	          return writeDouble(this, value, offset, true, noAssert);
	        };

	        Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
	          return writeDouble(this, value, offset, false, noAssert);
	        };

	        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	        Buffer.prototype.copy = function (target, target_start, start, end) {
	          var source = this;

	          if (!start) start = 0;
	          if (!end && end !== 0) end = this.length;
	          if (!target_start) target_start = 0;

	          // Copy 0 bytes; we're done
	          if (end === start) return;
	          if (target.length === 0 || source.length === 0) return;

	          // Fatal error conditions
	          if (end < start) throw new TypeError("sourceEnd < sourceStart");
	          if (target_start < 0 || target_start >= target.length) throw new TypeError("targetStart out of bounds");
	          if (start < 0 || start >= source.length) throw new TypeError("sourceStart out of bounds");
	          if (end < 0 || end > source.length) throw new TypeError("sourceEnd out of bounds");

	          // Are we oob?
	          if (end > this.length) end = this.length;
	          if (target.length - target_start < end - start) end = target.length - target_start + start;

	          var len = end - start;

	          if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	            for (var i = 0; i < len; i++) {
	              target[i + target_start] = this[i + start];
	            }
	          } else {
	            target._set(this.subarray(start, start + len), target_start);
	          }
	        };

	        // fill(value, start=0, end=buffer.length)
	        Buffer.prototype.fill = function (value, start, end) {
	          if (!value) value = 0;
	          if (!start) start = 0;
	          if (!end) end = this.length;

	          if (end < start) throw new TypeError("end < start");

	          // Fill 0 bytes; we're done
	          if (end === start) return;
	          if (this.length === 0) return;

	          if (start < 0 || start >= this.length) throw new TypeError("start out of bounds");
	          if (end < 0 || end > this.length) throw new TypeError("end out of bounds");

	          var i;
	          if (typeof value === "number") {
	            for (i = start; i < end; i++) {
	              this[i] = value;
	            }
	          } else {
	            var bytes = utf8ToBytes(value.toString());
	            var len = bytes.length;
	            for (i = start; i < end; i++) {
	              this[i] = bytes[i % len];
	            }
	          }

	          return this;
	        };

	        /**
	         * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	         * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	         */
	        Buffer.prototype.toArrayBuffer = function () {
	          if (typeof Uint8Array !== "undefined") {
	            if (Buffer.TYPED_ARRAY_SUPPORT) {
	              return new Buffer(this).buffer;
	            } else {
	              var buf = new Uint8Array(this.length);
	              for (var i = 0, len = buf.length; i < len; i += 1) {
	                buf[i] = this[i];
	              }
	              return buf.buffer;
	            }
	          } else {
	            throw new TypeError("Buffer.toArrayBuffer not supported in this browser");
	          }
	        };

	        // HELPER FUNCTIONS
	        // ================

	        var BP = Buffer.prototype;

	        /**
	         * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	         */
	        Buffer._augment = function (arr) {
	          arr.constructor = Buffer;
	          arr._isBuffer = true;

	          // save reference to original Uint8Array get/set methods before overwriting
	          arr._get = arr.get;
	          arr._set = arr.set;

	          // deprecated, will be removed in node 0.13+
	          arr.get = BP.get;
	          arr.set = BP.set;

	          arr.write = BP.write;
	          arr.toString = BP.toString;
	          arr.toLocaleString = BP.toString;
	          arr.toJSON = BP.toJSON;
	          arr.equals = BP.equals;
	          arr.compare = BP.compare;
	          arr.copy = BP.copy;
	          arr.slice = BP.slice;
	          arr.readUInt8 = BP.readUInt8;
	          arr.readUInt16LE = BP.readUInt16LE;
	          arr.readUInt16BE = BP.readUInt16BE;
	          arr.readUInt32LE = BP.readUInt32LE;
	          arr.readUInt32BE = BP.readUInt32BE;
	          arr.readInt8 = BP.readInt8;
	          arr.readInt16LE = BP.readInt16LE;
	          arr.readInt16BE = BP.readInt16BE;
	          arr.readInt32LE = BP.readInt32LE;
	          arr.readInt32BE = BP.readInt32BE;
	          arr.readFloatLE = BP.readFloatLE;
	          arr.readFloatBE = BP.readFloatBE;
	          arr.readDoubleLE = BP.readDoubleLE;
	          arr.readDoubleBE = BP.readDoubleBE;
	          arr.writeUInt8 = BP.writeUInt8;
	          arr.writeUInt16LE = BP.writeUInt16LE;
	          arr.writeUInt16BE = BP.writeUInt16BE;
	          arr.writeUInt32LE = BP.writeUInt32LE;
	          arr.writeUInt32BE = BP.writeUInt32BE;
	          arr.writeInt8 = BP.writeInt8;
	          arr.writeInt16LE = BP.writeInt16LE;
	          arr.writeInt16BE = BP.writeInt16BE;
	          arr.writeInt32LE = BP.writeInt32LE;
	          arr.writeInt32BE = BP.writeInt32BE;
	          arr.writeFloatLE = BP.writeFloatLE;
	          arr.writeFloatBE = BP.writeFloatBE;
	          arr.writeDoubleLE = BP.writeDoubleLE;
	          arr.writeDoubleBE = BP.writeDoubleBE;
	          arr.fill = BP.fill;
	          arr.inspect = BP.inspect;
	          arr.toArrayBuffer = BP.toArrayBuffer;

	          return arr;
	        };

	        var INVALID_BASE64_RE = /[^+\/0-9A-z]/g;
	      }).call(exports, __webpack_require__(9).Buffer);

	      /***/
	    },
	    /* 10 */
	    /***/function (module, exports, __webpack_require__) {
	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.

	      var EventEmitter = function () {
	        this._events = this._events || {};
	        this._maxListeners = this._maxListeners || undefined;
	      };

	      var isFunction = function (arg) {
	        return typeof arg === "function";
	      };

	      var isNumber = function (arg) {
	        return typeof arg === "number";
	      };

	      var isObject = function (arg) {
	        return typeof arg === "object" && arg !== null;
	      };

	      var isUndefined = function (arg) {
	        return arg === void 0;
	      }


	      /***/;

	      module.exports = EventEmitter;

	      // Backwards-compat with node 0.10.x
	      EventEmitter.EventEmitter = EventEmitter;

	      EventEmitter.prototype._events = undefined;
	      EventEmitter.prototype._maxListeners = undefined;

	      // By default EventEmitters will print a warning if more than 10 listeners are
	      // added to it. This is a useful default which helps finding memory leaks.
	      EventEmitter.defaultMaxListeners = 10;

	      // Obviously not all Emitters should be limited to 10. This function allows
	      // that to be increased. Set to zero for unlimited.
	      EventEmitter.prototype.setMaxListeners = function (n) {
	        if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
	        this._maxListeners = n;
	        return this;
	      };

	      EventEmitter.prototype.emit = function (type) {
	        var er, handler, len, args, i, listeners;

	        if (!this._events) this._events = {};

	        // If there is no 'error' event listener then throw.
	        if (type === "error") {
	          if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
	            er = arguments[1];
	            if (er instanceof Error) {
	              throw er; // Unhandled 'error' event
	            }
	            throw TypeError("Uncaught, unspecified \"error\" event.");
	          }
	        }

	        handler = this._events[type];

	        if (isUndefined(handler)) return false;

	        if (isFunction(handler)) {
	          switch (arguments.length) {
	            // fast cases
	            case 1:
	              handler.call(this);
	              break;
	            case 2:
	              handler.call(this, arguments[1]);
	              break;
	            case 3:
	              handler.call(this, arguments[1], arguments[2]);
	              break;
	            // slower
	            default:
	              len = arguments.length;
	              args = new Array(len - 1);
	              for (i = 1; i < len; i++) args[i - 1] = arguments[i];
	              handler.apply(this, args);
	          }
	        } else if (isObject(handler)) {
	          len = arguments.length;
	          args = new Array(len - 1);
	          for (i = 1; i < len; i++) args[i - 1] = arguments[i];

	          listeners = handler.slice();
	          len = listeners.length;
	          for (i = 0; i < len; i++) listeners[i].apply(this, args);
	        }

	        return true;
	      };

	      EventEmitter.prototype.addListener = function (type, listener) {
	        var m;

	        if (!isFunction(listener)) throw TypeError("listener must be a function");

	        if (!this._events) this._events = {};

	        // To avoid recursion in the case that type === "newListener"! Before
	        // adding it to the listeners, first emit "newListener".
	        if (this._events.newListener) this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener);

	        if (!this._events[type])
	          // Optimize the case of one listener. Don't need the extra array object.
	          this._events[type] = listener;else if (isObject(this._events[type]))
	          // If we've already got an array, just append.
	          this._events[type].push(listener);else
	          // Adding the second element, need to change to array.
	          this._events[type] = [this._events[type], listener];

	        // Check for listener leak
	        if (isObject(this._events[type]) && !this._events[type].warned) {
	          var m;
	          if (!isUndefined(this._maxListeners)) {
	            m = this._maxListeners;
	          } else {
	            m = EventEmitter.defaultMaxListeners;
	          }

	          if (m && m > 0 && this._events[type].length > m) {
	            this._events[type].warned = true;
	            console.error("(node) warning: possible EventEmitter memory " + "leak detected. %d listeners added. " + "Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
	            if (typeof console.trace === "function") {
	              // not supported in IE 10
	              console.trace();
	            }
	          }
	        }

	        return this;
	      };

	      EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	      EventEmitter.prototype.once = function (type, listener) {
	        var g = function () {
	          this.removeListener(type, g);

	          if (!fired) {
	            fired = true;
	            listener.apply(this, arguments);
	          }
	        };

	        if (!isFunction(listener)) throw TypeError("listener must be a function");

	        var fired = false;

	        g.listener = listener;
	        this.on(type, g);

	        return this;
	      };

	      // emits a 'removeListener' event iff the listener was removed
	      EventEmitter.prototype.removeListener = function (type, listener) {
	        var list, position, length, i;

	        if (!isFunction(listener)) throw TypeError("listener must be a function");

	        if (!this._events || !this._events[type]) return this;

	        list = this._events[type];
	        length = list.length;
	        position = -1;

	        if (list === listener || isFunction(list.listener) && list.listener === listener) {
	          delete this._events[type];
	          if (this._events.removeListener) this.emit("removeListener", type, listener);
	        } else if (isObject(list)) {
	          for (i = length; i-- > 0;) {
	            if (list[i] === listener || list[i].listener && list[i].listener === listener) {
	              position = i;
	              break;
	            }
	          }

	          if (position < 0) return this;

	          if (list.length === 1) {
	            list.length = 0;
	            delete this._events[type];
	          } else {
	            list.splice(position, 1);
	          }

	          if (this._events.removeListener) this.emit("removeListener", type, listener);
	        }

	        return this;
	      };

	      EventEmitter.prototype.removeAllListeners = function (type) {
	        var key, listeners;

	        if (!this._events) return this;

	        // not listening for removeListener, no need to emit
	        if (!this._events.removeListener) {
	          if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
	          return this;
	        }

	        // emit removeListener for all listeners on all events
	        if (arguments.length === 0) {
	          for (key in this._events) {
	            if (key === "removeListener") continue;
	            this.removeAllListeners(key);
	          }
	          this.removeAllListeners("removeListener");
	          this._events = {};
	          return this;
	        }

	        listeners = this._events[type];

	        if (isFunction(listeners)) {
	          this.removeListener(type, listeners);
	        } else {
	          // LIFO order
	          while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
	        }
	        delete this._events[type];

	        return this;
	      };

	      EventEmitter.prototype.listeners = function (type) {
	        var ret;
	        if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
	        return ret;
	      };

	      EventEmitter.listenerCount = function (emitter, type) {
	        var ret;
	        if (!emitter._events || !emitter._events[type]) ret = 0;else if (isFunction(emitter._events[type])) ret = 1;else ret = emitter._events[type].length;
	        return ret;
	      };
	    },
	    /* 11 */
	    /***/function (module, exports, __webpack_require__) {
	      var noop = function () {};

	      // shim for using process in browser

	      var process = module.exports = {};

	      process.nextTick = (function () {
	        var canSetImmediate = typeof window !== "undefined" && window.setImmediate;
	        var canMutationObserver = typeof window !== "undefined" && window.MutationObserver;
	        var canPost = typeof window !== "undefined" && window.postMessage && window.addEventListener;

	        if (canSetImmediate) {
	          return function (f) {
	            return window.setImmediate(f);
	          };
	        }

	        var queue = [];

	        if (canMutationObserver) {
	          var hiddenDiv = document.createElement("div");
	          var observer = new MutationObserver(function () {
	            var queueList = queue.slice();
	            queue.length = 0;
	            queueList.forEach(function (fn) {
	              fn();
	            });
	          });

	          observer.observe(hiddenDiv, { attributes: true });

	          return function nextTick(fn) {
	            if (!queue.length) {
	              hiddenDiv.setAttribute("yes", "no");
	            }
	            queue.push(fn);
	          };
	        }

	        if (canPost) {
	          window.addEventListener("message", function (ev) {
	            var source = ev.source;
	            if ((source === window || source === null) && ev.data === "process-tick") {
	              ev.stopPropagation();
	              if (queue.length > 0) {
	                var fn = queue.shift();
	                fn();
	              }
	            }
	          }, true);

	          return function nextTick(fn) {
	            queue.push(fn);
	            window.postMessage("process-tick", "*");
	          };
	        }

	        return function nextTick(fn) {
	          setTimeout(fn, 0);
	        };
	      })();

	      process.title = "browser";
	      process.browser = true;
	      process.env = {};
	      process.argv = [];

	      process.on = noop;
	      process.addListener = noop;
	      process.once = noop;
	      process.off = noop;
	      process.removeListener = noop;
	      process.removeAllListeners = noop;
	      process.emit = noop;

	      process.binding = function (name) {
	        throw new Error("process.binding is not supported");
	      };

	      // TODO(shtylman)
	      process.cwd = function () {
	        return "/";
	      };
	      process.chdir = function (dir) {
	        throw new Error("process.chdir is not supported");
	      };


	      /***/
	    },
	    /* 12 */
	    /***/function (module, exports, __webpack_require__) {
	      var nextTick = __webpack_require__(27).nextTick;
	      var slice = Array.prototype.slice;
	      var immediateIds = {};
	      var nextImmediateId = 0;

	      // DOM APIs, for completeness

	      if (typeof setTimeout !== "undefined") exports.setTimeout = function () {
	        return setTimeout.apply(window, arguments);
	      };
	      if (typeof clearTimeout !== "undefined") exports.clearTimeout = function () {
	        clearTimeout.apply(window, arguments);
	      };
	      if (typeof setInterval !== "undefined") exports.setInterval = function () {
	        return setInterval.apply(window, arguments);
	      };
	      if (typeof clearInterval !== "undefined") exports.clearInterval = function () {
	        clearInterval.apply(window, arguments);
	      };

	      // TODO: Change to more efficient list approach used in Node.js
	      // For now, we just implement the APIs using the primitives above.

	      exports.enroll = function (item, delay) {
	        item._timeoutID = setTimeout(item._onTimeout, delay);
	      };

	      exports.unenroll = function (item) {
	        clearTimeout(item._timeoutID);
	      };

	      exports.active = function (item) {};

	      // That's not how node.js implements it but the exposed api is the same.
	      exports.setImmediate = function (fn) {
	        var id = nextImmediateId++;
	        var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	        immediateIds[id] = true;

	        nextTick(function onNextTick() {
	          if (immediateIds[id]) {
	            // fn.call() is faster so we optimize for the common use-case
	            // @see http://jsperf.com/call-apply-segu
	            if (args) {
	              fn.apply(null, args);
	            } else {
	              fn.call(null);
	            }
	            // Prevent ids from leaking
	            exports.clearImmediate(id);
	          }
	        });

	        return id;
	      };

	      exports.clearImmediate = function (id) {
	        delete immediateIds[id];
	      };

	      /***/
	    },
	    /* 13 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (Buffer, process) {
	        var zlibBuffer = function (engine, buffer, callback) {
	          var flow = function () {
	            var chunk;
	            while (null !== (chunk = engine.read())) {
	              buffers.push(chunk);
	              nread += chunk.length;
	            }
	            engine.once("readable", flow);
	          };

	          var onError = function (err) {
	            engine.removeListener("end", onEnd);
	            engine.removeListener("readable", flow);
	            callback(err);
	          };

	          var onEnd = function () {
	            var buf = Buffer.concat(buffers, nread);
	            buffers = [];
	            callback(null, buf);
	            engine.close();
	          };

	          var buffers = [];
	          var nread = 0;

	          engine.on("error", onError);
	          engine.on("end", onEnd);

	          engine.end(buffer);
	          flow();
	        };

	        var zlibBufferSync = function (engine, buffer) {
	          if (typeof buffer === "string") buffer = new Buffer(buffer);
	          if (!Buffer.isBuffer(buffer)) throw new TypeError("Not a string or buffer");

	          var flushFlag = binding.Z_FINISH;

	          return engine._processChunk(buffer, flushFlag);
	        };

	        // generic zlib
	        // minimal 2-byte header
	        var Deflate = function (opts) {
	          if (!(this instanceof Deflate)) return new Deflate(opts);
	          Zlib.call(this, opts, binding.DEFLATE);
	        };

	        var Inflate = function (opts) {
	          if (!(this instanceof Inflate)) return new Inflate(opts);
	          Zlib.call(this, opts, binding.INFLATE);
	        };





	        // gzip - bigger header, same deflate compression
	        var Gzip = function (opts) {
	          if (!(this instanceof Gzip)) return new Gzip(opts);
	          Zlib.call(this, opts, binding.GZIP);
	        };

	        var Gunzip = function (opts) {
	          if (!(this instanceof Gunzip)) return new Gunzip(opts);
	          Zlib.call(this, opts, binding.GUNZIP);
	        };





	        // raw - no header
	        var DeflateRaw = function (opts) {
	          if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	          Zlib.call(this, opts, binding.DEFLATERAW);
	        };

	        var InflateRaw = function (opts) {
	          if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	          Zlib.call(this, opts, binding.INFLATERAW);
	        };




	        // auto-detect header.
	        var Unzip = function (opts) {
	          if (!(this instanceof Unzip)) return new Unzip(opts);
	          Zlib.call(this, opts, binding.UNZIP);
	        };




	        // the Zlib class they all inherit from
	        // This thing manages the queue of requests, and returns
	        // true or false if there is anything in the queue when
	        // you call the .write() method.

	        var Zlib = function (opts, mode) {
	          this._opts = opts = opts || {};
	          this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

	          Transform.call(this, opts);

	          if (opts.flush) {
	            if (opts.flush !== binding.Z_NO_FLUSH && opts.flush !== binding.Z_PARTIAL_FLUSH && opts.flush !== binding.Z_SYNC_FLUSH && opts.flush !== binding.Z_FULL_FLUSH && opts.flush !== binding.Z_FINISH && opts.flush !== binding.Z_BLOCK) {
	              throw new Error("Invalid flush flag: " + opts.flush);
	            }
	          }
	          this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

	          if (opts.chunkSize) {
	            if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
	              throw new Error("Invalid chunk size: " + opts.chunkSize);
	            }
	          }

	          if (opts.windowBits) {
	            if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
	              throw new Error("Invalid windowBits: " + opts.windowBits);
	            }
	          }

	          if (opts.level) {
	            if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
	              throw new Error("Invalid compression level: " + opts.level);
	            }
	          }

	          if (opts.memLevel) {
	            if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
	              throw new Error("Invalid memLevel: " + opts.memLevel);
	            }
	          }

	          if (opts.strategy) {
	            if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
	              throw new Error("Invalid strategy: " + opts.strategy);
	            }
	          }

	          if (opts.dictionary) {
	            if (!Buffer.isBuffer(opts.dictionary)) {
	              throw new Error("Invalid dictionary: it should be a Buffer instance");
	            }
	          }

	          this._binding = new binding.Zlib(mode);

	          var self = this;
	          this._hadError = false;
	          this._binding.onerror = function (message, errno) {
	            // there is no way to cleanly recover.
	            // continuing only obscures problems.
	            self._binding = null;
	            self._hadError = true;

	            var error = new Error(message);
	            error.errno = errno;
	            error.code = exports.codes[errno];
	            self.emit("error", error);
	          };

	          var level = exports.Z_DEFAULT_COMPRESSION;
	          if (typeof opts.level === "number") level = opts.level;

	          var strategy = exports.Z_DEFAULT_STRATEGY;
	          if (typeof opts.strategy === "number") strategy = opts.strategy;

	          this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

	          this._buffer = new Buffer(this._chunkSize);
	          this._offset = 0;
	          this._closed = false;
	          this._level = level;
	          this._strategy = strategy;

	          this.once("end", this.close);
	        };

	        // Copyright Joyent, Inc. and other Node contributors.
	        //
	        // Permission is hereby granted, free of charge, to any person obtaining a
	        // copy of this software and associated documentation files (the
	        // "Software"), to deal in the Software without restriction, including
	        // without limitation the rights to use, copy, modify, merge, publish,
	        // distribute, sublicense, and/or sell copies of the Software, and to permit
	        // persons to whom the Software is furnished to do so, subject to the
	        // following conditions:
	        //
	        // The above copyright notice and this permission notice shall be included
	        // in all copies or substantial portions of the Software.
	        //
	        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	        // USE OR OTHER DEALINGS IN THE SOFTWARE.

	        var Transform = __webpack_require__(19);

	        var binding = __webpack_require__(15);
	        var util = __webpack_require__(5);
	        var assert = __webpack_require__(24).ok;

	        // zlib doesn't provide these, so kludge them in following the same
	        // const naming scheme zlib uses.
	        binding.Z_MIN_WINDOWBITS = 8;
	        binding.Z_MAX_WINDOWBITS = 15;
	        binding.Z_DEFAULT_WINDOWBITS = 15;

	        // fewer than 64 bytes per chunk is stupid.
	        // technically it could work with as few as 8, but even 64 bytes
	        // is absurdly low.  Usually a MB or more is best.
	        binding.Z_MIN_CHUNK = 64;
	        binding.Z_MAX_CHUNK = Infinity;
	        binding.Z_DEFAULT_CHUNK = 16 * 1024;

	        binding.Z_MIN_MEMLEVEL = 1;
	        binding.Z_MAX_MEMLEVEL = 9;
	        binding.Z_DEFAULT_MEMLEVEL = 8;

	        binding.Z_MIN_LEVEL = -1;
	        binding.Z_MAX_LEVEL = 9;
	        binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

	        // expose all the zlib constants
	        Object.keys(binding).forEach(function (k) {
	          if (k.match(/^Z/)) exports[k] = binding[k];
	        });

	        // translation table for return codes.
	        exports.codes = {
	          Z_OK: binding.Z_OK,
	          Z_STREAM_END: binding.Z_STREAM_END,
	          Z_NEED_DICT: binding.Z_NEED_DICT,
	          Z_ERRNO: binding.Z_ERRNO,
	          Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
	          Z_DATA_ERROR: binding.Z_DATA_ERROR,
	          Z_MEM_ERROR: binding.Z_MEM_ERROR,
	          Z_BUF_ERROR: binding.Z_BUF_ERROR,
	          Z_VERSION_ERROR: binding.Z_VERSION_ERROR
	        };

	        Object.keys(exports.codes).forEach(function (k) {
	          exports.codes[exports.codes[k]] = k;
	        });

	        exports.Deflate = Deflate;
	        exports.Inflate = Inflate;
	        exports.Gzip = Gzip;
	        exports.Gunzip = Gunzip;
	        exports.DeflateRaw = DeflateRaw;
	        exports.InflateRaw = InflateRaw;
	        exports.Unzip = Unzip;

	        exports.createDeflate = function (o) {
	          return new Deflate(o);
	        };

	        exports.createInflate = function (o) {
	          return new Inflate(o);
	        };

	        exports.createDeflateRaw = function (o) {
	          return new DeflateRaw(o);
	        };

	        exports.createInflateRaw = function (o) {
	          return new InflateRaw(o);
	        };

	        exports.createGzip = function (o) {
	          return new Gzip(o);
	        };

	        exports.createGunzip = function (o) {
	          return new Gunzip(o);
	        };

	        exports.createUnzip = function (o) {
	          return new Unzip(o);
	        };


	        // Convenience methods.
	        // compress/decompress a string or buffer in one step.
	        exports.deflate = function (buffer, opts, callback) {
	          if (typeof opts === "function") {
	            callback = opts;
	            opts = {};
	          }
	          return zlibBuffer(new Deflate(opts), buffer, callback);
	        };

	        exports.deflateSync = function (buffer, opts) {
	          return zlibBufferSync(new Deflate(opts), buffer);
	        };

	        exports.gzip = function (buffer, opts, callback) {
	          if (typeof opts === "function") {
	            callback = opts;
	            opts = {};
	          }
	          return zlibBuffer(new Gzip(opts), buffer, callback);
	        };

	        exports.gzipSync = function (buffer, opts) {
	          return zlibBufferSync(new Gzip(opts), buffer);
	        };

	        exports.deflateRaw = function (buffer, opts, callback) {
	          if (typeof opts === "function") {
	            callback = opts;
	            opts = {};
	          }
	          return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	        };

	        exports.deflateRawSync = function (buffer, opts) {
	          return zlibBufferSync(new DeflateRaw(opts), buffer);
	        };

	        exports.unzip = function (buffer, opts, callback) {
	          if (typeof opts === "function") {
	            callback = opts;
	            opts = {};
	          }
	          return zlibBuffer(new Unzip(opts), buffer, callback);
	        };

	        exports.unzipSync = function (buffer, opts) {
	          return zlibBufferSync(new Unzip(opts), buffer);
	        };

	        exports.inflate = function (buffer, opts, callback) {
	          if (typeof opts === "function") {
	            callback = opts;
	            opts = {};
	          }
	          return zlibBuffer(new Inflate(opts), buffer, callback);
	        };

	        exports.inflateSync = function (buffer, opts) {
	          return zlibBufferSync(new Inflate(opts), buffer);
	        };

	        exports.gunzip = function (buffer, opts, callback) {
	          if (typeof opts === "function") {
	            callback = opts;
	            opts = {};
	          }
	          return zlibBuffer(new Gunzip(opts), buffer, callback);
	        };

	        exports.gunzipSync = function (buffer, opts) {
	          return zlibBufferSync(new Gunzip(opts), buffer);
	        };

	        exports.inflateRaw = function (buffer, opts, callback) {
	          if (typeof opts === "function") {
	            callback = opts;
	            opts = {};
	          }
	          return zlibBuffer(new InflateRaw(opts), buffer, callback);
	        };

	        exports.inflateRawSync = function (buffer, opts) {
	          return zlibBufferSync(new InflateRaw(opts), buffer);
	        };

	        util.inherits(Zlib, Transform);

	        Zlib.prototype.params = function (level, strategy, callback) {
	          if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
	            throw new RangeError("Invalid compression level: " + level);
	          }
	          if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
	            throw new TypeError("Invalid strategy: " + strategy);
	          }

	          if (this._level !== level || this._strategy !== strategy) {
	            var self = this;
	            this.flush(binding.Z_SYNC_FLUSH, function () {
	              self._binding.params(level, strategy);
	              if (!self._hadError) {
	                self._level = level;
	                self._strategy = strategy;
	                if (callback) callback();
	              }
	            });
	          } else {
	            process.nextTick(callback);
	          }
	        };

	        Zlib.prototype.reset = function () {
	          return this._binding.reset();
	        };

	        // This is the _flush function called by the transform class,
	        // internally, when the last chunk has been written.
	        Zlib.prototype._flush = function (callback) {
	          this._transform(new Buffer(0), "", callback);
	        };

	        Zlib.prototype.flush = function (kind, callback) {
	          var ws = this._writableState;

	          if (typeof kind === "function" || kind === void 0 && !callback) {
	            callback = kind;
	            kind = binding.Z_FULL_FLUSH;
	          }

	          if (ws.ended) {
	            if (callback) process.nextTick(callback);
	          } else if (ws.ending) {
	            if (callback) this.once("end", callback);
	          } else if (ws.needDrain) {
	            var self = this;
	            this.once("drain", function () {
	              self.flush(callback);
	            });
	          } else {
	            this._flushFlag = kind;
	            this.write(new Buffer(0), "", callback);
	          }
	        };

	        Zlib.prototype.close = function (callback) {
	          if (callback) process.nextTick(callback);

	          if (this._closed) return;

	          this._closed = true;

	          this._binding.close();

	          var self = this;
	          process.nextTick(function () {
	            self.emit("close");
	          });
	        };

	        Zlib.prototype._transform = function (chunk, encoding, cb) {
	          var flushFlag;
	          var ws = this._writableState;
	          var ending = ws.ending || ws.ended;
	          var last = ending && (!chunk || ws.length === chunk.length);

	          if (!chunk === null && !Buffer.isBuffer(chunk)) return cb(new Error("invalid input"));

	          // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	          // If it's explicitly flushing at some other time, then we use
	          // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	          // goodness.
	          if (last) flushFlag = binding.Z_FINISH;else {
	            flushFlag = this._flushFlag;
	            // once we've flushed the last of the queue, stop flushing and
	            // go back to the normal behavior.
	            if (chunk.length >= ws.length) {
	              this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
	            }
	          }

	          var self = this;
	          this._processChunk(chunk, flushFlag, cb);
	        };

	        Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
	          var callback = function (availInAfter, availOutAfter) {
	            if (self._hadError) return;

	            var have = availOutBefore - availOutAfter;
	            assert(have >= 0, "have should not go down");

	            if (have > 0) {
	              var out = self._buffer.slice(self._offset, self._offset + have);
	              self._offset += have;
	              // serve some output to the consumer.
	              if (async) {
	                self.push(out);
	              } else {
	                buffers.push(out);
	                nread += out.length;
	              }
	            }

	            // exhausted the output buffer, or used all the input create a new one.
	            if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	              availOutBefore = self._chunkSize;
	              self._offset = 0;
	              self._buffer = new Buffer(self._chunkSize);
	            }

	            if (availOutAfter === 0) {
	              // Not actually done.  Need to reprocess.
	              // Also, update the availInBefore to the availInAfter value,
	              // so that if we have to hit it a third (fourth, etc.) time,
	              // it'll have the correct byte counts.
	              inOff += availInBefore - availInAfter;
	              availInBefore = availInAfter;

	              if (!async) return true;

	              var newReq = self._binding.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
	              newReq.callback = callback; // this same function
	              newReq.buffer = chunk;
	              return;
	            }

	            if (!async) return false;

	            // finished with the chunk.
	            cb();
	          };

	          var availInBefore = chunk && chunk.length;
	          var availOutBefore = this._chunkSize - this._offset;
	          var inOff = 0;

	          var self = this;

	          var async = typeof cb === "function";

	          if (!async) {
	            var buffers = [];
	            var nread = 0;

	            var error;
	            this.on("error", function (er) {
	              error = er;
	            });

	            do {
	              var res = this._binding.writeSync(flushFlag, chunk, // in
	              inOff, // in_off
	              availInBefore, // in_len
	              this._buffer, // out
	              this._offset, //out_off
	              availOutBefore); // out_len
	            } while (!this._hadError && callback(res[0], res[1]));

	            if (this._hadError) {
	              throw error;
	            }

	            var buf = Buffer.concat(buffers, nread);
	            this.close();

	            return buf;
	          }

	          var req = this._binding.write(flushFlag, chunk, // in
	          inOff, // in_off
	          availInBefore, // in_len
	          this._buffer, // out
	          this._offset, //out_off
	          availOutBefore); // out_len

	          req.buffer = chunk;
	          req.callback = callback;
	        };

	        util.inherits(Deflate, Zlib);
	        util.inherits(Inflate, Zlib);
	        util.inherits(Gzip, Zlib);
	        util.inherits(Gunzip, Zlib);
	        util.inherits(DeflateRaw, Zlib);
	        util.inherits(InflateRaw, Zlib);
	        util.inherits(Unzip, Zlib);

	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(9).Buffer, __webpack_require__(11));

	      /***/
	    },
	    /* 14 */
	    /***/function (module, exports, __webpack_require__) {
	      var Stream = __webpack_require__(2);
	      var Response = __webpack_require__(29);
	      var Base64 = __webpack_require__(39);
	      var inherits = __webpack_require__(40);

	      var Request = module.exports = function (xhr, params) {
	        var self = this;
	        self.writable = true;
	        self.xhr = xhr;
	        self.body = [];

	        self.uri = (params.protocol || "http:") + "//" + params.host + (params.port ? ":" + params.port : "") + (params.path || "/");

	        if (typeof params.withCredentials === "undefined") {
	          params.withCredentials = true;
	        }

	        try {
	          xhr.withCredentials = params.withCredentials;
	        } catch (e) {}

	        if (params.responseType) try {
	          xhr.responseType = params.responseType;
	        } catch (e) {}

	        xhr.open(params.method || "GET", self.uri, true);

	        xhr.onerror = function (event) {
	          self.emit("error", new Error("Network error"));
	        };

	        self._headers = {};

	        if (params.headers) {
	          var keys = objectKeys(params.headers);
	          for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            if (!self.isSafeRequestHeader(key)) continue;
	            var value = params.headers[key];
	            self.setHeader(key, value);
	          }
	        }

	        if (params.auth) {
	          //basic auth
	          this.setHeader("Authorization", "Basic " + Base64.btoa(params.auth));
	        }

	        var res = new Response();
	        res.on("close", function () {
	          self.emit("close");
	        });

	        res.on("ready", function () {
	          self.emit("response", res);
	        });

	        res.on("error", function (err) {
	          self.emit("error", err);
	        });

	        xhr.onreadystatechange = function () {
	          // Fix for IE9 bug
	          // SCRIPT575: Could not complete the operation due to error c00c023f
	          // It happens when a request is aborted, calling the success callback anyway with readyState === 4
	          if (xhr.__aborted) return;
	          res.handle(xhr);
	        };
	      };

	      inherits(Request, Stream);

	      Request.prototype.setHeader = function (key, value) {
	        this._headers[key.toLowerCase()] = value;
	      };

	      Request.prototype.getHeader = function (key) {
	        return this._headers[key.toLowerCase()];
	      };

	      Request.prototype.removeHeader = function (key) {
	        delete this._headers[key.toLowerCase()];
	      };

	      Request.prototype.write = function (s) {
	        this.body.push(s);
	      };

	      Request.prototype.destroy = function (s) {
	        this.xhr.__aborted = true;
	        this.xhr.abort();
	        this.emit("close");
	      };

	      Request.prototype.end = function (s) {
	        if (s !== undefined) this.body.push(s);

	        var keys = objectKeys(this._headers);
	        for (var i = 0; i < keys.length; i++) {
	          var key = keys[i];
	          var value = this._headers[key];
	          if (isArray(value)) {
	            for (var j = 0; j < value.length; j++) {
	              this.xhr.setRequestHeader(key, value[j]);
	            }
	          } else this.xhr.setRequestHeader(key, value);
	        }

	        if (this.body.length === 0) {
	          this.xhr.send("");
	        } else if (typeof this.body[0] === "string") {
	          this.xhr.send(this.body.join(""));
	        } else if (isArray(this.body[0])) {
	          var body = [];
	          for (var i = 0; i < this.body.length; i++) {
	            body.push.apply(body, this.body[i]);
	          }
	          this.xhr.send(body);
	        } else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
	          var len = 0;
	          for (var i = 0; i < this.body.length; i++) {
	            len += this.body[i].length;
	          }
	          var body = new this.body[0].constructor(len);
	          var k = 0;

	          for (var i = 0; i < this.body.length; i++) {
	            var b = this.body[i];
	            for (var j = 0; j < b.length; j++) {
	              body[k++] = b[j];
	            }
	          }
	          this.xhr.send(body);
	        } else if (isXHR2Compatible(this.body[0])) {
	          this.xhr.send(this.body[0]);
	        } else {
	          var body = "";
	          for (var i = 0; i < this.body.length; i++) {
	            body += this.body[i].toString();
	          }
	          this.xhr.send(body);
	        }
	      };

	      // Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
	      Request.unsafeHeaders = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "content-transfer-encoding", "date", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "user-agent", "via"];

	      Request.prototype.isSafeRequestHeader = function (headerName) {
	        if (!headerName) return false;
	        return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
	      };

	      var objectKeys = Object.keys || function (obj) {
	        var keys = [];
	        for (var key in obj) keys.push(key);
	        return keys;
	      };

	      var isArray = Array.isArray || function (xs) {
	        return Object.prototype.toString.call(xs) === "[object Array]";
	      };

	      var indexOf = function (xs, x) {
	        if (xs.indexOf) return xs.indexOf(x);
	        for (var i = 0; i < xs.length; i++) {
	          if (xs[i] === x) return i;
	        }
	        return -1;
	      };

	      var isXHR2Compatible = function (obj) {
	        if (typeof Blob !== "undefined" && obj instanceof Blob) return true;
	        if (typeof ArrayBuffer !== "undefined" && obj instanceof ArrayBuffer) return true;
	        if (typeof FormData !== "undefined" && obj instanceof FormData) return true;
	      };


	      /***/
	    },
	    /* 15 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (process, Buffer) {
	        /**
	         * Emulate Node's zlib C++ layer for use by the JS layer in index.js
	         */
	        var Zlib = function (mode) {
	          if (mode < exports.DEFLATE || mode > exports.UNZIP) throw new TypeError("Bad argument");

	          this.mode = mode;
	          this.init_done = false;
	          this.write_in_progress = false;
	          this.pending_close = false;
	          this.windowBits = 0;
	          this.level = 0;
	          this.memLevel = 0;
	          this.strategy = 0;
	          this.dictionary = null;
	        };

	        // set method for Node buffers, used by pako
	        var bufferSet = function (data, offset) {
	          for (var i = 0; i < data.length; i++) {
	            this[offset + i] = data[i];
	          }
	        };

	        var msg = __webpack_require__(42);
	        var zstream = __webpack_require__(43);
	        var zlib_deflate = __webpack_require__(44);
	        var zlib_inflate = __webpack_require__(45);
	        var constants = __webpack_require__(46);

	        for (var key in constants) {
	          exports[key] = constants[key];
	        }

	        // zlib modes
	        exports.NONE = 0;
	        exports.DEFLATE = 1;
	        exports.INFLATE = 2;
	        exports.GZIP = 3;
	        exports.GUNZIP = 4;
	        exports.DEFLATERAW = 5;
	        exports.INFLATERAW = 6;
	        exports.UNZIP = 7;

	        Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
	          this.windowBits = windowBits;
	          this.level = level;
	          this.memLevel = memLevel;
	          this.strategy = strategy;
	          // dictionary not supported.

	          if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) this.windowBits += 16;

	          if (this.mode === exports.UNZIP) this.windowBits += 32;

	          if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) this.windowBits = -this.windowBits;

	          this.strm = new zstream();

	          switch (this.mode) {
	            case exports.DEFLATE:
	            case exports.GZIP:
	            case exports.DEFLATERAW:
	              var status = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
	              break;
	            case exports.INFLATE:
	            case exports.GUNZIP:
	            case exports.INFLATERAW:
	            case exports.UNZIP:
	              var status = zlib_inflate.inflateInit2(this.strm, this.windowBits);
	              break;
	            default:
	              throw new Error("Unknown mode " + this.mode);
	          }

	          if (status !== exports.Z_OK) {
	            this._error(status);
	            return;
	          }

	          this.write_in_progress = false;
	          this.init_done = true;
	        };

	        Zlib.prototype.params = function () {
	          throw new Error("deflateParams Not supported");
	        };

	        Zlib.prototype._writeCheck = function () {
	          if (!this.init_done) throw new Error("write before init");

	          if (this.mode === exports.NONE) throw new Error("already finalized");

	          if (this.write_in_progress) throw new Error("write already in progress");

	          if (this.pending_close) throw new Error("close is pending");
	        };

	        Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
	          this._writeCheck();
	          this.write_in_progress = true;

	          var self = this;
	          process.nextTick(function () {
	            self.write_in_progress = false;
	            var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	            self.callback(res[0], res[1]);

	            if (self.pending_close) self.close();
	          });

	          return this;
	        };

	        Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
	          this._writeCheck();
	          return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	        };

	        Zlib.prototype._write = function (flush, input, in_off, in_len, out, out_off, out_len) {
	          this.write_in_progress = true;

	          if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
	            throw new Error("Invalid flush value");
	          }

	          if (input == null) {
	            input = new Buffer(0);
	            in_len = 0;
	            in_off = 0;
	          }

	          if (out._set) out.set = out._set;else out.set = bufferSet;

	          var strm = this.strm;
	          strm.avail_in = in_len;
	          strm.input = input;
	          strm.next_in = in_off;
	          strm.avail_out = out_len;
	          strm.output = out;
	          strm.next_out = out_off;

	          switch (this.mode) {
	            case exports.DEFLATE:
	            case exports.GZIP:
	            case exports.DEFLATERAW:
	              var status = zlib_deflate.deflate(strm, flush);
	              break;
	            case exports.UNZIP:
	            case exports.INFLATE:
	            case exports.GUNZIP:
	            case exports.INFLATERAW:
	              var status = zlib_inflate.inflate(strm, flush);
	              break;
	            default:
	              throw new Error("Unknown mode " + this.mode);
	          }

	          if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
	            this._error(status);
	          }

	          this.write_in_progress = false;
	          return [strm.avail_in, strm.avail_out];
	        };

	        Zlib.prototype.close = function () {
	          if (this.write_in_progress) {
	            this.pending_close = true;
	            return;
	          }

	          this.pending_close = false;

	          if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
	            zlib_deflate.deflateEnd(this.strm);
	          } else {
	            zlib_inflate.inflateEnd(this.strm);
	          }

	          this.mode = exports.NONE;
	        };

	        Zlib.prototype.reset = function () {
	          switch (this.mode) {
	            case exports.DEFLATE:
	            case exports.DEFLATERAW:
	              var status = zlib_deflate.deflateReset(this.strm);
	              break;
	            case exports.INFLATE:
	            case exports.INFLATERAW:
	              var status = zlib_inflate.inflateReset(this.strm);
	              break;
	          }

	          if (status !== exports.Z_OK) {
	            this._error(status);
	          }
	        };

	        Zlib.prototype._error = function (status) {
	          this.onerror(msg[status] + ": " + this.strm.msg, status);

	          this.write_in_progress = false;
	          if (this.pending_close) this.close();
	        };

	        exports.Zlib = Zlib;

	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(11), __webpack_require__(9).Buffer);

	      /***/
	    },
	    /* 16 */
	    /***/function (module, exports, __webpack_require__) {
	      module.exports = function isBuffer(arg) {
	        return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
	      }

	      /***/;
	    },
	    /* 17 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";

	      exports.decode = exports.parse = __webpack_require__(32);
	      exports.encode = exports.stringify = __webpack_require__(33);


	      /***/
	    },
	    /* 18 */
	    /***/function (module, exports, __webpack_require__) {
	      var __WEBPACK_AMD_DEFINE_RESULT__; /* WEBPACK VAR INJECTION */(function (module, global) {
	        /*! https://mths.be/punycode v1.3.2 by @mathias */
	        ;(function (root) {
	          /*--------------------------------------------------------------------------*/

	          /**
	           * A generic error utility function.
	           * @private
	           * @param {String} type The error type.
	           * @returns {Error} Throws a `RangeError` with the applicable error message.
	           */
	          var error = function (type) {
	            throw RangeError(errors[type]);
	          };

	          /**
	           * A generic `Array#map` utility function.
	           * @private
	           * @param {Array} array The array to iterate over.
	           * @param {Function} callback The function that gets called for every array
	           * item.
	           * @returns {Array} A new array of values returned by the callback function.
	           */
	          var map = function (array, fn) {
	            var length = array.length;
	            var result = [];
	            while (length--) {
	              result[length] = fn(array[length]);
	            }
	            return result;
	          };

	          /**
	           * A simple `Array#map`-like wrapper to work with domain name strings or email
	           * addresses.
	           * @private
	           * @param {String} domain The domain name or email address.
	           * @param {Function} callback The function that gets called for every
	           * character.
	           * @returns {Array} A new string of characters returned by the callback
	           * function.
	           */
	          var mapDomain = function (string, fn) {
	            var parts = string.split("@");
	            var result = "";
	            if (parts.length > 1) {
	              // In email addresses, only the domain name should be punycoded. Leave
	              // the local part (i.e. everything up to `@`) intact.
	              result = parts[0] + "@";
	              string = parts[1];
	            }
	            // Avoid `split(regex)` for IE8 compatibility. See #17.
	            string = string.replace(regexSeparators, ".");
	            var labels = string.split(".");
	            var encoded = map(labels, fn).join(".");
	            return result + encoded;
	          };

	          /**
	           * Creates an array containing the numeric code points of each Unicode
	           * character in the string. While JavaScript uses UCS-2 internally,
	           * this function will convert a pair of surrogate halves (each of which
	           * UCS-2 exposes as separate characters) into a single code point,
	           * matching UTF-16.
	           * @see `punycode.ucs2.encode`
	           * @see <https://mathiasbynens.be/notes/javascript-encoding>
	           * @memberOf punycode.ucs2
	           * @name decode
	           * @param {String} string The Unicode input string (UCS-2).
	           * @returns {Array} The new array of code points.
	           */
	          var ucs2decode = function (string) {
	            var output = [],
	                counter = 0,
	                length = string.length,
	                value,
	                extra;
	            while (counter < length) {
	              value = string.charCodeAt(counter++);
	              if (value >= 55296 && value <= 56319 && counter < length) {
	                // high surrogate, and there is a next character
	                extra = string.charCodeAt(counter++);
	                if ((extra & 64512) == 56320) {
	                  // low surrogate
	                  output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
	                } else {
	                  // unmatched surrogate; only append this code unit, in case the next
	                  // code unit is the high surrogate of a surrogate pair
	                  output.push(value);
	                  counter--;
	                }
	              } else {
	                output.push(value);
	              }
	            }
	            return output;
	          };

	          /**
	           * Creates a string based on an array of numeric code points.
	           * @see `punycode.ucs2.decode`
	           * @memberOf punycode.ucs2
	           * @name encode
	           * @param {Array} codePoints The array of numeric code points.
	           * @returns {String} The new Unicode string (UCS-2).
	           */
	          var ucs2encode = function (array) {
	            return map(array, function (value) {
	              var output = "";
	              if (value > 65535) {
	                value -= 65536;
	                output += stringFromCharCode(value >>> 10 & 1023 | 55296);
	                value = 56320 | value & 1023;
	              }
	              output += stringFromCharCode(value);
	              return output;
	            }).join("");
	          };

	          /**
	           * Converts a basic code point into a digit/integer.
	           * @see `digitToBasic()`
	           * @private
	           * @param {Number} codePoint The basic numeric code point value.
	           * @returns {Number} The numeric value of a basic code point (for use in
	           * representing integers) in the range `0` to `base - 1`, or `base` if
	           * the code point does not represent a value.
	           */
	          var basicToDigit = function (codePoint) {
	            if (codePoint - 48 < 10) {
	              return codePoint - 22;
	            }
	            if (codePoint - 65 < 26) {
	              return codePoint - 65;
	            }
	            if (codePoint - 97 < 26) {
	              return codePoint - 97;
	            }
	            return base;
	          };

	          /**
	           * Converts a digit/integer into a basic code point.
	           * @see `basicToDigit()`
	           * @private
	           * @param {Number} digit The numeric value of a basic code point.
	           * @returns {Number} The basic code point whose value (when used for
	           * representing integers) is `digit`, which needs to be in the range
	           * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	           * used; else, the lowercase form is used. The behavior is undefined
	           * if `flag` is non-zero and `digit` has no uppercase form.
	           */
	          var digitToBasic = function (digit, flag) {
	            //  0..25 map to ASCII a..z or A..Z
	            // 26..35 map to ASCII 0..9
	            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	          };

	          /**
	           * Bias adaptation function as per section 3.4 of RFC 3492.
	           * http://tools.ietf.org/html/rfc3492#section-3.4
	           * @private
	           */
	          var adapt = function (delta, numPoints, firstTime) {
	            var k = 0;
	            delta = firstTime ? floor(delta / damp) : delta >> 1;
	            delta += floor(delta / numPoints);
	            for (; delta > baseMinusTMin * tMax >> 1; k += base) {
	              delta = floor(delta / baseMinusTMin);
	            }
	            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	          };

	          /**
	           * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	           * symbols.
	           * @memberOf punycode
	           * @param {String} input The Punycode string of ASCII-only symbols.
	           * @returns {String} The resulting string of Unicode symbols.
	           */
	          var decode = function (input) {
	            // Don't use UCS-2
	            var output = [],
	                inputLength = input.length,
	                out,
	                i = 0,
	                n = initialN,
	                bias = initialBias,
	                basic,
	                j,
	                index,
	                oldi,
	                w,
	                k,
	                digit,
	                t,


	            /** Cached calculation results */
	            baseMinusT;

	            // Handle the basic code points: let `basic` be the number of input code
	            // points before the last delimiter, or `0` if there is none, then copy
	            // the first basic code points to the output.

	            basic = input.lastIndexOf(delimiter);
	            if (basic < 0) {
	              basic = 0;
	            }

	            for (j = 0; j < basic; ++j) {
	              // if it's not a basic code point
	              if (input.charCodeAt(j) >= 128) {
	                error("not-basic");
	              }
	              output.push(input.charCodeAt(j));
	            }

	            // Main decoding loop: start just after the last delimiter if any basic code
	            // points were copied; start at the beginning otherwise.

	            for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
	              // `index` is the index of the next character to be consumed.
	              // Decode a generalized variable-length integer into `delta`,
	              // which gets added to `i`. The overflow checking is easier
	              // if we increase `i` as we go, then subtract off its starting
	              // value at the end to obtain `delta`.
	              for (oldi = i, w = 1, k = base;; k += base) {
	                if (index >= inputLength) {
	                  error("invalid-input");
	                }

	                digit = basicToDigit(input.charCodeAt(index++));

	                if (digit >= base || digit > floor((maxInt - i) / w)) {
	                  error("overflow");
	                }

	                i += digit * w;
	                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

	                if (digit < t) {
	                  break;
	                }

	                baseMinusT = base - t;
	                if (w > floor(maxInt / baseMinusT)) {
	                  error("overflow");
	                }

	                w *= baseMinusT;
	              }

	              out = output.length + 1;
	              bias = adapt(i - oldi, out, oldi == 0);

	              // `i` was supposed to wrap around from `out` to `0`,
	              // incrementing `n` each time, so we'll fix that now:
	              if (floor(i / out) > maxInt - n) {
	                error("overflow");
	              }

	              n += floor(i / out);
	              i %= out;

	              // Insert `n` at position `i` of the output
	              output.splice(i++, 0, n);
	            }

	            return ucs2encode(output);
	          };

	          /**
	           * Converts a string of Unicode symbols (e.g. a domain name label) to a
	           * Punycode string of ASCII-only symbols.
	           * @memberOf punycode
	           * @param {String} input The string of Unicode symbols.
	           * @returns {String} The resulting Punycode string of ASCII-only symbols.
	           */
	          var encode = function (input) {
	            var n,
	                delta,
	                handledCPCount,
	                basicLength,
	                bias,
	                j,
	                m,
	                q,
	                k,
	                t,
	                currentValue,
	                output = [],


	            /** `inputLength` will hold the number of code points in `input`. */
	            inputLength,


	            /** Cached calculation results */
	            handledCPCountPlusOne,
	                baseMinusT,
	                qMinusT;

	            // Convert the input in UCS-2 to Unicode
	            input = ucs2decode(input);

	            // Cache the length
	            inputLength = input.length;

	            // Initialize the state
	            n = initialN;
	            delta = 0;
	            bias = initialBias;

	            // Handle the basic code points
	            for (j = 0; j < inputLength; ++j) {
	              currentValue = input[j];
	              if (currentValue < 128) {
	                output.push(stringFromCharCode(currentValue));
	              }
	            }

	            handledCPCount = basicLength = output.length;

	            // `handledCPCount` is the number of code points that have been handled;
	            // `basicLength` is the number of basic code points.

	            // Finish the basic string - if it is not empty - with a delimiter
	            if (basicLength) {
	              output.push(delimiter);
	            }

	            // Main encoding loop:
	            while (handledCPCount < inputLength) {
	              // All non-basic code points < n have been handled already. Find the next
	              // larger one:
	              for (m = maxInt, j = 0; j < inputLength; ++j) {
	                currentValue = input[j];
	                if (currentValue >= n && currentValue < m) {
	                  m = currentValue;
	                }
	              }

	              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
	              // but guard against overflow
	              handledCPCountPlusOne = handledCPCount + 1;
	              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
	                error("overflow");
	              }

	              delta += (m - n) * handledCPCountPlusOne;
	              n = m;

	              for (j = 0; j < inputLength; ++j) {
	                currentValue = input[j];

	                if (currentValue < n && ++delta > maxInt) {
	                  error("overflow");
	                }

	                if (currentValue == n) {
	                  // Represent delta as a generalized variable-length integer
	                  for (q = delta, k = base;; k += base) {
	                    t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
	                    if (q < t) {
	                      break;
	                    }
	                    qMinusT = q - t;
	                    baseMinusT = base - t;
	                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
	                    q = floor(qMinusT / baseMinusT);
	                  }

	                  output.push(stringFromCharCode(digitToBasic(q, 0)));
	                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	                  delta = 0;
	                  ++handledCPCount;
	                }
	              }

	              ++delta;
	              ++n;
	            }
	            return output.join("");
	          };

	          /**
	           * Converts a Punycode string representing a domain name or an email address
	           * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	           * it doesn't matter if you call it on a string that has already been
	           * converted to Unicode.
	           * @memberOf punycode
	           * @param {String} input The Punycoded domain name or email address to
	           * convert to Unicode.
	           * @returns {String} The Unicode representation of the given Punycode
	           * string.
	           */
	          var toUnicode = function (input) {
	            return mapDomain(input, function (string) {
	              return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
	            });
	          };

	          /**
	           * Converts a Unicode string representing a domain name or an email address to
	           * Punycode. Only the non-ASCII parts of the domain name will be converted,
	           * i.e. it doesn't matter if you call it with a domain that's already in
	           * ASCII.
	           * @memberOf punycode
	           * @param {String} input The domain name or email address to convert, as a
	           * Unicode string.
	           * @returns {String} The Punycode representation of the given domain name or
	           * email address.
	           */
	          var toASCII = function (input) {
	            return mapDomain(input, function (string) {
	              return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
	            });
	          };

	          /** Detect free variables */
	          var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
	          var freeModule = typeof module == "object" && module && !module.nodeType && module;
	          var freeGlobal = typeof global == "object" && global;
	          if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
	            root = freeGlobal;
	          }

	          /**
	           * The `punycode` object.
	           * @name punycode
	           * @type Object
	           */
	          var punycode,



	          /** Highest positive signed 32-bit float value */
	          maxInt = 2147483647,

	          // aka. 0x7FFFFFFF or 2^31-1

	          /** Bootstring parameters */
	          base = 36,
	              tMin = 1,
	              tMax = 26,
	              skew = 38,
	              damp = 700,
	              initialBias = 72,
	              initialN = 128,

	          // 0x80
	          delimiter = "-",

	          // '\x2D'

	          /** Regular expressions */
	          regexPunycode = /^xn--/,
	              regexNonASCII = /[^\x20-\x7E]/,

	          // unprintable ASCII chars + non-ASCII chars
	          regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,

	          // RFC 3490 separators

	          /** Error messages */
	          errors = {
	            overflow: "Overflow: input needs wider integers to process",
	            "not-basic": "Illegal input >= 0x80 (not a basic code point)",
	            "invalid-input": "Invalid input"
	          },



	          /** Convenience shortcuts */
	          baseMinusTMin = base - tMin,
	              floor = Math.floor,
	              stringFromCharCode = String.fromCharCode,



	          /** Temporary variable */
	          key;

	          /*--------------------------------------------------------------------------*/

	          /** Define the public API */
	          punycode = {
	            /**
	             * A string representing the current Punycode.js version number.
	             * @memberOf punycode
	             * @type String
	             */
	            version: "1.3.2",
	            /**
	             * An object of methods to convert from JavaScript's internal character
	             * representation (UCS-2) to Unicode code points, and back.
	             * @see <https://mathiasbynens.be/notes/javascript-encoding>
	             * @memberOf punycode
	             * @type Object
	             */
	            ucs2: {
	              decode: ucs2decode,
	              encode: ucs2encode
	            },
	            decode: decode,
	            encode: encode,
	            toASCII: toASCII,
	            toUnicode: toUnicode
	          };

	          /** Expose `punycode` */
	          // Some AMD build optimizers, like r.js, check for specific condition patterns
	          // like the following:
	          if (true) {
	            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
	              return punycode;
	            }).call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	          } else if (freeExports && freeModule) {
	            if (module.exports == freeExports) {
	              // in Node.js or RingoJS v0.8.0+
	              freeModule.exports = punycode;
	            } else {
	              // in Narwhal or RingoJS v0.7.0-
	              for (key in punycode) {
	                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
	              }
	            }
	          } else {
	            // in Rhino or a web browser
	            root.punycode = punycode;
	          }
	        })(this);

	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(41)(module), (function () {
	        return this;
	      })());

	      /***/
	    },
	    /* 19 */
	    /***/function (module, exports, __webpack_require__) {
	      module.exports = __webpack_require__(37)


	      /***/;
	    },
	    /* 20 */
	    /***/function (module, exports, __webpack_require__) {
	      exports = module.exports = __webpack_require__(34);
	      exports.Stream = __webpack_require__(2);
	      exports.Readable = exports;
	      exports.Writable = __webpack_require__(35);
	      exports.Duplex = __webpack_require__(36);
	      exports.Transform = __webpack_require__(37);
	      exports.PassThrough = __webpack_require__(38);


	      /***/
	    },
	    /* 21 */
	    /***/function (module, exports, __webpack_require__) {
	      module.exports = __webpack_require__(35)


	      /***/;
	    },
	    /* 22 */
	    /***/function (module, exports, __webpack_require__) {
	      module.exports = __webpack_require__(36)


	      /***/;
	    },
	    /* 23 */
	    /***/function (module, exports, __webpack_require__) {
	      module.exports = __webpack_require__(38)


	      /***/;
	    },
	    /* 24 */
	    /***/function (module, exports, __webpack_require__) {
	      var replacer = function (key, value) {
	        if (util.isUndefined(value)) {
	          return "" + value;
	        }
	        if (util.isNumber(value) && !isFinite(value)) {
	          return value.toString();
	        }
	        if (util.isFunction(value) || util.isRegExp(value)) {
	          return value.toString();
	        }
	        return value;
	      };

	      var truncate = function (s, n) {
	        if (util.isString(s)) {
	          return s.length < n ? s : s.slice(0, n);
	        } else {
	          return s;
	        }
	      };

	      var getMessage = function (self) {
	        return truncate(JSON.stringify(self.actual, replacer), 128) + " " + self.operator + " " + truncate(JSON.stringify(self.expected, replacer), 128);
	      };

	      // At present only the three keys mentioned above are used and
	      // understood by the spec. Implementations or sub modules can pass
	      // other keys to the AssertionError's constructor - they will be
	      // ignored.

	      // 3. All of the following functions must throw an AssertionError
	      // when a corresponding condition is not met, with a message that
	      // may be undefined if not provided.  All assertion methods provide
	      // both the actual and expected values to the assertion error for
	      // display purposes.

	      var fail = function (actual, expected, message, operator, stackStartFunction) {
	        throw new assert.AssertionError({
	          message: message,
	          actual: actual,
	          expected: expected,
	          operator: operator,
	          stackStartFunction: stackStartFunction
	        });
	      };

	      // 4. Pure assertion tests whether a value is truthy, as determined
	      // by !!guard.
	      // assert.ok(guard, message_opt);
	      // This statement is equivalent to assert.equal(true, !!guard,
	      // message_opt);. To test strictly for the value true, use
	      // assert.strictEqual(true, guard, message_opt);.

	      var ok = function (value, message) {
	        if (!value) fail(value, true, message, "==", assert.ok);
	      };

	      var _deepEqual = function (actual, expected) {
	        // 7.1. All identical values are equivalent, as determined by ===.
	        if (actual === expected) {
	          return true;
	        } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	          if (actual.length != expected.length) return false;

	          for (var i = 0; i < actual.length; i++) {
	            if (actual[i] !== expected[i]) return false;
	          }

	          return true;

	          // 7.2. If the expected value is a Date object, the actual value is
	          // equivalent if it is also a Date object that refers to the same time.
	        } else if (util.isDate(actual) && util.isDate(expected)) {
	          return actual.getTime() === expected.getTime();

	          // 7.3 If the expected value is a RegExp object, the actual value is
	          // equivalent if it is also a RegExp object with the same source and
	          // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	        } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	          return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;

	          // 7.4. Other pairs that do not both pass typeof value == 'object',
	          // equivalence is determined by ==.
	        } else if (!util.isObject(actual) && !util.isObject(expected)) {
	          return actual == expected;

	          // 7.5 For all other Object pairs, including Array objects, equivalence is
	          // determined by having the same number of owned properties (as verified
	          // with Object.prototype.hasOwnProperty.call), the same set of keys
	          // (although not necessarily the same order), equivalent values for every
	          // corresponding key, and an identical 'prototype' property. Note: this
	          // accounts for both named and indexed properties on Arrays.
	        } else {
	          return objEquiv(actual, expected);
	        }
	      };

	      var isArguments = function (object) {
	        return Object.prototype.toString.call(object) == "[object Arguments]";
	      };

	      var objEquiv = function (a, b) {
	        if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b)) return false;
	        // an identical 'prototype' property.
	        if (a.prototype !== b.prototype) return false;
	        // if one is a primitive, the other must be same
	        if (util.isPrimitive(a) || util.isPrimitive(b)) {
	          return a === b;
	        }
	        var aIsArgs = isArguments(a),
	            bIsArgs = isArguments(b);
	        if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
	        if (aIsArgs) {
	          a = pSlice.call(a);
	          b = pSlice.call(b);
	          return _deepEqual(a, b);
	        }
	        var ka = objectKeys(a),
	            kb = objectKeys(b),
	            key,
	            i;
	        // having the same number of owned properties (keys incorporates
	        // hasOwnProperty)
	        if (ka.length != kb.length) return false;
	        //the same set of keys (although not necessarily the same order),
	        ka.sort();
	        kb.sort();
	        //~~~cheap key test
	        for (i = ka.length - 1; i >= 0; i--) {
	          if (ka[i] != kb[i]) return false;
	        }
	        //equivalent values for every corresponding key, and
	        //~~~possibly expensive deep test
	        for (i = ka.length - 1; i >= 0; i--) {
	          key = ka[i];
	          if (!_deepEqual(a[key], b[key])) return false;
	        }
	        return true;
	      };

	      var expectedException = function (actual, expected) {
	        if (!actual || !expected) {
	          return false;
	        }

	        if (Object.prototype.toString.call(expected) == "[object RegExp]") {
	          return expected.test(actual);
	        } else if (actual instanceof expected) {
	          return true;
	        } else if (expected.call({}, actual) === true) {
	          return true;
	        }

	        return false;
	      };

	      var _throws = function (shouldThrow, block, expected, message) {
	        var actual;

	        if (util.isString(expected)) {
	          message = expected;
	          expected = null;
	        }

	        try {
	          block();
	        } catch (e) {
	          actual = e;
	        }

	        message = (expected && expected.name ? " (" + expected.name + ")." : ".") + (message ? " " + message : ".");

	        if (shouldThrow && !actual) {
	          fail(actual, expected, "Missing expected exception" + message);
	        }

	        if (!shouldThrow && expectedException(actual, expected)) {
	          fail(actual, expected, "Got unwanted exception" + message);
	        }

	        if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
	          throw actual;
	        }
	      };

	      // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	      //
	      // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	      //
	      // Originally from narwhal.js (http://narwhaljs.org)
	      // Copyright (c) 2009 Thomas Robinson <280north.com>
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a copy
	      // of this software and associated documentation files (the 'Software'), to
	      // deal in the Software without restriction, including without limitation the
	      // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	      // sell copies of the Software, and to permit persons to whom the Software is
	      // furnished to do so, subject to the following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included in
	      // all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	      // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	      // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	      // when used in node, this will actually load the util module we depend on
	      // versus loading the builtin util module as happens otherwise
	      // this is a bug in node module loading as far as I am concerned
	      var util = __webpack_require__(5);

	      var pSlice = Array.prototype.slice;
	      var hasOwn = Object.prototype.hasOwnProperty;

	      // 1. The assert module provides functions that throw
	      // AssertionError's when particular conditions are not met. The
	      // assert module must conform to the following interface.

	      var assert = module.exports = ok;

	      // 2. The AssertionError is defined in assert.
	      // new assert.AssertionError({ message: message,
	      //                             actual: actual,
	      //                             expected: expected })

	      assert.AssertionError = function AssertionError(options) {
	        this.name = "AssertionError";
	        this.actual = options.actual;
	        this.expected = options.expected;
	        this.operator = options.operator;
	        if (options.message) {
	          this.message = options.message;
	          this.generatedMessage = false;
	        } else {
	          this.message = getMessage(this);
	          this.generatedMessage = true;
	        }
	        var stackStartFunction = options.stackStartFunction || fail;

	        if (Error.captureStackTrace) {
	          Error.captureStackTrace(this, stackStartFunction);
	        } else {
	          // non v8 browsers so we can have a stacktrace
	          var err = new Error();
	          if (err.stack) {
	            var out = err.stack;

	            // try to strip useless frames
	            var fn_name = stackStartFunction.name;
	            var idx = out.indexOf("\n" + fn_name);
	            if (idx >= 0) {
	              // once we have located the function frame
	              // we need to strip out everything before it (and its line)
	              var next_line = out.indexOf("\n", idx + 1);
	              out = out.substring(next_line + 1);
	            }

	            this.stack = out;
	          }
	        }
	      };

	      // assert.AssertionError instanceof Error
	      util.inherits(assert.AssertionError, Error);

	      // EXTENSION! allows for well behaved errors defined elsewhere.
	      assert.fail = fail;
	      assert.ok = ok;

	      // 5. The equality assertion tests shallow, coercive equality with
	      // ==.
	      // assert.equal(actual, expected, message_opt);

	      assert.equal = function equal(actual, expected, message) {
	        if (actual != expected) fail(actual, expected, message, "==", assert.equal);
	      };

	      // 6. The non-equality assertion tests for whether two objects are not equal
	      // with != assert.notEqual(actual, expected, message_opt);

	      assert.notEqual = function notEqual(actual, expected, message) {
	        if (actual == expected) {
	          fail(actual, expected, message, "!=", assert.notEqual);
	        }
	      };

	      // 7. The equivalence assertion tests a deep equality relation.
	      // assert.deepEqual(actual, expected, message_opt);

	      assert.deepEqual = function deepEqual(actual, expected, message) {
	        if (!_deepEqual(actual, expected)) {
	          fail(actual, expected, message, "deepEqual", assert.deepEqual);
	        }
	      };

	      // 8. The non-equivalence assertion tests for any deep inequality.
	      // assert.notDeepEqual(actual, expected, message_opt);

	      assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	        if (_deepEqual(actual, expected)) {
	          fail(actual, expected, message, "notDeepEqual", assert.notDeepEqual);
	        }
	      };

	      // 9. The strict equality assertion tests strict equality, as determined by ===.
	      // assert.strictEqual(actual, expected, message_opt);

	      assert.strictEqual = function strictEqual(actual, expected, message) {
	        if (actual !== expected) {
	          fail(actual, expected, message, "===", assert.strictEqual);
	        }
	      };

	      // 10. The strict non-equality assertion tests for strict inequality, as
	      // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	      assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	        if (actual === expected) {
	          fail(actual, expected, message, "!==", assert.notStrictEqual);
	        }
	      };

	      // 11. Expected to throw an error:
	      // assert.throws(block, Error_opt, message_opt);

	      assert.throws = function (block, /*optional*/error, /*optional*/message) {
	        _throws.apply(this, [true].concat(pSlice.call(arguments)));
	      };

	      // EXTENSION! This is annoying to write outside this module.
	      assert.doesNotThrow = function (block, /*optional*/message) {
	        _throws.apply(this, [false].concat(pSlice.call(arguments)));
	      };

	      assert.ifError = function (err) {
	        if (err) {
	          throw err;
	        }
	      };

	      var objectKeys = Object.keys || function (obj) {
	        var keys = [];
	        for (var key in obj) {
	          if (hasOwn.call(obj, key)) keys.push(key);
	        }
	        return keys;
	      };


	      /***/
	    },
	    /* 25 */
	    /***/function (module, exports, __webpack_require__) {
	      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	        var e,
	            m,
	            eLen = nBytes * 8 - mLen - 1,
	            eMax = (1 << eLen) - 1,
	            eBias = eMax >> 1,
	            nBits = -7,
	            i = isLE ? nBytes - 1 : 0,
	            d = isLE ? -1 : 1,
	            s = buffer[offset + i];

	        i += d;

	        e = s & (1 << -nBits) - 1;
	        s >>= -nBits;
	        nBits += eLen;
	        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

	        m = e & (1 << -nBits) - 1;
	        e >>= -nBits;
	        nBits += mLen;
	        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

	        if (e === 0) {
	          e = 1 - eBias;
	        } else if (e === eMax) {
	          return m ? NaN : (s ? -1 : 1) * Infinity;
	        } else {
	          m = m + Math.pow(2, mLen);
	          e = e - eBias;
	        }
	        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	      };

	      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	        var e,
	            m,
	            c,
	            eLen = nBytes * 8 - mLen - 1,
	            eMax = (1 << eLen) - 1,
	            eBias = eMax >> 1,
	            rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
	            i = isLE ? 0 : nBytes - 1,
	            d = isLE ? 1 : -1,
	            s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

	        value = Math.abs(value);

	        if (isNaN(value) || value === Infinity) {
	          m = isNaN(value) ? 1 : 0;
	          e = eMax;
	        } else {
	          e = Math.floor(Math.log(value) / Math.LN2);
	          if (value * (c = Math.pow(2, -e)) < 1) {
	            e--;
	            c *= 2;
	          }
	          if (e + eBias >= 1) {
	            value += rt / c;
	          } else {
	            value += rt * Math.pow(2, 1 - eBias);
	          }
	          if (value * c >= 2) {
	            e++;
	            c /= 2;
	          }

	          if (e + eBias >= eMax) {
	            m = 0;
	            e = eMax;
	          } else if (e + eBias >= 1) {
	            m = (value * c - 1) * Math.pow(2, mLen);
	            e = e + eBias;
	          } else {
	            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	            e = 0;
	          }
	        }

	        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);

	        e = e << mLen | m;
	        eLen += mLen;
	        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);

	        buffer[offset + i - d] |= s * 128;
	      };


	      /***/
	    },
	    /* 26 */
	    /***/function (module, exports, __webpack_require__) {


	      /**
	       * isArray
	       */

	      var isArray = Array.isArray;

	      /**
	       * toString
	       */

	      var str = Object.prototype.toString;

	      /**
	       * Whether or not the given `val`
	       * is an array.
	       *
	       * example:
	       *
	       *        isArray([]);
	       *        // > true
	       *        isArray(arguments);
	       *        // > false
	       *        isArray('');
	       *        // > false
	       *
	       * @param {mixed} val
	       * @return {bool}
	       */

	      module.exports = isArray || function (val) {
	        return !!val && "[object Array]" == str.call(val);
	      };


	      /***/
	    },
	    /* 27 */
	    /***/function (module, exports, __webpack_require__) {
	      var drainQueue = function () {
	        if (draining) {
	          return;
	        }
	        draining = true;
	        var currentQueue;
	        var len = queue.length;
	        while (len) {
	          currentQueue = queue;
	          queue = [];
	          var i = -1;
	          while (++i < len) {
	            currentQueue[i]();
	          }
	          len = queue.length;
	        }
	        draining = false;
	      };

	      // empty string to avoid regexp issues

	      var noop = function () {};

	      // shim for using process in browser

	      var process = module.exports = {};
	      var queue = [];
	      var draining = false;

	      process.nextTick = function (fun) {
	        queue.push(fun);
	        if (!draining) {
	          setTimeout(drainQueue, 0);
	        }
	      };

	      process.title = "browser";
	      process.browser = true;
	      process.env = {};
	      process.argv = [];
	      process.version = "";

	      process.on = noop;
	      process.addListener = noop;
	      process.once = noop;
	      process.off = noop;
	      process.removeListener = noop;
	      process.removeAllListeners = noop;
	      process.emit = noop;

	      process.binding = function (name) {
	        throw new Error("process.binding is not supported");
	      };

	      // TODO(shtylman)
	      process.cwd = function () {
	        return "/";
	      };
	      process.chdir = function (dir) {
	        throw new Error("process.chdir is not supported");
	      };
	      process.umask = function () {
	        return 0;
	      };


	      /***/
	    },
	    /* 28 */
	    /***/function (module, exports, __webpack_require__) {
	      if (typeof Object.create === "function") {
	        // implementation from standard node.js 'util' module
	        module.exports = function inherits(ctor, superCtor) {
	          ctor.super_ = superCtor;
	          ctor.prototype = Object.create(superCtor.prototype, {
	            constructor: {
	              value: ctor,
	              enumerable: false,
	              writable: true,
	              configurable: true
	            }
	          });
	        };
	      } else {
	        // old school shim for old browsers
	        module.exports = function inherits(ctor, superCtor) {
	          ctor.super_ = superCtor;
	          var TempCtor = function () {};
	          TempCtor.prototype = superCtor.prototype;
	          ctor.prototype = new TempCtor();
	          ctor.prototype.constructor = ctor;
	        };
	      }


	      /***/
	    },
	    /* 29 */
	    /***/function (module, exports, __webpack_require__) {
	      var parseHeaders = function (res) {
	        var lines = res.getAllResponseHeaders().split(/\r?\n/);
	        var headers = {};
	        for (var i = 0; i < lines.length; i++) {
	          var line = lines[i];
	          if (line === "") continue;

	          var m = line.match(/^([^:]+):\s*(.*)/);
	          if (m) {
	            var key = m[1].toLowerCase(),
	                value = m[2];

	            if (headers[key] !== undefined) {
	              if (isArray(headers[key])) {
	                headers[key].push(value);
	              } else {
	                headers[key] = [headers[key], value];
	              }
	            } else {
	              headers[key] = value;
	            }
	          } else {
	            headers[line] = true;
	          }
	        }
	        return headers;
	      };

	      var Stream = __webpack_require__(2);
	      var util = __webpack_require__(5);

	      var Response = module.exports = function (res) {
	        this.offset = 0;
	        this.readable = true;
	      };

	      util.inherits(Response, Stream);

	      var capable = {
	        streaming: true,
	        status2: true
	      };

	      Response.prototype.getResponse = function (xhr) {
	        var respType = String(xhr.responseType).toLowerCase();
	        if (respType === "blob") return xhr.responseBlob || xhr.response;
	        if (respType === "arraybuffer") return xhr.response;
	        return xhr.responseText;
	      };

	      Response.prototype.getHeader = function (key) {
	        return this.headers[key.toLowerCase()];
	      };

	      Response.prototype.handle = function (res) {
	        if (res.readyState === 2 && capable.status2) {
	          try {
	            this.statusCode = res.status;
	            this.headers = parseHeaders(res);
	          } catch (err) {
	            capable.status2 = false;
	          }

	          if (capable.status2) {
	            this.emit("ready");
	          }
	        } else if (capable.streaming && res.readyState === 3) {
	          try {
	            if (!this.statusCode) {
	              this.statusCode = res.status;
	              this.headers = parseHeaders(res);
	              this.emit("ready");
	            }
	          } catch (err) {}

	          try {
	            this._emitData(res);
	          } catch (err) {
	            capable.streaming = false;
	          }
	        } else if (res.readyState === 4) {
	          if (!this.statusCode) {
	            this.statusCode = res.status;
	            this.emit("ready");
	          }
	          this._emitData(res);

	          if (res.error) {
	            this.emit("error", this.getResponse(res));
	          } else this.emit("end");

	          this.emit("close");
	        }
	      };

	      Response.prototype._emitData = function (res) {
	        var respBody = this.getResponse(res);
	        if (respBody.toString().match(/ArrayBuffer/)) {
	          this.emit("data", new Uint8Array(respBody, this.offset));
	          this.offset = respBody.byteLength;
	          return;
	        }
	        if (respBody.length > this.offset) {
	          this.emit("data", respBody.slice(this.offset));
	          this.offset = respBody.length;
	        }
	      };

	      var isArray = Array.isArray || function (xs) {
	        return Object.prototype.toString.call(xs) === "[object Array]";
	      };


	      /***/
	    },
	    /* 30 */
	    /***/function (module, exports, __webpack_require__) {
	      if (typeof Object.create === "function") {
	        // implementation from standard node.js 'util' module
	        module.exports = function inherits(ctor, superCtor) {
	          ctor.super_ = superCtor;
	          ctor.prototype = Object.create(superCtor.prototype, {
	            constructor: {
	              value: ctor,
	              enumerable: false,
	              writable: true,
	              configurable: true
	            }
	          });
	        };
	      } else {
	        // old school shim for old browsers
	        module.exports = function inherits(ctor, superCtor) {
	          ctor.super_ = superCtor;
	          var TempCtor = function () {};
	          TempCtor.prototype = superCtor.prototype;
	          ctor.prototype = new TempCtor();
	          ctor.prototype.constructor = ctor;
	        };
	      }


	      /***/
	    },
	    /* 31 */
	    /***/function (module, exports, __webpack_require__) {
	      var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

	      ;(function (exports) {
	        "use strict";

	        var decode = function (elt) {
	          var code = elt.charCodeAt(0);
	          if (code === PLUS) return 62; // '+'
	          if (code === SLASH) return 63; // '/'
	          if (code < NUMBER) return -1; //no match
	          if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
	          if (code < UPPER + 26) return code - UPPER;
	          if (code < LOWER + 26) return code - LOWER + 26;
	        };

	        var b64ToByteArray = function (b64) {
	          var push = function (v) {
	            arr[L++] = v;
	          };

	          var i, j, l, tmp, placeHolders, arr;

	          if (b64.length % 4 > 0) {
	            throw new Error("Invalid string. Length must be a multiple of 4");
	          }

	          // the number of equal signs (place holders)
	          // if there are two placeholders, than the two characters before it
	          // represent one byte
	          // if there is only one, then the three characters before it represent 2 bytes
	          // this is just a cheap hack to not do indexOf twice
	          var len = b64.length;
	          placeHolders = "=" === b64.charAt(len - 2) ? 2 : "=" === b64.charAt(len - 1) ? 1 : 0;

	          // base64 is 4/3 + up to two characters of the original data
	          arr = new Arr(b64.length * 3 / 4 - placeHolders);

	          // if there are placeholders, only get up to the last complete 4 chars
	          l = placeHolders > 0 ? b64.length - 4 : b64.length;

	          var L = 0;

	          for (i = 0, j = 0; i < l; i += 4, j += 3) {
	            tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
	            push((tmp & 16711680) >> 16);
	            push((tmp & 65280) >> 8);
	            push(tmp & 255);
	          }

	          if (placeHolders === 2) {
	            tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
	            push(tmp & 255);
	          } else if (placeHolders === 1) {
	            tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
	            push(tmp >> 8 & 255);
	            push(tmp & 255);
	          }

	          return arr;
	        };

	        var uint8ToBase64 = function (uint8) {
	          var encode = function (num) {
	            return lookup.charAt(num);
	          };

	          var tripletToBase64 = function (num) {
	            return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);
	          };

	          var i,
	              extraBytes = uint8.length % 3,

	          // if we have 1 byte left, pad 2 bytes
	          output = "",
	              temp,
	              length;

	          // go through the array every three bytes, we'll deal with trailing stuff later
	          for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
	            temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
	            output += tripletToBase64(temp);
	          }

	          // pad the end with zeros, but make sure to not forget the extra bytes
	          switch (extraBytes) {
	            case 1:
	              temp = uint8[uint8.length - 1];
	              output += encode(temp >> 2);
	              output += encode(temp << 4 & 63);
	              output += "==";
	              break;
	            case 2:
	              temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
	              output += encode(temp >> 10);
	              output += encode(temp >> 4 & 63);
	              output += encode(temp << 2 & 63);
	              output += "=";
	              break;
	          }

	          return output;
	        };

	        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

	        var PLUS = "+".charCodeAt(0);
	        var SLASH = "/".charCodeAt(0);
	        var NUMBER = "0".charCodeAt(0);
	        var LOWER = "a".charCodeAt(0);
	        var UPPER = "A".charCodeAt(0);

	        exports.toByteArray = b64ToByteArray;
	        exports.fromByteArray = uint8ToBase64;
	      })(false ? this.base64js = {} : exports);


	      /***/
	    },
	    /* 32 */
	    /***/function (module, exports, __webpack_require__) {
	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.

	      "use strict";

	      // If obj.hasOwnProperty has been overridden, then calling
	      // obj.hasOwnProperty(prop) will break.
	      // See: https://github.com/joyent/node/issues/1707
	      var hasOwnProperty = function (obj, prop) {
	        return Object.prototype.hasOwnProperty.call(obj, prop);
	      };

	      module.exports = function (qs, sep, eq, options) {
	        sep = sep || "&";
	        eq = eq || "=";
	        var obj = {};

	        if (typeof qs !== "string" || qs.length === 0) {
	          return obj;
	        }

	        var regexp = /\+/g;
	        qs = qs.split(sep);

	        var maxKeys = 1000;
	        if (options && typeof options.maxKeys === "number") {
	          maxKeys = options.maxKeys;
	        }

	        var len = qs.length;
	        // maxKeys <= 0 means that we should not limit keys count
	        if (maxKeys > 0 && len > maxKeys) {
	          len = maxKeys;
	        }

	        for (var i = 0; i < len; ++i) {
	          var x = qs[i].replace(regexp, "%20"),
	              idx = x.indexOf(eq),
	              kstr,
	              vstr,
	              k,
	              v;

	          if (idx >= 0) {
	            kstr = x.substr(0, idx);
	            vstr = x.substr(idx + 1);
	          } else {
	            kstr = x;
	            vstr = "";
	          }

	          k = decodeURIComponent(kstr);
	          v = decodeURIComponent(vstr);

	          if (!hasOwnProperty(obj, k)) {
	            obj[k] = v;
	          } else if (isArray(obj[k])) {
	            obj[k].push(v);
	          } else {
	            obj[k] = [obj[k], v];
	          }
	        }

	        return obj;
	      };

	      var isArray = Array.isArray || function (xs) {
	        return Object.prototype.toString.call(xs) === "[object Array]";
	      };


	      /***/
	    },
	    /* 33 */
	    /***/function (module, exports, __webpack_require__) {
	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.

	      "use strict";

	      var map = function (xs, f) {
	        if (xs.map) return xs.map(f);
	        var res = [];
	        for (var i = 0; i < xs.length; i++) {
	          res.push(f(xs[i], i));
	        }
	        return res;
	      };

	      var stringifyPrimitive = function (v) {
	        switch (typeof v) {
	          case "string":
	            return v;

	          case "boolean":
	            return v ? "true" : "false";

	          case "number":
	            return isFinite(v) ? v : "";

	          default:
	            return "";
	        }
	      };

	      module.exports = function (obj, sep, eq, name) {
	        sep = sep || "&";
	        eq = eq || "=";
	        if (obj === null) {
	          obj = undefined;
	        }

	        if (typeof obj === "object") {
	          return map(objectKeys(obj), function (k) {
	            var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	            if (isArray(obj[k])) {
	              return map(obj[k], function (v) {
	                return ks + encodeURIComponent(stringifyPrimitive(v));
	              }).join(sep);
	            } else {
	              return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	            }
	          }).join(sep);
	        }

	        if (!name) return "";
	        return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
	      };

	      var isArray = Array.isArray || function (xs) {
	        return Object.prototype.toString.call(xs) === "[object Array]";
	      };

	      var objectKeys = Object.keys || function (obj) {
	        var res = [];
	        for (var key in obj) {
	          if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	        }
	        return res;
	      };


	      /***/
	    },
	    /* 34 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (process) {
	        var ReadableState = function (options, stream) {
	          var Duplex = __webpack_require__(36);

	          options = options || {};

	          // the point at which it stops calling _read() to fill the buffer
	          // Note: 0 is a valid value, means "don't call _read preemptively ever"
	          var hwm = options.highWaterMark;
	          var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	          this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	          // cast to ints.
	          this.highWaterMark = ~ ~this.highWaterMark;

	          this.buffer = [];
	          this.length = 0;
	          this.pipes = null;
	          this.pipesCount = 0;
	          this.flowing = null;
	          this.ended = false;
	          this.endEmitted = false;
	          this.reading = false;

	          // a flag to be able to tell if the onwrite cb is called immediately,
	          // or on a later tick.  We set this to true at first, because any
	          // actions that shouldn't happen until "later" should generally also
	          // not happen before the first write call.
	          this.sync = true;

	          // whenever we return null, then we set a flag to say
	          // that we're awaiting a 'readable' event emission.
	          this.needReadable = false;
	          this.emittedReadable = false;
	          this.readableListening = false;


	          // object stream flag. Used to make read(n) ignore n and to
	          // make all the buffer merging and length checks go away
	          this.objectMode = !!options.objectMode;

	          if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	          // Crypto is kind of old and crusty.  Historically, its default string
	          // encoding is 'binary' so we have to make this configurable.
	          // Everything else in the universe uses 'utf8', though.
	          this.defaultEncoding = options.defaultEncoding || "utf8";

	          // when piping, we only care about 'readable' events that happen
	          // after read()ing all the bytes and not getting any pushback.
	          this.ranOut = false;

	          // the number of writers that are awaiting a drain event in .pipe()s
	          this.awaitDrain = 0;

	          // if true, a maybeReadMore has been scheduled
	          this.readingMore = false;

	          this.decoder = null;
	          this.encoding = null;
	          if (options.encoding) {
	            if (!StringDecoder) StringDecoder = __webpack_require__(6).StringDecoder;
	            this.decoder = new StringDecoder(options.encoding);
	            this.encoding = options.encoding;
	          }
	        };

	        var Readable = function (options) {
	          var Duplex = __webpack_require__(36);

	          if (!(this instanceof Readable)) return new Readable(options);

	          this._readableState = new ReadableState(options, this);

	          // legacy
	          this.readable = true;

	          Stream.call(this);
	        };

	        var readableAddChunk = function (stream, state, chunk, encoding, addToFront) {
	          var er = chunkInvalid(state, chunk);
	          if (er) {
	            stream.emit("error", er);
	          } else if (util.isNullOrUndefined(chunk)) {
	            state.reading = false;
	            if (!state.ended) onEofChunk(stream, state);
	          } else if (state.objectMode || chunk && chunk.length > 0) {
	            if (state.ended && !addToFront) {
	              var e = new Error("stream.push() after EOF");
	              stream.emit("error", e);
	            } else if (state.endEmitted && addToFront) {
	              var e = new Error("stream.unshift() after end event");
	              stream.emit("error", e);
	            } else {
	              if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk);

	              if (!addToFront) state.reading = false;

	              // if we want the data now, just emit it.
	              if (state.flowing && state.length === 0 && !state.sync) {
	                stream.emit("data", chunk);
	                stream.read(0);
	              } else {
	                // update the buffer info.
	                state.length += state.objectMode ? 1 : chunk.length;
	                if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	                if (state.needReadable) emitReadable(stream);
	              }

	              maybeReadMore(stream, state);
	            }
	          } else if (!addToFront) {
	            state.reading = false;
	          }

	          return needMoreData(state);
	        };





	        // if it's past the high water mark, we can push in some more.
	        // Also, if we have no data yet, we can stand some
	        // more bytes.  This is to work around cases where hwm=0,
	        // such as the repl.  Also, if the push() triggered a
	        // readable event, and the user called read(largeNumber) such that
	        // needReadable was set, then we ought to push more, so that another
	        // 'readable' event will be triggered.
	        var needMoreData = function (state) {
	          return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	        };

	        var roundUpToNextPowerOf2 = function (n) {
	          if (n >= MAX_HWM) {
	            n = MAX_HWM;
	          } else {
	            // Get the next highest power of 2
	            n--;
	            for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	            n++;
	          }
	          return n;
	        };

	        var howMuchToRead = function (n, state) {
	          if (state.length === 0 && state.ended) return 0;

	          if (state.objectMode) return n === 0 ? 0 : 1;

	          if (isNaN(n) || util.isNull(n)) {
	            // only flow one buffer at a time
	            if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
	          }

	          if (n <= 0) return 0;

	          // If we're asking for more than the target buffer level,
	          // then raise the water mark.  Bump up to the next highest
	          // power of 2, to prevent increasing it excessively in tiny
	          // amounts.
	          if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n);

	          // don't have that much.  return null, unless we've ended.
	          if (n > state.length) {
	            if (!state.ended) {
	              state.needReadable = true;
	              return 0;
	            } else return state.length;
	          }

	          return n;
	        };

	        var chunkInvalid = function (state, chunk) {
	          var er = null;
	          if (!util.isBuffer(chunk) && !util.isString(chunk) && !util.isNullOrUndefined(chunk) && !state.objectMode) {
	            er = new TypeError("Invalid non-string/buffer chunk");
	          }
	          return er;
	        };

	        var onEofChunk = function (stream, state) {
	          if (state.decoder && !state.ended) {
	            var chunk = state.decoder.end();
	            if (chunk && chunk.length) {
	              state.buffer.push(chunk);
	              state.length += state.objectMode ? 1 : chunk.length;
	            }
	          }
	          state.ended = true;

	          // emit 'readable' now to make sure it gets picked up.
	          emitReadable(stream);
	        };

	        // Don't emit readable right away in sync mode, because this can trigger
	        // another read() call => stack overflow.  This way, it might trigger
	        // a nextTick recursion warning, but that's not so bad.
	        var emitReadable = function (stream) {
	          var state = stream._readableState;
	          state.needReadable = false;
	          if (!state.emittedReadable) {
	            debug("emitReadable", state.flowing);
	            state.emittedReadable = true;
	            if (state.sync) process.nextTick(function () {
	              emitReadable_(stream);
	            });else emitReadable_(stream);
	          }
	        };

	        var emitReadable_ = function (stream) {
	          debug("emit readable");
	          stream.emit("readable");
	          flow(stream);
	        };




	        // at this point, the user has presumably seen the 'readable' event,
	        // and called read() to consume some data.  that may have triggered
	        // in turn another _read(n) call, in which case reading = true if
	        // it's in progress.
	        // However, if we're not ended, or reading, and the length < hwm,
	        // then go ahead and try to read some more preemptively.
	        var maybeReadMore = function (stream, state) {
	          if (!state.readingMore) {
	            state.readingMore = true;
	            process.nextTick(function () {
	              maybeReadMore_(stream, state);
	            });
	          }
	        };

	        var maybeReadMore_ = function (stream, state) {
	          var len = state.length;
	          while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	            debug("maybeReadMore read 0");
	            stream.read(0);
	            if (len === state.length)
	              // didn't get any data, stop spinning.
	              break;else len = state.length;
	          }
	          state.readingMore = false;
	        };

	        var pipeOnDrain = function (src) {
	          return function () {
	            var state = src._readableState;
	            debug("pipeOnDrain", state.awaitDrain);
	            if (state.awaitDrain) state.awaitDrain--;
	            if (state.awaitDrain === 0 && EE.listenerCount(src, "data")) {
	              state.flowing = true;
	              flow(src);
	            }
	          };
	        };

	        var resume = function (stream, state) {
	          if (!state.resumeScheduled) {
	            state.resumeScheduled = true;
	            process.nextTick(function () {
	              resume_(stream, state);
	            });
	          }
	        };

	        var resume_ = function (stream, state) {
	          state.resumeScheduled = false;
	          stream.emit("resume");
	          flow(stream);
	          if (state.flowing && !state.reading) stream.read(0);
	        };

	        var flow = function (stream) {
	          var state = stream._readableState;
	          debug("flow", state.flowing);
	          if (state.flowing) {
	            do {
	              var chunk = stream.read();
	            } while (null !== chunk && state.flowing);
	          }
	        };

	        // Pluck off n bytes from an array of buffers.
	        // Length is the combined lengths of all the buffers in the list.
	        var fromList = function (n, state) {
	          var list = state.buffer;
	          var length = state.length;
	          var stringMode = !!state.decoder;
	          var objectMode = !!state.objectMode;
	          var ret;

	          // nothing in the list, definitely empty.
	          if (list.length === 0) return null;

	          if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
	            // read it all, truncate the array.
	            if (stringMode) ret = list.join("");else ret = Buffer.concat(list, length);
	            list.length = 0;
	          } else {
	            // read just some of it.
	            if (n < list[0].length) {
	              // just take a part of the first list item.
	              // slice is the same for buffers and strings.
	              var buf = list[0];
	              ret = buf.slice(0, n);
	              list[0] = buf.slice(n);
	            } else if (n === list[0].length) {
	              // first list is a perfect match
	              ret = list.shift();
	            } else {
	              // complex case.
	              // we have enough to cover it, but it spans past the first buffer.
	              if (stringMode) ret = "";else ret = new Buffer(n);

	              var c = 0;
	              for (var i = 0, l = list.length; i < l && c < n; i++) {
	                var buf = list[0];
	                var cpy = Math.min(n - c, buf.length);

	                if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);

	                if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();

	                c += cpy;
	              }
	            }
	          }

	          return ret;
	        };

	        var endReadable = function (stream) {
	          var state = stream._readableState;

	          // If we get here before consuming all the bytes, then that is a
	          // bug in node.  Should never happen.
	          if (state.length > 0) throw new Error("endReadable called on non-empty stream");

	          if (!state.endEmitted) {
	            state.ended = true;
	            process.nextTick(function () {
	              // Check that we didn't get one last unshift.
	              if (!state.endEmitted && state.length === 0) {
	                state.endEmitted = true;
	                stream.readable = false;
	                stream.emit("end");
	              }
	            });
	          }
	        };

	        var forEach = function (xs, f) {
	          for (var i = 0, l = xs.length; i < l; i++) {
	            f(xs[i], i);
	          }
	        };

	        var indexOf = function (xs, x) {
	          for (var i = 0, l = xs.length; i < l; i++) {
	            if (xs[i] === x) return i;
	          }
	          return -1;
	        }

	        /* WEBPACK VAR INJECTION */;

	        // Copyright Joyent, Inc. and other Node contributors.
	        //
	        // Permission is hereby granted, free of charge, to any person obtaining a
	        // copy of this software and associated documentation files (the
	        // "Software"), to deal in the Software without restriction, including
	        // without limitation the rights to use, copy, modify, merge, publish,
	        // distribute, sublicense, and/or sell copies of the Software, and to permit
	        // persons to whom the Software is furnished to do so, subject to the
	        // following conditions:
	        //
	        // The above copyright notice and this permission notice shall be included
	        // in all copies or substantial portions of the Software.
	        //
	        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	        // USE OR OTHER DEALINGS IN THE SOFTWARE.

	        module.exports = Readable;

	        /*<replacement>*/
	        var isArray = __webpack_require__(48);
	        /*</replacement>*/


	        /*<replacement>*/
	        var Buffer = __webpack_require__(9).Buffer;
	        /*</replacement>*/

	        Readable.ReadableState = ReadableState;

	        var EE = __webpack_require__(10).EventEmitter;

	        /*<replacement>*/
	        if (!EE.listenerCount) EE.listenerCount = function (emitter, type) {
	          return emitter.listeners(type).length;
	        };
	        /*</replacement>*/

	        var Stream = __webpack_require__(2);

	        /*<replacement>*/
	        var util = __webpack_require__(55);
	        util.inherits = __webpack_require__(56);
	        /*</replacement>*/

	        var StringDecoder;


	        /*<replacement>*/
	        var debug = __webpack_require__(47);
	        if (debug && debug.debuglog) {
	          debug = debug.debuglog("stream");
	        } else {
	          debug = function () {};
	        }
	        /*</replacement>*/


	        util.inherits(Readable, Stream);

	        // Manually shove something into the read() buffer.
	        // This returns true if the highWaterMark has not been hit yet,
	        // similar to how Writable.write() returns true if you should
	        // write() some more.
	        Readable.prototype.push = function (chunk, encoding) {
	          var state = this._readableState;

	          if (util.isString(chunk) && !state.objectMode) {
	            encoding = encoding || state.defaultEncoding;
	            if (encoding !== state.encoding) {
	              chunk = new Buffer(chunk, encoding);
	              encoding = "";
	            }
	          }

	          return readableAddChunk(this, state, chunk, encoding, false);
	        };

	        // Unshift should *always* be something directly out of read()
	        Readable.prototype.unshift = function (chunk) {
	          var state = this._readableState;
	          return readableAddChunk(this, state, chunk, "", true);
	        };

	        // backwards compatibility.
	        Readable.prototype.setEncoding = function (enc) {
	          if (!StringDecoder) StringDecoder = __webpack_require__(6).StringDecoder;
	          this._readableState.decoder = new StringDecoder(enc);
	          this._readableState.encoding = enc;
	          return this;
	        };

	        // Don't raise the hwm > 128MB
	        var MAX_HWM = 8388608;


	        // you can override either this method, or the async _read(n) below.
	        Readable.prototype.read = function (n) {
	          debug("read", n);
	          var state = this._readableState;
	          var nOrig = n;

	          if (!util.isNumber(n) || n > 0) state.emittedReadable = false;

	          // if we're doing read(0) to trigger a readable event, but we
	          // already have a bunch of data in the buffer, then just trigger
	          // the 'readable' event and move on.
	          if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	            debug("read: emitReadable", state.length, state.ended);
	            if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	            return null;
	          }

	          n = howMuchToRead(n, state);

	          // if we've ended, and we're now clear, then finish it up.
	          if (n === 0 && state.ended) {
	            if (state.length === 0) endReadable(this);
	            return null;
	          }

	          // All the actual chunk generation logic needs to be
	          // *below* the call to _read.  The reason is that in certain
	          // synthetic stream cases, such as passthrough streams, _read
	          // may be a completely synchronous operation which may change
	          // the state of the read buffer, providing enough data when
	          // before there was *not* enough.
	          //
	          // So, the steps are:
	          // 1. Figure out what the state of things will be after we do
	          // a read from the buffer.
	          //
	          // 2. If that resulting state will trigger a _read, then call _read.
	          // Note that this may be asynchronous, or synchronous.  Yes, it is
	          // deeply ugly to write APIs this way, but that still doesn't mean
	          // that the Readable class should behave improperly, as streams are
	          // designed to be sync/async agnostic.
	          // Take note if the _read call is sync or async (ie, if the read call
	          // has returned yet), so that we know whether or not it's safe to emit
	          // 'readable' etc.
	          //
	          // 3. Actually pull the requested chunks out of the buffer and return.

	          // if we need a readable event, then we need to do some reading.
	          var doRead = state.needReadable;
	          debug("need readable", doRead);

	          // if we currently have less than the highWaterMark, then also read some
	          if (state.length === 0 || state.length - n < state.highWaterMark) {
	            doRead = true;
	            debug("length less than watermark", doRead);
	          }

	          // however, if we've ended, then there's no point, and if we're already
	          // reading, then it's unnecessary.
	          if (state.ended || state.reading) {
	            doRead = false;
	            debug("reading or ended", doRead);
	          }

	          if (doRead) {
	            debug("do read");
	            state.reading = true;
	            state.sync = true;
	            // if the length is currently zero, then we *need* a readable event.
	            if (state.length === 0) state.needReadable = true;
	            // call internal read method
	            this._read(state.highWaterMark);
	            state.sync = false;
	          }

	          // If _read pushed data synchronously, then `reading` will be false,
	          // and we need to re-evaluate how much data we can return to the user.
	          if (doRead && !state.reading) n = howMuchToRead(nOrig, state);

	          var ret;
	          if (n > 0) ret = fromList(n, state);else ret = null;

	          if (util.isNull(ret)) {
	            state.needReadable = true;
	            n = 0;
	          }

	          state.length -= n;

	          // If we have nothing in the buffer, then we want to know
	          // as soon as we *do* get something into the buffer.
	          if (state.length === 0 && !state.ended) state.needReadable = true;

	          // If we tried to read() past the EOF, then emit end on the next tick.
	          if (nOrig !== n && state.ended && state.length === 0) endReadable(this);

	          if (!util.isNull(ret)) this.emit("data", ret);

	          return ret;
	        };

	        // abstract method.  to be overridden in specific implementation classes.
	        // call cb(er, data) where data is <= n in length.
	        // for virtual (non-string, non-buffer) streams, "length" is somewhat
	        // arbitrary, and perhaps not very meaningful.
	        Readable.prototype._read = function (n) {
	          this.emit("error", new Error("not implemented"));
	        };

	        Readable.prototype.pipe = function (dest, pipeOpts) {
	          var onunpipe = function (readable) {
	            debug("onunpipe");
	            if (readable === src) {
	              cleanup();
	            }
	          };

	          var onend = function () {
	            debug("onend");
	            dest.end();
	          };

	          var cleanup = function () {
	            debug("cleanup");
	            // cleanup event handlers once the pipe is broken
	            dest.removeListener("close", onclose);
	            dest.removeListener("finish", onfinish);
	            dest.removeListener("drain", ondrain);
	            dest.removeListener("error", onerror);
	            dest.removeListener("unpipe", onunpipe);
	            src.removeListener("end", onend);
	            src.removeListener("end", cleanup);
	            src.removeListener("data", ondata);

	            // if the reader is waiting for a drain event from this
	            // specific writer, then it would cause it to never start
	            // flowing again.
	            // So, if this is awaiting a drain, then we just call it now.
	            // If we don't know, then assume that we are waiting for one.
	            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	          };

	          var ondata = function (chunk) {
	            debug("ondata");
	            var ret = dest.write(chunk);
	            if (false === ret) {
	              debug("false write response, pause", src._readableState.awaitDrain);
	              src._readableState.awaitDrain++;
	              src.pause();
	            }
	          };

	          // if the dest has an error, then stop piping into it.
	          // however, don't suppress the throwing behavior for this.
	          var onerror = function (er) {
	            debug("onerror", er);
	            unpipe();
	            dest.removeListener("error", onerror);
	            if (EE.listenerCount(dest, "error") === 0) dest.emit("error", er);
	          };





	          // Both close and finish should trigger unpipe, but only once.
	          var onclose = function () {
	            dest.removeListener("finish", onfinish);
	            unpipe();
	          };

	          var onfinish = function () {
	            debug("onfinish");
	            dest.removeListener("close", onclose);
	            unpipe();
	          };

	          var unpipe = function () {
	            debug("unpipe");
	            src.unpipe(dest);
	          };

	          var src = this;
	          var state = this._readableState;

	          switch (state.pipesCount) {
	            case 0:
	              state.pipes = dest;
	              break;
	            case 1:
	              state.pipes = [state.pipes, dest];
	              break;
	            default:
	              state.pipes.push(dest);
	              break;
	          }
	          state.pipesCount += 1;
	          debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);

	          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	          var endFn = doEnd ? onend : cleanup;
	          if (state.endEmitted) process.nextTick(endFn);else src.once("end", endFn);

	          dest.on("unpipe", onunpipe);


	          // when the dest drains, it reduces the awaitDrain counter
	          // on the source.  This would be more elegant with a .once()
	          // handler in flow(), but adding and removing repeatedly is
	          // too slow.
	          var ondrain = pipeOnDrain(src);
	          dest.on("drain", ondrain);

	          src.on("data", ondata);
	          // This is a brutally ugly hack to make sure that our error handler
	          // is attached before any userland ones.  NEVER DO THIS.
	          if (!dest._events || !dest._events.error) dest.on("error", onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];
	          dest.once("close", onclose);
	          dest.once("finish", onfinish);

	          // tell the dest that it's being piped to
	          dest.emit("pipe", src);

	          // start the flow if it hasn't been started already.
	          if (!state.flowing) {
	            debug("pipe resume");
	            src.resume();
	          }

	          return dest;
	        };




	        Readable.prototype.unpipe = function (dest) {
	          var state = this._readableState;

	          // if we're not piping anywhere, then do nothing.
	          if (state.pipesCount === 0) return this;

	          // just one destination.  most common case.
	          if (state.pipesCount === 1) {
	            // passed in one, but it's not the right one.
	            if (dest && dest !== state.pipes) return this;

	            if (!dest) dest = state.pipes;

	            // got a match.
	            state.pipes = null;
	            state.pipesCount = 0;
	            state.flowing = false;
	            if (dest) dest.emit("unpipe", this);
	            return this;
	          }

	          // slow case. multiple pipe destinations.

	          if (!dest) {
	            // remove all.
	            var dests = state.pipes;
	            var len = state.pipesCount;
	            state.pipes = null;
	            state.pipesCount = 0;
	            state.flowing = false;

	            for (var i = 0; i < len; i++) dests[i].emit("unpipe", this);
	            return this;
	          }

	          // try to find the right one.
	          var i = indexOf(state.pipes, dest);
	          if (i === -1) return this;

	          state.pipes.splice(i, 1);
	          state.pipesCount -= 1;
	          if (state.pipesCount === 1) state.pipes = state.pipes[0];

	          dest.emit("unpipe", this);

	          return this;
	        };

	        // set up data events if they are asked for
	        // Ensure readable listeners eventually get something
	        Readable.prototype.on = function (ev, fn) {
	          var res = Stream.prototype.on.call(this, ev, fn);

	          // If listening to data, and it has not explicitly been paused,
	          // then call resume to start the flow of data on the next tick.
	          if (ev === "data" && false !== this._readableState.flowing) {
	            this.resume();
	          }

	          if (ev === "readable" && this.readable) {
	            var state = this._readableState;
	            if (!state.readableListening) {
	              state.readableListening = true;
	              state.emittedReadable = false;
	              state.needReadable = true;
	              if (!state.reading) {
	                var self = this;
	                process.nextTick(function () {
	                  debug("readable nexttick read 0");
	                  self.read(0);
	                });
	              } else if (state.length) {
	                emitReadable(this, state);
	              }
	            }
	          }

	          return res;
	        };
	        Readable.prototype.addListener = Readable.prototype.on;

	        // pause() and resume() are remnants of the legacy readable stream API
	        // If the user uses them, then switch into old mode.
	        Readable.prototype.resume = function () {
	          var state = this._readableState;
	          if (!state.flowing) {
	            debug("resume");
	            state.flowing = true;
	            if (!state.reading) {
	              debug("resume read 0");
	              this.read(0);
	            }
	            resume(this, state);
	          }
	          return this;
	        };

	        Readable.prototype.pause = function () {
	          debug("call pause flowing=%j", this._readableState.flowing);
	          if (false !== this._readableState.flowing) {
	            debug("pause");
	            this._readableState.flowing = false;
	            this.emit("pause");
	          }
	          return this;
	        };

	        // wrap an old-style stream as the async data source.
	        // This is *not* part of the readable stream interface.
	        // It is an ugly unfortunate mess of history.
	        Readable.prototype.wrap = function (stream) {
	          var state = this._readableState;
	          var paused = false;

	          var self = this;
	          stream.on("end", function () {
	            debug("wrapped end");
	            if (state.decoder && !state.ended) {
	              var chunk = state.decoder.end();
	              if (chunk && chunk.length) self.push(chunk);
	            }

	            self.push(null);
	          });

	          stream.on("data", function (chunk) {
	            debug("wrapped data");
	            if (state.decoder) chunk = state.decoder.write(chunk);
	            if (!chunk || !state.objectMode && !chunk.length) return;

	            var ret = self.push(chunk);
	            if (!ret) {
	              paused = true;
	              stream.pause();
	            }
	          });

	          // proxy all the other methods.
	          // important when wrapping filters and duplexes.
	          for (var i in stream) {
	            if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	              this[i] = (function (method) {
	                return function () {
	                  return stream[method].apply(stream, arguments);
	                };
	              })(i);
	            }
	          }

	          // proxy certain important events.
	          var events = ["error", "close", "destroy", "pause", "resume"];
	          forEach(events, function (ev) {
	            stream.on(ev, self.emit.bind(self, ev));
	          });

	          // when we try to consume some more bytes, simply unpause the
	          // underlying stream.
	          self._read = function (n) {
	            debug("wrapped _read", n);
	            if (paused) {
	              paused = false;
	              stream.resume();
	            }
	          };

	          return self;
	        };



	        // exposed for testing purposes only.
	        Readable._fromList = fromList;
	      }).call(exports, __webpack_require__(11));

	      /***/
	    },
	    /* 35 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (process) {
	        var WriteReq = function (chunk, encoding, cb) {
	          this.chunk = chunk;
	          this.encoding = encoding;
	          this.callback = cb;
	        };

	        var WritableState = function (options, stream) {
	          var Duplex = __webpack_require__(36);

	          options = options || {};

	          // the point at which write() starts returning false
	          // Note: 0 is a valid value, means that we always return false if
	          // the entire buffer is not flushed immediately on write()
	          var hwm = options.highWaterMark;
	          var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	          this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	          // object stream flag to indicate whether or not this stream
	          // contains buffers or objects.
	          this.objectMode = !!options.objectMode;

	          if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	          // cast to ints.
	          this.highWaterMark = ~ ~this.highWaterMark;

	          this.needDrain = false;
	          // at the start of calling end()
	          this.ending = false;
	          // when end() has been called, and returned
	          this.ended = false;
	          // when 'finish' is emitted
	          this.finished = false;

	          // should we decode strings into buffers before passing to _write?
	          // this is here so that some node-core streams can optimize string
	          // handling at a lower level.
	          var noDecode = options.decodeStrings === false;
	          this.decodeStrings = !noDecode;

	          // Crypto is kind of old and crusty.  Historically, its default string
	          // encoding is 'binary' so we have to make this configurable.
	          // Everything else in the universe uses 'utf8', though.
	          this.defaultEncoding = options.defaultEncoding || "utf8";

	          // not an actual buffer we keep track of, but a measurement
	          // of how much we're waiting to get pushed to some underlying
	          // socket or file.
	          this.length = 0;

	          // a flag to see when we're in the middle of a write.
	          this.writing = false;

	          // when true all writes will be buffered until .uncork() call
	          this.corked = 0;

	          // a flag to be able to tell if the onwrite cb is called immediately,
	          // or on a later tick.  We set this to true at first, because any
	          // actions that shouldn't happen until "later" should generally also
	          // not happen before the first write call.
	          this.sync = true;

	          // a flag to know if we're processing previously buffered items, which
	          // may call the _write() callback in the same tick, so that we don't
	          // end up in an overlapped onwrite situation.
	          this.bufferProcessing = false;

	          // the callback that's passed to _write(chunk,cb)
	          this.onwrite = function (er) {
	            onwrite(stream, er);
	          };

	          // the callback that the user supplies to write(chunk,encoding,cb)
	          this.writecb = null;

	          // the amount that is being written when _write is called.
	          this.writelen = 0;

	          this.buffer = [];

	          // number of pending user-supplied write callbacks
	          // this must be 0 before 'finish' can be emitted
	          this.pendingcb = 0;

	          // emit prefinish if the only thing we're waiting for is _write cbs
	          // This is relevant for synchronous Transform streams
	          this.prefinished = false;

	          // True if the error was already emitted and should not be thrown again
	          this.errorEmitted = false;
	        };

	        var Writable = function (options) {
	          var Duplex = __webpack_require__(36);

	          // Writable ctor is applied to Duplexes, though they're not
	          // instanceof Writable, they're instanceof Readable.
	          if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	          this._writableState = new WritableState(options, this);

	          // legacy.
	          this.writable = true;

	          Stream.call(this);
	        };

	        var writeAfterEnd = function (stream, state, cb) {
	          var er = new Error("write after end");
	          // TODO: defer error events consistently everywhere, not just the cb
	          stream.emit("error", er);
	          process.nextTick(function () {
	            cb(er);
	          });
	        };

	        // If we get something that is not a buffer, string, null, or undefined,
	        // and we're not in objectMode, then that's an error.
	        // Otherwise stream chunks are all considered to be of length=1, and the
	        // watermarks determine how many objects to keep in the buffer, rather than
	        // how many bytes or characters.
	        var validChunk = function (stream, state, chunk, cb) {
	          var valid = true;
	          if (!util.isBuffer(chunk) && !util.isString(chunk) && !util.isNullOrUndefined(chunk) && !state.objectMode) {
	            var er = new TypeError("Invalid non-string/buffer chunk");
	            stream.emit("error", er);
	            process.nextTick(function () {
	              cb(er);
	            });
	            valid = false;
	          }
	          return valid;
	        };

	        var decodeChunk = function (state, chunk, encoding) {
	          if (!state.objectMode && state.decodeStrings !== false && util.isString(chunk)) {
	            chunk = new Buffer(chunk, encoding);
	          }
	          return chunk;
	        };

	        // if we're already writing something, then just put this
	        // in the queue, and wait our turn.  Otherwise, call _write
	        // If we return false, then we need a drain event, so set that flag.
	        var writeOrBuffer = function (stream, state, chunk, encoding, cb) {
	          chunk = decodeChunk(state, chunk, encoding);
	          if (util.isBuffer(chunk)) encoding = "buffer";
	          var len = state.objectMode ? 1 : chunk.length;

	          state.length += len;

	          var ret = state.length < state.highWaterMark;
	          // we must ensure that previous needDrain will not be reset to false.
	          if (!ret) state.needDrain = true;

	          if (state.writing || state.corked) state.buffer.push(new WriteReq(chunk, encoding, cb));else doWrite(stream, state, false, len, chunk, encoding, cb);

	          return ret;
	        };

	        var doWrite = function (stream, state, writev, len, chunk, encoding, cb) {
	          state.writelen = len;
	          state.writecb = cb;
	          state.writing = true;
	          state.sync = true;
	          if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	          state.sync = false;
	        };

	        var onwriteError = function (stream, state, sync, er, cb) {
	          if (sync) process.nextTick(function () {
	            state.pendingcb--;
	            cb(er);
	          });else {
	            state.pendingcb--;
	            cb(er);
	          }

	          stream._writableState.errorEmitted = true;
	          stream.emit("error", er);
	        };

	        var onwriteStateUpdate = function (state) {
	          state.writing = false;
	          state.writecb = null;
	          state.length -= state.writelen;
	          state.writelen = 0;
	        };

	        var onwrite = function (stream, er) {
	          var state = stream._writableState;
	          var sync = state.sync;
	          var cb = state.writecb;

	          onwriteStateUpdate(state);

	          if (er) onwriteError(stream, state, sync, er, cb);else {
	            // Check if we're actually ready to finish, but don't emit yet
	            var finished = needFinish(stream, state);

	            if (!finished && !state.corked && !state.bufferProcessing && state.buffer.length) {
	              clearBuffer(stream, state);
	            }

	            if (sync) {
	              process.nextTick(function () {
	                afterWrite(stream, state, finished, cb);
	              });
	            } else {
	              afterWrite(stream, state, finished, cb);
	            }
	          }
	        };

	        var afterWrite = function (stream, state, finished, cb) {
	          if (!finished) onwriteDrain(stream, state);
	          state.pendingcb--;
	          cb();
	          finishMaybe(stream, state);
	        };

	        // Must force callback to be called on nextTick, so that we don't
	        // emit 'drain' before the write() consumer gets the 'false' return
	        // value, and has a chance to attach a 'drain' listener.
	        var onwriteDrain = function (stream, state) {
	          if (state.length === 0 && state.needDrain) {
	            state.needDrain = false;
	            stream.emit("drain");
	          }
	        };




	        // if there's something in the buffer waiting, then process it
	        var clearBuffer = function (stream, state) {
	          state.bufferProcessing = true;

	          if (stream._writev && state.buffer.length > 1) {
	            // Fast case, write everything using _writev()
	            var cbs = [];
	            for (var c = 0; c < state.buffer.length; c++) cbs.push(state.buffer[c].callback);

	            // count the one we are adding, as well.
	            // TODO(isaacs) clean this up
	            state.pendingcb++;
	            doWrite(stream, state, true, state.length, state.buffer, "", function (err) {
	              for (var i = 0; i < cbs.length; i++) {
	                state.pendingcb--;
	                cbs[i](err);
	              }
	            });

	            // Clear buffer
	            state.buffer = [];
	          } else {
	            // Slow case, write chunks one-by-one
	            for (var c = 0; c < state.buffer.length; c++) {
	              var entry = state.buffer[c];
	              var chunk = entry.chunk;
	              var encoding = entry.encoding;
	              var cb = entry.callback;
	              var len = state.objectMode ? 1 : chunk.length;

	              doWrite(stream, state, false, len, chunk, encoding, cb);

	              // if we didn't call the onwrite immediately, then
	              // it means that we need to wait until it does.
	              // also, that means that the chunk and cb are currently
	              // being processed, so move the buffer counter past them.
	              if (state.writing) {
	                c++;
	                break;
	              }
	            }

	            if (c < state.buffer.length) state.buffer = state.buffer.slice(c);else state.buffer.length = 0;
	          }

	          state.bufferProcessing = false;
	        };

	        var needFinish = function (stream, state) {
	          return state.ending && state.length === 0 && !state.finished && !state.writing;
	        };

	        var prefinish = function (stream, state) {
	          if (!state.prefinished) {
	            state.prefinished = true;
	            stream.emit("prefinish");
	          }
	        };

	        var finishMaybe = function (stream, state) {
	          var need = needFinish(stream, state);
	          if (need) {
	            if (state.pendingcb === 0) {
	              prefinish(stream, state);
	              state.finished = true;
	              stream.emit("finish");
	            } else prefinish(stream, state);
	          }
	          return need;
	        };

	        var endWritable = function (stream, state, cb) {
	          state.ending = true;
	          finishMaybe(stream, state);
	          if (cb) {
	            if (state.finished) process.nextTick(cb);else stream.once("finish", cb);
	          }
	          state.ended = true;
	        }

	        /* WEBPACK VAR INJECTION */;

	        // Copyright Joyent, Inc. and other Node contributors.
	        //
	        // Permission is hereby granted, free of charge, to any person obtaining a
	        // copy of this software and associated documentation files (the
	        // "Software"), to deal in the Software without restriction, including
	        // without limitation the rights to use, copy, modify, merge, publish,
	        // distribute, sublicense, and/or sell copies of the Software, and to permit
	        // persons to whom the Software is furnished to do so, subject to the
	        // following conditions:
	        //
	        // The above copyright notice and this permission notice shall be included
	        // in all copies or substantial portions of the Software.
	        //
	        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	        // USE OR OTHER DEALINGS IN THE SOFTWARE.

	        // A bit simpler than readable streams.
	        // Implement an async ._write(chunk, cb), and it'll handle all
	        // the drain event emission and buffering.

	        module.exports = Writable;

	        /*<replacement>*/
	        var Buffer = __webpack_require__(9).Buffer;
	        /*</replacement>*/

	        Writable.WritableState = WritableState;


	        /*<replacement>*/
	        var util = __webpack_require__(55);
	        util.inherits = __webpack_require__(56);
	        /*</replacement>*/

	        var Stream = __webpack_require__(2);

	        util.inherits(Writable, Stream);

	        // Otherwise people can pipe Writable streams, which is just wrong.
	        Writable.prototype.pipe = function () {
	          this.emit("error", new Error("Cannot pipe. Not readable."));
	        };


	        Writable.prototype.write = function (chunk, encoding, cb) {
	          var state = this._writableState;
	          var ret = false;

	          if (util.isFunction(encoding)) {
	            cb = encoding;
	            encoding = null;
	          }

	          if (util.isBuffer(chunk)) encoding = "buffer";else if (!encoding) encoding = state.defaultEncoding;

	          if (!util.isFunction(cb)) cb = function () {};

	          if (state.ended) writeAfterEnd(this, state, cb);else if (validChunk(this, state, chunk, cb)) {
	            state.pendingcb++;
	            ret = writeOrBuffer(this, state, chunk, encoding, cb);
	          }

	          return ret;
	        };

	        Writable.prototype.cork = function () {
	          var state = this._writableState;

	          state.corked++;
	        };

	        Writable.prototype.uncork = function () {
	          var state = this._writableState;

	          if (state.corked) {
	            state.corked--;

	            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.buffer.length) clearBuffer(this, state);
	          }
	        };

	        Writable.prototype._write = function (chunk, encoding, cb) {
	          cb(new Error("not implemented"));
	        };

	        Writable.prototype._writev = null;

	        Writable.prototype.end = function (chunk, encoding, cb) {
	          var state = this._writableState;

	          if (util.isFunction(chunk)) {
	            cb = chunk;
	            chunk = null;
	            encoding = null;
	          } else if (util.isFunction(encoding)) {
	            cb = encoding;
	            encoding = null;
	          }

	          if (!util.isNullOrUndefined(chunk)) this.write(chunk, encoding);

	          // .end() fully uncorks
	          if (state.corked) {
	            state.corked = 1;
	            this.uncork();
	          }

	          // ignore unnecessary end() calls.
	          if (!state.ending && !state.finished) endWritable(this, state, cb);
	        };
	      }).call(exports, __webpack_require__(11));

	      /***/
	    },
	    /* 36 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (process) {
	        var Duplex = function (options) {
	          if (!(this instanceof Duplex)) return new Duplex(options);

	          Readable.call(this, options);
	          Writable.call(this, options);

	          if (options && options.readable === false) this.readable = false;

	          if (options && options.writable === false) this.writable = false;

	          this.allowHalfOpen = true;
	          if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	          this.once("end", onend);
	        };

	        // the no-half-open enforcer
	        var onend = function () {
	          // if we allow half-open state, or if the writable side ended,
	          // then we're ok.
	          if (this.allowHalfOpen || this._writableState.ended) return;

	          // no more data can be written.
	          // But allow more writes to happen in this tick.
	          process.nextTick(this.end.bind(this));
	        };

	        var forEach = function (xs, f) {
	          for (var i = 0, l = xs.length; i < l; i++) {
	            f(xs[i], i);
	          }
	        }

	        /* WEBPACK VAR INJECTION */;

	        // Copyright Joyent, Inc. and other Node contributors.
	        //
	        // Permission is hereby granted, free of charge, to any person obtaining a
	        // copy of this software and associated documentation files (the
	        // "Software"), to deal in the Software without restriction, including
	        // without limitation the rights to use, copy, modify, merge, publish,
	        // distribute, sublicense, and/or sell copies of the Software, and to permit
	        // persons to whom the Software is furnished to do so, subject to the
	        // following conditions:
	        //
	        // The above copyright notice and this permission notice shall be included
	        // in all copies or substantial portions of the Software.
	        //
	        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	        // USE OR OTHER DEALINGS IN THE SOFTWARE.

	        // a duplex stream is just a stream that is both readable and writable.
	        // Since JS doesn't have multiple prototypal inheritance, this class
	        // prototypally inherits from Readable, and then parasitically from
	        // Writable.

	        module.exports = Duplex;

	        /*<replacement>*/
	        var objectKeys = Object.keys || function (obj) {
	          var keys = [];
	          for (var key in obj) keys.push(key);
	          return keys;
	        };
	        /*</replacement>*/


	        /*<replacement>*/
	        var util = __webpack_require__(55);
	        util.inherits = __webpack_require__(56);
	        /*</replacement>*/

	        var Readable = __webpack_require__(34);
	        var Writable = __webpack_require__(35);

	        util.inherits(Duplex, Readable);

	        forEach(objectKeys(Writable.prototype), function (method) {
	          if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	        });
	      }).call(exports, __webpack_require__(11));

	      /***/
	    },
	    /* 37 */
	    /***/function (module, exports, __webpack_require__) {
	      var TransformState = function (options, stream) {
	        this.afterTransform = function (er, data) {
	          return afterTransform(stream, er, data);
	        };

	        this.needTransform = false;
	        this.transforming = false;
	        this.writecb = null;
	        this.writechunk = null;
	      };

	      var afterTransform = function (stream, er, data) {
	        var ts = stream._transformState;
	        ts.transforming = false;

	        var cb = ts.writecb;

	        if (!cb) return stream.emit("error", new Error("no writecb in Transform class"));

	        ts.writechunk = null;
	        ts.writecb = null;

	        if (!util.isNullOrUndefined(data)) stream.push(data);

	        if (cb) cb(er);

	        var rs = stream._readableState;
	        rs.reading = false;
	        if (rs.needReadable || rs.length < rs.highWaterMark) {
	          stream._read(rs.highWaterMark);
	        }
	      };

	      var Transform = function (options) {
	        if (!(this instanceof Transform)) return new Transform(options);

	        Duplex.call(this, options);

	        this._transformState = new TransformState(options, this);

	        // when the writable side finishes, then flush out anything remaining.
	        var stream = this;

	        // start out asking for a readable event once data is transformed.
	        this._readableState.needReadable = true;

	        // we have implemented the _read method, and done the other things
	        // that Readable wants before the first _read call, so unset the
	        // sync guard flag.
	        this._readableState.sync = false;

	        this.once("prefinish", function () {
	          if (util.isFunction(this._flush)) this._flush(function (er) {
	            done(stream, er);
	          });else done(stream);
	        });
	      };

	      var done = function (stream, er) {
	        if (er) return stream.emit("error", er);

	        // if there's nothing in the write buffer, then that means
	        // that nothing more will ever be provided
	        var ws = stream._writableState;
	        var ts = stream._transformState;

	        if (ws.length) throw new Error("calling transform done when ws.length != 0");

	        if (ts.transforming) throw new Error("calling transform done when still transforming");

	        return stream.push(null);
	      }


	      /***/;

	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.


	      // a transform stream is a readable/writable stream where you do
	      // something with the data.  Sometimes it's called a "filter",
	      // but that's not a great name for it, since that implies a thing where
	      // some bits pass through, and others are simply ignored.  (That would
	      // be a valid example of a transform, of course.)
	      //
	      // While the output is causally related to the input, it's not a
	      // necessarily symmetric or synchronous transformation.  For example,
	      // a zlib stream might take multiple plain-text writes(), and then
	      // emit a single compressed chunk some time in the future.
	      //
	      // Here's how this works:
	      //
	      // The Transform stream has all the aspects of the readable and writable
	      // stream classes.  When you write(chunk), that calls _write(chunk,cb)
	      // internally, and returns false if there's a lot of pending writes
	      // buffered up.  When you call read(), that calls _read(n) until
	      // there's enough pending readable data buffered up.
	      //
	      // In a transform stream, the written data is placed in a buffer.  When
	      // _read(n) is called, it transforms the queued up data, calling the
	      // buffered _write cb's as it consumes chunks.  If consuming a single
	      // written chunk would result in multiple output chunks, then the first
	      // outputted bit calls the readcb, and subsequent chunks just go into
	      // the read buffer, and will cause it to emit 'readable' if necessary.
	      //
	      // This way, back-pressure is actually determined by the reading side,
	      // since _read has to be called to start processing a new chunk.  However,
	      // a pathological inflate type of transform can cause excessive buffering
	      // here.  For example, imagine a stream where every byte of input is
	      // interpreted as an integer from 0-255, and then results in that many
	      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	      // 1kb of data being output.  In this case, you could write a very small
	      // amount of input, and end up with a very large amount of output.  In
	      // such a pathological inflating mechanism, there'd be no way to tell
	      // the system to stop doing the transform.  A single 4MB write could
	      // cause the system to run out of memory.
	      //
	      // However, even in such a pathological case, only a single written chunk
	      // would be consumed, and then the rest would wait (un-transformed) until
	      // the results of the previous transformed chunk were consumed.

	      module.exports = Transform;

	      var Duplex = __webpack_require__(36);

	      /*<replacement>*/
	      var util = __webpack_require__(55);
	      util.inherits = __webpack_require__(56);
	      /*</replacement>*/

	      util.inherits(Transform, Duplex);


	      Transform.prototype.push = function (chunk, encoding) {
	        this._transformState.needTransform = false;
	        return Duplex.prototype.push.call(this, chunk, encoding);
	      };

	      // This is the part where you do stuff!
	      // override this function in implementation classes.
	      // 'chunk' is an input chunk.
	      //
	      // Call `push(newChunk)` to pass along transformed output
	      // to the readable side.  You may call 'push' zero or more times.
	      //
	      // Call `cb(err)` when you are done with this chunk.  If you pass
	      // an error, then that'll put the hurt on the whole operation.  If you
	      // never call cb(), then you'll never get another chunk.
	      Transform.prototype._transform = function (chunk, encoding, cb) {
	        throw new Error("not implemented");
	      };

	      Transform.prototype._write = function (chunk, encoding, cb) {
	        var ts = this._transformState;
	        ts.writecb = cb;
	        ts.writechunk = chunk;
	        ts.writeencoding = encoding;
	        if (!ts.transforming) {
	          var rs = this._readableState;
	          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	        }
	      };

	      // Doesn't matter what the args are here.
	      // _transform does all the work.
	      // That we got here means that the readable side wants more data.
	      Transform.prototype._read = function (n) {
	        var ts = this._transformState;

	        if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	          ts.transforming = true;
	          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	        } else {
	          // mark that we need a transform, so that any data that comes in
	          // will get processed, now that we've asked for it.
	          ts.needTransform = true;
	        }
	      };
	    },
	    /* 38 */
	    /***/function (module, exports, __webpack_require__) {
	      var PassThrough = function (options) {
	        if (!(this instanceof PassThrough)) return new PassThrough(options);

	        Transform.call(this, options);
	      };

	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.

	      // a passthrough stream.
	      // basically just the most minimal sort of Transform stream.
	      // Every written chunk gets output as-is.

	      module.exports = PassThrough;

	      var Transform = __webpack_require__(37);

	      /*<replacement>*/
	      var util = __webpack_require__(55);
	      util.inherits = __webpack_require__(56);
	      /*</replacement>*/

	      util.inherits(PassThrough, Transform);

	      PassThrough.prototype._transform = function (chunk, encoding, cb) {
	        cb(null, chunk);
	      };


	      /***/
	    },
	    /* 39 */
	    /***/function (module, exports, __webpack_require__) {
	      ;(function () {
	        var InvalidCharacterError = function (message) {
	          this.message = message;
	        };

	        var object = true ? exports : this; // #8: web workers
	        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

	        InvalidCharacterError.prototype = new Error();
	        InvalidCharacterError.prototype.name = "InvalidCharacterError";

	        // encoder
	        // [https://gist.github.com/999166] by [https://github.com/nignag]
	        object.btoa || (object.btoa = function (input) {
	          for (
	          // initialize result and counter
	          var block, charCode, idx = 0, map = chars, output = "";
	          // if the next input index does not exist:
	          //   change the mapping table to "="
	          //   check if d has no fractional digits
	          input.charAt(idx | 0) || (map = "=", idx % 1);
	          // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	          output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
	            charCode = input.charCodeAt(idx += 3 / 4);
	            if (charCode > 255) {
	              throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	            }
	            block = block << 8 | charCode;
	          }
	          return output;
	        });

	        // decoder
	        // [https://gist.github.com/1020396] by [https://github.com/atk]
	        object.atob || (object.atob = function (input) {
	          input = input.replace(/=+$/, "");
	          if (input.length % 4 == 1) {
	            throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	          }
	          for (
	          // initialize result and counters
	          var bc = 0, bs, buffer, idx = 0, output = "";
	          // get next character
	          buffer = input.charAt(idx++);
	          // character found in table? initialize bit storage and add its ascii value;
	          ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	          // and if not first of each 4 characters,
	          // convert the first 8 bits to one ascii character
	          bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
	            // try to find character in table (0-63, not found => -1)
	            buffer = chars.indexOf(buffer);
	          }
	          return output;
	        });
	      })();


	      /***/
	    },
	    /* 40 */
	    /***/function (module, exports, __webpack_require__) {
	      if (typeof Object.create === "function") {
	        // implementation from standard node.js 'util' module
	        module.exports = function inherits(ctor, superCtor) {
	          ctor.super_ = superCtor;
	          ctor.prototype = Object.create(superCtor.prototype, {
	            constructor: {
	              value: ctor,
	              enumerable: false,
	              writable: true,
	              configurable: true
	            }
	          });
	        };
	      } else {
	        // old school shim for old browsers
	        module.exports = function inherits(ctor, superCtor) {
	          ctor.super_ = superCtor;
	          var TempCtor = function () {};
	          TempCtor.prototype = superCtor.prototype;
	          ctor.prototype = new TempCtor();
	          ctor.prototype.constructor = ctor;
	        };
	      }


	      /***/
	    },
	    /* 41 */
	    /***/function (module, exports, __webpack_require__) {
	      module.exports = function (module) {
	        if (!module.webpackPolyfill) {
	          module.deprecate = function () {};
	          module.paths = [];
	          // module.parent = undefined by default
	          module.children = [];
	          module.webpackPolyfill = 1;
	        }
	        return module;
	      }


	      /***/;
	    },
	    /* 42 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";

	      module.exports = {
	        "2": "need dictionary", /* Z_NEED_DICT       2  */
	        "1": "stream end", /* Z_STREAM_END      1  */
	        "0": "", /* Z_OK              0  */
	        "-1": "file error", /* Z_ERRNO         (-1) */
	        "-2": "stream error", /* Z_STREAM_ERROR  (-2) */
	        "-3": "data error", /* Z_DATA_ERROR    (-3) */
	        "-4": "insufficient memory", /* Z_MEM_ERROR     (-4) */
	        "-5": "buffer error", /* Z_BUF_ERROR     (-5) */
	        "-6": "incompatible version" /* Z_VERSION_ERROR (-6) */
	      };

	      /***/
	    },
	    /* 43 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";


	      var ZStream = function () {
	        /* next input byte */
	        this.input = null; // JS specific, because we have no pointers
	        this.next_in = 0;
	        /* number of bytes available at input */
	        this.avail_in = 0;
	        /* total number of input bytes read so far */
	        this.total_in = 0;
	        /* next output byte should be put there */
	        this.output = null; // JS specific, because we have no pointers
	        this.next_out = 0;
	        /* remaining free space at output */
	        this.avail_out = 0;
	        /* total number of bytes output so far */
	        this.total_out = 0;
	        /* last error message, NULL if no error */
	        this.msg = "" /*Z_NULL*/;
	        /* not visible by applications */
	        this.state = null;
	        /* best guess about the data type: binary or text */
	        this.data_type = 2 /*Z_UNKNOWN*/;
	        /* adler32 value of the uncompressed data */
	        this.adler = 0;
	      };

	      module.exports = ZStream;

	      /***/
	    },
	    /* 44 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";

	      // Unix :) . Don't detect, use this default.

	      var err = function (strm, errorCode) {
	        strm.msg = msg[errorCode];
	        return errorCode;
	      };

	      var rank = function (f) {
	        return (f << 1) - (f > 4 ? 9 : 0);
	      };

	      var zero = function (buf) {
	        var len = buf.length;while (--len >= 0) {
	          buf[len] = 0;
	        }
	      };




	      /* =========================================================================
	       * Flush as much pending output as possible. All deflate() output goes
	       * through this function so some applications may wish to modify it
	       * to avoid allocating a large strm->output buffer and copying into it.
	       * (See also read_buf()).
	       */
	      var flush_pending = function (strm) {
	        var s = strm.state;

	        //_tr_flush_bits(s);
	        var len = s.pending;
	        if (len > strm.avail_out) {
	          len = strm.avail_out;
	        }
	        if (len === 0) {
	          return;
	        }

	        utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	        strm.next_out += len;
	        s.pending_out += len;
	        strm.total_out += len;
	        strm.avail_out -= len;
	        s.pending -= len;
	        if (s.pending === 0) {
	          s.pending_out = 0;
	        }
	      };

	      var flush_block_only = function (s, last) {
	        trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
	        s.block_start = s.strstart;
	        flush_pending(s.strm);
	      };

	      var put_byte = function (s, b) {
	        s.pending_buf[s.pending++] = b;
	      };




	      /* =========================================================================
	       * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	       * IN assertion: the stream state is correct and there is enough room in
	       * pending_buf.
	       */
	      var putShortMSB = function (s, b) {
	        //  put_byte(s, (Byte)(b >> 8));
	        //  put_byte(s, (Byte)(b & 0xff));
	        s.pending_buf[s.pending++] = b >>> 8 & 255;
	        s.pending_buf[s.pending++] = b & 255;
	      };




	      /* ===========================================================================
	       * Read a new buffer from the current input stream, update the adler32
	       * and total number of bytes read.  All deflate() input goes through
	       * this function so some applications may wish to modify it to avoid
	       * allocating a large strm->input buffer and copying from it.
	       * (See also flush_pending()).
	       */
	      var read_buf = function (strm, buf, start, size) {
	        var len = strm.avail_in;

	        if (len > size) {
	          len = size;
	        }
	        if (len === 0) {
	          return 0;
	        }

	        strm.avail_in -= len;

	        utils.arraySet(buf, strm.input, strm.next_in, len, start);
	        if (strm.state.wrap === 1) {
	          strm.adler = adler32(strm.adler, buf, len, start);
	        } else if (strm.state.wrap === 2) {
	          strm.adler = crc32(strm.adler, buf, len, start);
	        }

	        strm.next_in += len;
	        strm.total_in += len;

	        return len;
	      };




	      /* ===========================================================================
	       * Set match_start to the longest match starting at the given string and
	       * return its length. Matches shorter or equal to prev_length are discarded,
	       * in which case the result is equal to prev_length and match_start is
	       * garbage.
	       * IN assertions: cur_match is the head of the hash chain for the current
	       *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	       * OUT assertion: the match length is not greater than s->lookahead.
	       */
	      var longest_match = function (s, cur_match) {
	        var chain_length = s.max_chain_length; /* max hash chain length */
	        var scan = s.strstart; /* current string */
	        var match; /* matched string */
	        var len; /* length of current match */
	        var best_len = s.prev_length; /* best match length so far */
	        var nice_match = s.nice_match; /* stop if match long enough */
	        var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/;

	        var _win = s.window; // shortcut

	        var wmask = s.w_mask;
	        var prev = s.prev;

	        /* Stop when cur_match becomes <= limit. To simplify the code,
	         * we prevent matches with the string of window index 0.
	         */

	        var strend = s.strstart + MAX_MATCH;
	        var scan_end1 = _win[scan + best_len - 1];
	        var scan_end = _win[scan + best_len];

	        /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	         * It is easy to get rid of this optimization if necessary.
	         */
	        // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	        /* Do not waste too much time if we already have a good match: */
	        if (s.prev_length >= s.good_match) {
	          chain_length >>= 2;
	        }
	        /* Do not look for matches beyond the end of the input. This is necessary
	         * to make deflate deterministic.
	         */
	        if (nice_match > s.lookahead) {
	          nice_match = s.lookahead;
	        }

	        // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	        do {
	          // Assert(cur_match < s->strstart, "no future");
	          match = cur_match;

	          /* Skip to next match if the match length cannot increase
	           * or if the match length is less than 2.  Note that the checks below
	           * for insufficient lookahead only occur occasionally for performance
	           * reasons.  Therefore uninitialized memory will be accessed, and
	           * conditional jumps will be made that depend on those values.
	           * However the length of the match is limited to the lookahead, so
	           * the output of deflate is not affected by the uninitialized values.
	           */

	          if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
	            continue;
	          }

	          /* The check at best_len-1 can be removed because it will be made
	           * again later. (This heuristic is not always a win.)
	           * It is not necessary to compare scan[2] and match[2] since they
	           * are always equal when the other bytes match, given that
	           * the hash keys are equal and that HASH_BITS >= 8.
	           */
	          scan += 2;
	          match++;
	          // Assert(*scan == *match, "match[2]?");

	          /* We check for insufficient lookahead only every 8th comparison;
	           * the 256th check will be made at strstart+258.
	           */
	          do {} while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);

	          // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	          len = MAX_MATCH - (strend - scan);
	          scan = strend - MAX_MATCH;

	          if (len > best_len) {
	            s.match_start = cur_match;
	            best_len = len;
	            if (len >= nice_match) {
	              break;
	            }
	            scan_end1 = _win[scan + best_len - 1];
	            scan_end = _win[scan + best_len];
	          }
	        } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	        if (best_len <= s.lookahead) {
	          return best_len;
	        }
	        return s.lookahead;
	      };




	      /* ===========================================================================
	       * Fill the window when the lookahead becomes insufficient.
	       * Updates strstart and lookahead.
	       *
	       * IN assertion: lookahead < MIN_LOOKAHEAD
	       * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	       *    At least one byte has been read, or avail_in == 0; reads are
	       *    performed for at least two bytes (required for the zip translate_eol
	       *    option -- not supported here).
	       */
	      var fill_window = function (s) {
	        var _w_size = s.w_size;
	        var p, n, m, more, str;

	        //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	        do {
	          more = s.window_size - s.lookahead - s.strstart;

	          // JS ints have 32 bit, block below not needed
	          /* Deal with !@#$% 64K limit: */
	          //if (sizeof(int) <= 2) {
	          //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	          //        more = wsize;
	          //
	          //  } else if (more == (unsigned)(-1)) {
	          //        /* Very unlikely, but possible on 16 bit machine if
	          //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	          //         */
	          //        more--;
	          //    }
	          //}


	          /* If the window is almost full and there is insufficient lookahead,
	           * move the upper half to the lower one to make room in the upper half.
	           */
	          if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
	            utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	            s.match_start -= _w_size;
	            s.strstart -= _w_size;
	            /* we now have strstart >= MAX_DIST */
	            s.block_start -= _w_size;

	            /* Slide the hash table (could be avoided with 32 bit values
	             at the expense of memory usage). We slide even when level == 0
	             to keep the hash table consistent if we switch back to level > 0
	             later. (Using level 0 permanently is not an optimal usage of
	             zlib, so we don't care about this pathological case.)
	             */

	            n = s.hash_size;
	            p = n;
	            do {
	              m = s.head[--p];
	              s.head[p] = m >= _w_size ? m - _w_size : 0;
	            } while (--n);

	            n = _w_size;
	            p = n;
	            do {
	              m = s.prev[--p];
	              s.prev[p] = m >= _w_size ? m - _w_size : 0;
	              /* If n is not on any hash chain, prev[n] is garbage but
	               * its value will never be used.
	               */
	            } while (--n);

	            more += _w_size;
	          }
	          if (s.strm.avail_in === 0) {
	            break;
	          }

	          /* If there was no sliding:
	           *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	           *    more == window_size - lookahead - strstart
	           * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	           * => more >= window_size - 2*WSIZE + 2
	           * In the BIG_MEM or MMAP case (not yet supported),
	           *   window_size == input_size + MIN_LOOKAHEAD  &&
	           *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	           * Otherwise, window_size == 2*WSIZE so more >= 2.
	           * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	           */
	          //Assert(more >= 2, "more < 2");
	          n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	          s.lookahead += n;

	          /* Initialize the hash value now that we have some input: */
	          if (s.lookahead + s.insert >= MIN_MATCH) {
	            str = s.strstart - s.insert;
	            s.ins_h = s.window[str];

	            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
	            //#if MIN_MATCH != 3
	            //        Call update_hash() MIN_MATCH-3 more times
	            //#endif
	            while (s.insert) {
	              /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	              s.prev[str & s.w_mask] = s.head[s.ins_h];
	              s.head[s.ins_h] = str;
	              str++;
	              s.insert--;
	              if (s.lookahead + s.insert < MIN_MATCH) {
	                break;
	              }
	            }
	          }
	          /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	           * but this is not important since only literal bytes will be emitted.
	           */
	        } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	        /* If the WIN_INIT bytes after the end of the current data have never been
	         * written, then zero those bytes in order to avoid memory check reports of
	         * the use of uninitialized (or uninitialised as Julian writes) bytes by
	         * the longest match routines.  Update the high water mark for the next
	         * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	         * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	         */
	        //  if (s.high_water < s.window_size) {
	        //    var curr = s.strstart + s.lookahead;
	        //    var init = 0;
	        //
	        //    if (s.high_water < curr) {
	        //      /* Previous high water mark below current data -- zero WIN_INIT
	        //       * bytes or up to end of window, whichever is less.
	        //       */
	        //      init = s.window_size - curr;
	        //      if (init > WIN_INIT)
	        //        init = WIN_INIT;
	        //      zmemzero(s->window + curr, (unsigned)init);
	        //      s->high_water = curr + init;
	        //    }
	        //    else if (s->high_water < (ulg)curr + WIN_INIT) {
	        //      /* High water mark at or above current data, but below current data
	        //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	        //       * to end of window, whichever is less.
	        //       */
	        //      init = (ulg)curr + WIN_INIT - s->high_water;
	        //      if (init > s->window_size - s->high_water)
	        //        init = s->window_size - s->high_water;
	        //      zmemzero(s->window + s->high_water, (unsigned)init);
	        //      s->high_water += init;
	        //    }
	        //  }
	        //
	        //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	        //    "not enough room for search");
	      };

	      /* ===========================================================================
	       * Copy without compression as much as possible from the input stream, return
	       * the current block state.
	       * This function does not insert new strings in the dictionary since
	       * uncompressible data is probably not useful. This function is used
	       * only for the level=0 compression option.
	       * NOTE: this function should be optimized to avoid extra copying from
	       * window to pending_buf.
	       */
	      var deflate_stored = function (s, flush) {
	        /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	         * to pending_buf_size, and each stored block has a 5 byte header:
	         */
	        var max_block_size = 65535;

	        if (max_block_size > s.pending_buf_size - 5) {
	          max_block_size = s.pending_buf_size - 5;
	        }

	        /* Copy as much as possible from input to output: */
	        for (;;) {
	          /* Fill the window as much as possible: */
	          if (s.lookahead <= 1) {
	            //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	            //  s->block_start >= (long)s->w_size, "slide too late");
	            //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	            //        s.block_start >= s.w_size)) {
	            //        throw  new Error("slide too late");
	            //      }

	            fill_window(s);
	            if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	              return BS_NEED_MORE;
	            }

	            if (s.lookahead === 0) {
	              break;
	            }
	            /* flush the current block */
	          }
	          //Assert(s->block_start >= 0L, "block gone");
	          //    if (s.block_start < 0) throw new Error("block gone");

	          s.strstart += s.lookahead;
	          s.lookahead = 0;

	          /* Emit a stored block if pending_buf will be full: */
	          var max_start = s.block_start + max_block_size;

	          if (s.strstart === 0 || s.strstart >= max_start) {
	            /* strstart == 0 is possible when wraparound on 16-bit machine */
	            s.lookahead = s.strstart - max_start;
	            s.strstart = max_start;
	            /*** FLUSH_BLOCK(s, 0); ***/
	            flush_block_only(s, false);
	            if (s.strm.avail_out === 0) {
	              return BS_NEED_MORE;
	            }
	            /***/
	          }
	          /* Flush if we may have to slide, otherwise block_start may become
	           * negative and the data will be gone:
	           */
	          if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
	            /*** FLUSH_BLOCK(s, 0); ***/
	            flush_block_only(s, false);
	            if (s.strm.avail_out === 0) {
	              return BS_NEED_MORE;
	            }
	            /***/
	          }
	        }

	        s.insert = 0;

	        if (flush === Z_FINISH) {
	          /*** FLUSH_BLOCK(s, 1); ***/
	          flush_block_only(s, true);
	          if (s.strm.avail_out === 0) {
	            return BS_FINISH_STARTED;
	          }
	          /***/
	          return BS_FINISH_DONE;
	        }

	        if (s.strstart > s.block_start) {
	          /*** FLUSH_BLOCK(s, 0); ***/
	          flush_block_only(s, false);
	          if (s.strm.avail_out === 0) {
	            return BS_NEED_MORE;
	          }
	          /***/
	        }

	        return BS_NEED_MORE;
	      };

	      /* ===========================================================================
	       * Compress as much as possible from the input stream, return the current
	       * block state.
	       * This function does not perform lazy evaluation of matches and inserts
	       * new strings in the dictionary only for unmatched strings or for short
	       * matches. It is used only for the fast compression options.
	       */
	      var deflate_fast = function (s, flush) {
	        var hash_head; /* head of the hash chain */
	        var bflush; /* set if current block must be flushed */

	        for (;;) {
	          /* Make sure that we always have enough lookahead, except
	           * at the end of the input file. We need MAX_MATCH bytes
	           * for the next match, plus MIN_MATCH bytes to insert the
	           * string following the next match.
	           */
	          if (s.lookahead < MIN_LOOKAHEAD) {
	            fill_window(s);
	            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	              return BS_NEED_MORE;
	            }
	            if (s.lookahead === 0) {
	              break; /* flush the current block */
	            }
	          }

	          /* Insert the string window[strstart .. strstart+2] in the
	           * dictionary, and set hash_head to the head of the hash chain:
	           */
	          hash_head = 0 /*NIL*/;
	          if (s.lookahead >= MIN_MATCH) {
	            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	            s.head[s.ins_h] = s.strstart;
	            /***/
	          }

	          /* Find the longest match, discarding those <= prev_length.
	           * At this point we have always match_length < MIN_MATCH
	           */
	          if (hash_head !== 0 /*NIL*/ && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
	            /* To simplify the code, we prevent matches with the string
	             * of window index 0 (in particular we have to avoid a match
	             * of the string with itself at the start of the input file).
	             */
	            s.match_length = longest_match(s, hash_head);
	            /* longest_match() sets match_start */
	          }
	          if (s.match_length >= MIN_MATCH) {
	            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	            /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                           s.match_length - MIN_MATCH, bflush); ***/
	            bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	            s.lookahead -= s.match_length;

	            /* Insert new strings in the hash table only if the match length
	             * is not too large. This saves time but degrades compression.
	             */
	            if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	              s.match_length--; /* string at strstart already in table */
	              do {
	                s.strstart++;
	                /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	                s.head[s.ins_h] = s.strstart;
	                /***/
	                /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	                 * always MIN_MATCH bytes ahead.
	                 */
	              } while (--s.match_length !== 0);
	              s.strstart++;
	            } else {
	              s.strstart += s.match_length;
	              s.match_length = 0;
	              s.ins_h = s.window[s.strstart];
	              /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;

	              //#if MIN_MATCH != 3
	              //                Call UPDATE_HASH() MIN_MATCH-3 more times
	              //#endif
	              /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	               * matter since it will be recomputed at next deflate call.
	               */
	            }
	          } else {
	            /* No match, output a literal byte */
	            //Tracevv((stderr,"%c", s.window[s.strstart]));
	            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	            s.lookahead--;
	            s.strstart++;
	          }
	          if (bflush) {
	            /*** FLUSH_BLOCK(s, 0); ***/
	            flush_block_only(s, false);
	            if (s.strm.avail_out === 0) {
	              return BS_NEED_MORE;
	            }
	            /***/
	          }
	        }
	        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	        if (flush === Z_FINISH) {
	          /*** FLUSH_BLOCK(s, 1); ***/
	          flush_block_only(s, true);
	          if (s.strm.avail_out === 0) {
	            return BS_FINISH_STARTED;
	          }
	          /***/
	          return BS_FINISH_DONE;
	        }
	        if (s.last_lit) {
	          /*** FLUSH_BLOCK(s, 0); ***/
	          flush_block_only(s, false);
	          if (s.strm.avail_out === 0) {
	            return BS_NEED_MORE;
	          }
	          /***/
	        }
	        return BS_BLOCK_DONE;
	      };

	      /* ===========================================================================
	       * Same as above, but achieves better compression. We use a lazy
	       * evaluation for matches: a match is finally adopted only if there is
	       * no better match at the next window position.
	       */
	      var deflate_slow = function (s, flush) {
	        var hash_head; /* head of hash chain */
	        var bflush; /* set if current block must be flushed */

	        var max_insert;

	        /* Process the input block. */
	        for (;;) {
	          /* Make sure that we always have enough lookahead, except
	           * at the end of the input file. We need MAX_MATCH bytes
	           * for the next match, plus MIN_MATCH bytes to insert the
	           * string following the next match.
	           */
	          if (s.lookahead < MIN_LOOKAHEAD) {
	            fill_window(s);
	            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	              return BS_NEED_MORE;
	            }
	            if (s.lookahead === 0) {
	              break;
	            } /* flush the current block */
	          }

	          /* Insert the string window[strstart .. strstart+2] in the
	           * dictionary, and set hash_head to the head of the hash chain:
	           */
	          hash_head = 0 /*NIL*/;
	          if (s.lookahead >= MIN_MATCH) {
	            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	            s.head[s.ins_h] = s.strstart;
	            /***/
	          }

	          /* Find the longest match, discarding those <= prev_length.
	           */
	          s.prev_length = s.match_length;
	          s.prev_match = s.match_start;
	          s.match_length = MIN_MATCH - 1;

	          if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD /*MAX_DIST(s)*/) {
	            /* To simplify the code, we prevent matches with the string
	             * of window index 0 (in particular we have to avoid a match
	             * of the string with itself at the start of the input file).
	             */
	            s.match_length = longest_match(s, hash_head);
	            /* longest_match() sets match_start */

	            if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/)) {
	              /* If prev_match is also MIN_MATCH, match_start is garbage
	               * but we will ignore the current match anyway.
	               */
	              s.match_length = MIN_MATCH - 1;
	            }
	          }
	          /* If there was a match at the previous step and the current
	           * match is not better, output the previous match:
	           */
	          if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	            max_insert = s.strstart + s.lookahead - MIN_MATCH;
	            /* Do not insert strings in hash table beyond this. */

	            //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                           s.prev_length - MIN_MATCH, bflush);***/
	            bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	            /* Insert in hash table all strings up to the end of the match.
	             * strstart-1 and strstart are already inserted. If there is not
	             * enough lookahead, the last two strings are not inserted in
	             * the hash table.
	             */
	            s.lookahead -= s.prev_length - 1;
	            s.prev_length -= 2;
	            do {
	              if (++s.strstart <= max_insert) {
	                /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	                s.head[s.ins_h] = s.strstart;
	                /***/
	              }
	            } while (--s.prev_length !== 0);
	            s.match_available = 0;
	            s.match_length = MIN_MATCH - 1;
	            s.strstart++;

	            if (bflush) {
	              /*** FLUSH_BLOCK(s, 0); ***/
	              flush_block_only(s, false);
	              if (s.strm.avail_out === 0) {
	                return BS_NEED_MORE;
	              }
	              /***/
	            }
	          } else if (s.match_available) {
	            /* If there was no match at the previous position, output a
	             * single literal. If there was a match but the current match
	             * is longer, truncate the previous match to a single literal.
	             */
	            //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	            bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	            if (bflush) {
	              /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	              flush_block_only(s, false);
	              /***/
	            }
	            s.strstart++;
	            s.lookahead--;
	            if (s.strm.avail_out === 0) {
	              return BS_NEED_MORE;
	            }
	          } else {
	            /* There is no previous match to compare with, wait for
	             * the next step to decide.
	             */
	            s.match_available = 1;
	            s.strstart++;
	            s.lookahead--;
	          }
	        }
	        //Assert (flush != Z_NO_FLUSH, "no flush?");
	        if (s.match_available) {
	          //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	          bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	          s.match_available = 0;
	        }
	        s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	        if (flush === Z_FINISH) {
	          /*** FLUSH_BLOCK(s, 1); ***/
	          flush_block_only(s, true);
	          if (s.strm.avail_out === 0) {
	            return BS_FINISH_STARTED;
	          }
	          /***/
	          return BS_FINISH_DONE;
	        }
	        if (s.last_lit) {
	          /*** FLUSH_BLOCK(s, 0); ***/
	          flush_block_only(s, false);
	          if (s.strm.avail_out === 0) {
	            return BS_NEED_MORE;
	          }
	          /***/
	        }

	        return BS_BLOCK_DONE;
	      };




	      /* ===========================================================================
	       * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	       * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	       * deflate switches away from Z_RLE.)
	       */
	      var deflate_rle = function (s, flush) {
	        var bflush; /* set if current block must be flushed */
	        var prev; /* byte at distance one to match */
	        var scan, strend; /* scan goes up to strend for length of run */

	        var _win = s.window;

	        for (;;) {
	          /* Make sure that we always have enough lookahead, except
	           * at the end of the input file. We need MAX_MATCH bytes
	           * for the longest run, plus one for the unrolled loop.
	           */
	          if (s.lookahead <= MAX_MATCH) {
	            fill_window(s);
	            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	              return BS_NEED_MORE;
	            }
	            if (s.lookahead === 0) {
	              break;
	            } /* flush the current block */
	          }

	          /* See how many times the previous byte repeats */
	          s.match_length = 0;
	          if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	            scan = s.strstart - 1;
	            prev = _win[scan];
	            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	              strend = s.strstart + MAX_MATCH;
	              do {} while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
	              s.match_length = MAX_MATCH - (strend - scan);
	              if (s.match_length > s.lookahead) {
	                s.match_length = s.lookahead;
	              }
	            }
	            //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	          }

	          /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	          if (s.match_length >= MIN_MATCH) {
	            //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	            bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	            s.lookahead -= s.match_length;
	            s.strstart += s.match_length;
	            s.match_length = 0;
	          } else {
	            /* No match, output a literal byte */
	            //Tracevv((stderr,"%c", s->window[s->strstart]));
	            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	            bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	            s.lookahead--;
	            s.strstart++;
	          }
	          if (bflush) {
	            /*** FLUSH_BLOCK(s, 0); ***/
	            flush_block_only(s, false);
	            if (s.strm.avail_out === 0) {
	              return BS_NEED_MORE;
	            }
	            /***/
	          }
	        }
	        s.insert = 0;
	        if (flush === Z_FINISH) {
	          /*** FLUSH_BLOCK(s, 1); ***/
	          flush_block_only(s, true);
	          if (s.strm.avail_out === 0) {
	            return BS_FINISH_STARTED;
	          }
	          /***/
	          return BS_FINISH_DONE;
	        }
	        if (s.last_lit) {
	          /*** FLUSH_BLOCK(s, 0); ***/
	          flush_block_only(s, false);
	          if (s.strm.avail_out === 0) {
	            return BS_NEED_MORE;
	          }
	          /***/
	        }
	        return BS_BLOCK_DONE;
	      };

	      /* ===========================================================================
	       * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	       * (It will be regenerated if this run of deflate switches away from Huffman.)
	       */
	      var deflate_huff = function (s, flush) {
	        var bflush; /* set if current block must be flushed */

	        for (;;) {
	          /* Make sure that we have a literal to write. */
	          if (s.lookahead === 0) {
	            fill_window(s);
	            if (s.lookahead === 0) {
	              if (flush === Z_NO_FLUSH) {
	                return BS_NEED_MORE;
	              }
	              break; /* flush the current block */
	            }
	          }

	          /* Output a literal byte */
	          s.match_length = 0;
	          //Tracevv((stderr,"%c", s->window[s->strstart]));
	          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	          s.lookahead--;
	          s.strstart++;
	          if (bflush) {
	            /*** FLUSH_BLOCK(s, 0); ***/
	            flush_block_only(s, false);
	            if (s.strm.avail_out === 0) {
	              return BS_NEED_MORE;
	            }
	            /***/
	          }
	        }
	        s.insert = 0;
	        if (flush === Z_FINISH) {
	          /*** FLUSH_BLOCK(s, 1); ***/
	          flush_block_only(s, true);
	          if (s.strm.avail_out === 0) {
	            return BS_FINISH_STARTED;
	          }
	          /***/
	          return BS_FINISH_DONE;
	        }
	        if (s.last_lit) {
	          /*** FLUSH_BLOCK(s, 0); ***/
	          flush_block_only(s, false);
	          if (s.strm.avail_out === 0) {
	            return BS_NEED_MORE;
	          }
	          /***/
	        }
	        return BS_BLOCK_DONE;
	      };




	      /* ===========================================================================
	       * Initialize the "longest match" routines for a new zlib stream
	       */
	      var lm_init = function (s) {
	        s.window_size = 2 * s.w_size;

	        /*** CLEAR_HASH(s); ***/
	        zero(s.head); // Fill with NIL (= 0);

	        /* Set the default configuration parameters:
	         */
	        s.max_lazy_match = configuration_table[s.level].max_lazy;
	        s.good_match = configuration_table[s.level].good_length;
	        s.nice_match = configuration_table[s.level].nice_length;
	        s.max_chain_length = configuration_table[s.level].max_chain;

	        s.strstart = 0;
	        s.block_start = 0;
	        s.lookahead = 0;
	        s.insert = 0;
	        s.match_length = s.prev_length = MIN_MATCH - 1;
	        s.match_available = 0;
	        s.ins_h = 0;
	      };

	      var DeflateState = function () {
	        this.strm = null; /* pointer back to this zlib stream */
	        this.status = 0; /* as the name implies */
	        this.pending_buf = null; /* output still pending */
	        this.pending_buf_size = 0; /* size of pending_buf */
	        this.pending_out = 0; /* next pending byte to output to the stream */
	        this.pending = 0; /* nb of bytes in the pending buffer */
	        this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
	        this.gzhead = null; /* gzip header information to write */
	        this.gzindex = 0; /* where in extra, name, or comment */
	        this.method = Z_DEFLATED; /* can only be DEFLATED */
	        this.last_flush = -1; /* value of flush param for previous deflate call */

	        this.w_size = 0; /* LZ77 window size (32K by default) */
	        this.w_bits = 0; /* log2(w_size)  (8..16) */
	        this.w_mask = 0; /* w_size - 1 */

	        this.window = null;
	        /* Sliding window. Input bytes are read into the second half of the window,
	         * and move to the first half later to keep a dictionary of at least wSize
	         * bytes. With this organization, matches are limited to a distance of
	         * wSize-MAX_MATCH bytes, but this ensures that IO is always
	         * performed with a length multiple of the block size.
	         */

	        this.window_size = 0;
	        /* Actual size of window: 2*wSize, except when the user input buffer
	         * is directly used as sliding window.
	         */

	        this.prev = null;
	        /* Link to older string with same hash index. To limit the size of this
	         * array to 64K, this link is maintained only for the last 32K strings.
	         * An index in this array is thus a window index modulo 32K.
	         */

	        this.head = null; /* Heads of the hash chains or NIL. */

	        this.ins_h = 0; /* hash index of string to be inserted */
	        this.hash_size = 0; /* number of elements in hash table */
	        this.hash_bits = 0; /* log2(hash_size) */
	        this.hash_mask = 0; /* hash_size-1 */

	        this.hash_shift = 0;
	        /* Number of bits by which ins_h must be shifted at each input
	         * step. It must be such that after MIN_MATCH steps, the oldest
	         * byte no longer takes part in the hash key, that is:
	         *   hash_shift * MIN_MATCH >= hash_bits
	         */

	        this.block_start = 0;
	        /* Window position at the beginning of the current output block. Gets
	         * negative when the window is moved backwards.
	         */

	        this.match_length = 0; /* length of best match */
	        this.prev_match = 0; /* previous match */
	        this.match_available = 0; /* set if previous match exists */
	        this.strstart = 0; /* start of string to insert */
	        this.match_start = 0; /* start of matching string */
	        this.lookahead = 0; /* number of valid bytes ahead in window */

	        this.prev_length = 0;
	        /* Length of the best match at previous step. Matches not greater than this
	         * are discarded. This is used in the lazy match evaluation.
	         */

	        this.max_chain_length = 0;
	        /* To speed up deflation, hash chains are never searched beyond this
	         * length.  A higher limit improves compression ratio but degrades the
	         * speed.
	         */

	        this.max_lazy_match = 0;
	        /* Attempt to find a better match only when the current match is strictly
	         * smaller than this value. This mechanism is used only for compression
	         * levels >= 4.
	         */
	        // That's alias to max_lazy_match, don't use directly
	        //this.max_insert_length = 0;
	        /* Insert new strings in the hash table only if the match length is not
	         * greater than this length. This saves time but degrades compression.
	         * max_insert_length is used only for compression levels <= 3.
	         */

	        this.level = 0; /* compression level (1..9) */
	        this.strategy = 0; /* favor or force Huffman coding*/

	        this.good_match = 0;
	        /* Use a faster search when the previous match is longer than this */

	        this.nice_match = 0; /* Stop searching when current match exceeds this */

	        /* used by trees.c: */

	        /* Didn't use ct_data typedef below to suppress compiler warning */

	        // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	        // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	        // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	        // Use flat array of DOUBLE size, with interleaved fata,
	        // because JS does not support effective
	        this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
	        this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
	        this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
	        zero(this.dyn_ltree);
	        zero(this.dyn_dtree);
	        zero(this.bl_tree);

	        this.l_desc = null; /* desc. for literal tree */
	        this.d_desc = null; /* desc. for distance tree */
	        this.bl_desc = null; /* desc. for bit length tree */

	        //ush bl_count[MAX_BITS+1];
	        this.bl_count = new utils.Buf16(MAX_BITS + 1);
	        /* number of codes at each bit length for an optimal tree */

	        //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	        this.heap = new utils.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */
	        zero(this.heap);

	        this.heap_len = 0; /* number of elements in the heap */
	        this.heap_max = 0; /* element of largest frequency */
	        /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	         * The same heap array is used to build all trees.
	         */

	        this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	        zero(this.depth);
	        /* Depth of each subtree used as tie breaker for trees of equal frequency
	         */

	        this.l_buf = 0; /* buffer index for literals or lengths */

	        this.lit_bufsize = 0;
	        /* Size of match buffer for literals/lengths.  There are 4 reasons for
	         * limiting lit_bufsize to 64K:
	         *   - frequencies can be kept in 16 bit counters
	         *   - if compression is not successful for the first block, all input
	         *     data is still in the window so we can still emit a stored block even
	         *     when input comes from standard input.  (This can also be done for
	         *     all blocks if lit_bufsize is not greater than 32K.)
	         *   - if compression is not successful for a file smaller than 64K, we can
	         *     even emit a stored file instead of a stored block (saving 5 bytes).
	         *     This is applicable only for zip (not gzip or zlib).
	         *   - creating new Huffman trees less frequently may not provide fast
	         *     adaptation to changes in the input data statistics. (Take for
	         *     example a binary file with poorly compressible code followed by
	         *     a highly compressible string table.) Smaller buffer sizes give
	         *     fast adaptation but have of course the overhead of transmitting
	         *     trees more frequently.
	         *   - I can't count above 4
	         */

	        this.last_lit = 0; /* running index in l_buf */

	        this.d_buf = 0;
	        /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	         * the same number of elements. To use different lengths, an extra flag
	         * array would be necessary.
	         */

	        this.opt_len = 0; /* bit length of current block with optimal trees */
	        this.static_len = 0; /* bit length of current block with static trees */
	        this.matches = 0; /* number of string matches in current block */
	        this.insert = 0; /* bytes at end of window left to insert */


	        this.bi_buf = 0;
	        /* Output buffer. bits are inserted starting at the bottom (least
	         * significant bits).
	         */
	        this.bi_valid = 0;
	        /* Number of valid bits in bi_buf.  All bits above the last valid bit
	         * are always zero.
	         */

	        // Used for window memory init. We safely ignore it for JS. That makes
	        // sense only for pointers and memory check tools.
	        //this.high_water = 0;
	        /* High water mark offset in window for initialized bytes -- bytes above
	         * this are set to zero in order to avoid memory check warnings when
	         * longest match routines access bytes past the input.  This is then
	         * updated to the new high water mark.
	         */
	      };

	      var deflateResetKeep = function (strm) {
	        var s;

	        if (!strm || !strm.state) {
	          return err(strm, Z_STREAM_ERROR);
	        }

	        strm.total_in = strm.total_out = 0;
	        strm.data_type = Z_UNKNOWN;

	        s = strm.state;
	        s.pending = 0;
	        s.pending_out = 0;

	        if (s.wrap < 0) {
	          s.wrap = -s.wrap;
	          /* was made negative by deflate(..., Z_FINISH); */
	        }
	        s.status = s.wrap ? INIT_STATE : BUSY_STATE;
	        strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
	         : 1; // adler32(0, Z_NULL, 0)
	        s.last_flush = Z_NO_FLUSH;
	        trees._tr_init(s);
	        return Z_OK;
	      };

	      var deflateReset = function (strm) {
	        var ret = deflateResetKeep(strm);
	        if (ret === Z_OK) {
	          lm_init(strm.state);
	        }
	        return ret;
	      };

	      var deflateSetHeader = function (strm, head) {
	        if (!strm || !strm.state) {
	          return Z_STREAM_ERROR;
	        }
	        if (strm.state.wrap !== 2) {
	          return Z_STREAM_ERROR;
	        }
	        strm.state.gzhead = head;
	        return Z_OK;
	      };

	      var deflateInit2 = function (strm, level, method, windowBits, memLevel, strategy) {
	        if (!strm) {
	          // === Z_NULL
	          return Z_STREAM_ERROR;
	        }
	        var wrap = 1;

	        if (level === Z_DEFAULT_COMPRESSION) {
	          level = 6;
	        }

	        if (windowBits < 0) {
	          /* suppress zlib wrapper */
	          wrap = 0;
	          windowBits = -windowBits;
	        } else if (windowBits > 15) {
	          wrap = 2; /* write gzip wrapper instead */
	          windowBits -= 16;
	        }


	        if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
	          return err(strm, Z_STREAM_ERROR);
	        }


	        if (windowBits === 8) {
	          windowBits = 9;
	        }
	        /* until 256-byte window bug fixed */

	        var s = new DeflateState();

	        strm.state = s;
	        s.strm = strm;

	        s.wrap = wrap;
	        s.gzhead = null;
	        s.w_bits = windowBits;
	        s.w_size = 1 << s.w_bits;
	        s.w_mask = s.w_size - 1;

	        s.hash_bits = memLevel + 7;
	        s.hash_size = 1 << s.hash_bits;
	        s.hash_mask = s.hash_size - 1;
	        s.hash_shift = ~ ~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	        s.window = new utils.Buf8(s.w_size * 2);
	        s.head = new utils.Buf16(s.hash_size);
	        s.prev = new utils.Buf16(s.w_size);

	        // Don't need mem init magic for JS.
	        //s.high_water = 0;  /* nothing written to s->window yet */

	        s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */

	        s.pending_buf_size = s.lit_bufsize * 4;
	        s.pending_buf = new utils.Buf8(s.pending_buf_size);

	        s.d_buf = s.lit_bufsize >> 1;
	        s.l_buf = (1 + 2) * s.lit_bufsize;

	        s.level = level;
	        s.strategy = strategy;
	        s.method = method;

	        return deflateReset(strm);
	      };

	      var deflateInit = function (strm, level) {
	        return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	      };

	      var deflate = function (strm, flush) {
	        var old_flush, s;
	        var beg, val; // for gzip header write only

	        if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
	          return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	        }

	        s = strm.state;

	        if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
	          return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
	        }

	        s.strm = strm; /* just in case */
	        old_flush = s.last_flush;
	        s.last_flush = flush;

	        /* Write the header */
	        if (s.status === INIT_STATE) {
	          if (s.wrap === 2) {
	            // GZIP header
	            strm.adler = 0; //crc32(0L, Z_NULL, 0);
	            put_byte(s, 31);
	            put_byte(s, 139);
	            put_byte(s, 8);
	            if (!s.gzhead) {
	              // s->gzhead == Z_NULL
	              put_byte(s, 0);
	              put_byte(s, 0);
	              put_byte(s, 0);
	              put_byte(s, 0);
	              put_byte(s, 0);
	              put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
	              put_byte(s, OS_CODE);
	              s.status = BUSY_STATE;
	            } else {
	              put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
	              put_byte(s, s.gzhead.time & 255);
	              put_byte(s, s.gzhead.time >> 8 & 255);
	              put_byte(s, s.gzhead.time >> 16 & 255);
	              put_byte(s, s.gzhead.time >> 24 & 255);
	              put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
	              put_byte(s, s.gzhead.os & 255);
	              if (s.gzhead.extra && s.gzhead.extra.length) {
	                put_byte(s, s.gzhead.extra.length & 255);
	                put_byte(s, s.gzhead.extra.length >> 8 & 255);
	              }
	              if (s.gzhead.hcrc) {
	                strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	              }
	              s.gzindex = 0;
	              s.status = EXTRA_STATE;
	            }
	          } else // DEFLATE header
	            {
	              var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
	              var level_flags = -1;

	              if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	                level_flags = 0;
	              } else if (s.level < 6) {
	                level_flags = 1;
	              } else if (s.level === 6) {
	                level_flags = 2;
	              } else {
	                level_flags = 3;
	              }
	              header |= level_flags << 6;
	              if (s.strstart !== 0) {
	                header |= PRESET_DICT;
	              }
	              header += 31 - header % 31;

	              s.status = BUSY_STATE;
	              putShortMSB(s, header);

	              /* Save the adler32 of the preset dictionary: */
	              if (s.strstart !== 0) {
	                putShortMSB(s, strm.adler >>> 16);
	                putShortMSB(s, strm.adler & 65535);
	              }
	              strm.adler = 1; // adler32(0L, Z_NULL, 0);
	            }
	        }

	        //#ifdef GZIP
	        if (s.status === EXTRA_STATE) {
	          if (s.gzhead.extra /* != Z_NULL*/) {
	            beg = s.pending; /* start of bytes to update crc */

	            while (s.gzindex < (s.gzhead.extra.length & 65535)) {
	              if (s.pending === s.pending_buf_size) {
	                if (s.gzhead.hcrc && s.pending > beg) {
	                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	                }
	                flush_pending(strm);
	                beg = s.pending;
	                if (s.pending === s.pending_buf_size) {
	                  break;
	                }
	              }
	              put_byte(s, s.gzhead.extra[s.gzindex] & 255);
	              s.gzindex++;
	            }
	            if (s.gzhead.hcrc && s.pending > beg) {
	              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	            }
	            if (s.gzindex === s.gzhead.extra.length) {
	              s.gzindex = 0;
	              s.status = NAME_STATE;
	            }
	          } else {
	            s.status = NAME_STATE;
	          }
	        }
	        if (s.status === NAME_STATE) {
	          if (s.gzhead.name /* != Z_NULL*/) {
	            beg = s.pending; /* start of bytes to update crc */
	            //int val;

	            do {
	              if (s.pending === s.pending_buf_size) {
	                if (s.gzhead.hcrc && s.pending > beg) {
	                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	                }
	                flush_pending(strm);
	                beg = s.pending;
	                if (s.pending === s.pending_buf_size) {
	                  val = 1;
	                  break;
	                }
	              }
	              // JS specific: little magic to add zero terminator to end of string
	              if (s.gzindex < s.gzhead.name.length) {
	                val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
	              } else {
	                val = 0;
	              }
	              put_byte(s, val);
	            } while (val !== 0);

	            if (s.gzhead.hcrc && s.pending > beg) {
	              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	            }
	            if (val === 0) {
	              s.gzindex = 0;
	              s.status = COMMENT_STATE;
	            }
	          } else {
	            s.status = COMMENT_STATE;
	          }
	        }
	        if (s.status === COMMENT_STATE) {
	          if (s.gzhead.comment /* != Z_NULL*/) {
	            beg = s.pending; /* start of bytes to update crc */
	            //int val;

	            do {
	              if (s.pending === s.pending_buf_size) {
	                if (s.gzhead.hcrc && s.pending > beg) {
	                  strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	                }
	                flush_pending(strm);
	                beg = s.pending;
	                if (s.pending === s.pending_buf_size) {
	                  val = 1;
	                  break;
	                }
	              }
	              // JS specific: little magic to add zero terminator to end of string
	              if (s.gzindex < s.gzhead.comment.length) {
	                val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
	              } else {
	                val = 0;
	              }
	              put_byte(s, val);
	            } while (val !== 0);

	            if (s.gzhead.hcrc && s.pending > beg) {
	              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	            }
	            if (val === 0) {
	              s.status = HCRC_STATE;
	            }
	          } else {
	            s.status = HCRC_STATE;
	          }
	        }
	        if (s.status === HCRC_STATE) {
	          if (s.gzhead.hcrc) {
	            if (s.pending + 2 > s.pending_buf_size) {
	              flush_pending(strm);
	            }
	            if (s.pending + 2 <= s.pending_buf_size) {
	              put_byte(s, strm.adler & 255);
	              put_byte(s, strm.adler >> 8 & 255);
	              strm.adler = 0; //crc32(0L, Z_NULL, 0);
	              s.status = BUSY_STATE;
	            }
	          } else {
	            s.status = BUSY_STATE;
	          }
	        }
	        //#endif

	        /* Flush as much pending output as possible */
	        if (s.pending !== 0) {
	          flush_pending(strm);
	          if (strm.avail_out === 0) {
	            /* Since avail_out is 0, deflate will be called again with
	             * more output space, but possibly with both pending and
	             * avail_in equal to zero. There won't be anything to do,
	             * but this is not an error situation so make sure we
	             * return OK instead of BUF_ERROR at next call of deflate:
	             */
	            s.last_flush = -1;
	            return Z_OK;
	          }

	          /* Make sure there is something to do and avoid duplicate consecutive
	           * flushes. For repeated and useless calls with Z_FINISH, we keep
	           * returning Z_STREAM_END instead of Z_BUF_ERROR.
	           */
	        } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
	          return err(strm, Z_BUF_ERROR);
	        }

	        /* User must not provide more input after the first FINISH: */
	        if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	          return err(strm, Z_BUF_ERROR);
	        }

	        /* Start a new block or continue the current one.
	         */
	        if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
	          var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);

	          if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	            s.status = FINISH_STATE;
	          }
	          if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	            if (strm.avail_out === 0) {
	              s.last_flush = -1;
	              /* avoid BUF_ERROR next call, see above */
	            }
	            return Z_OK;
	            /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	             * of deflate should use the same flush parameter to make sure
	             * that the flush is complete. So we don't have to output an
	             * empty block here, this will be done at next call. This also
	             * ensures that for a very small output buffer, we emit at most
	             * one empty block.
	             */
	          }
	          if (bstate === BS_BLOCK_DONE) {
	            if (flush === Z_PARTIAL_FLUSH) {
	              trees._tr_align(s);
	            } else if (flush !== Z_BLOCK) {
	              /* FULL_FLUSH or SYNC_FLUSH */

	              trees._tr_stored_block(s, 0, 0, false);
	              /* For a full flush, this empty block will be recognized
	               * as a special marker by inflate_sync().
	               */
	              if (flush === Z_FULL_FLUSH) {
	                /*** CLEAR_HASH(s); ***/ /* forget history */
	                zero(s.head); // Fill with NIL (= 0);

	                if (s.lookahead === 0) {
	                  s.strstart = 0;
	                  s.block_start = 0;
	                  s.insert = 0;
	                }
	              }
	            }
	            flush_pending(strm);
	            if (strm.avail_out === 0) {
	              s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	              return Z_OK;
	            }
	          }
	        }
	        //Assert(strm->avail_out > 0, "bug2");
	        //if (strm.avail_out <= 0) { throw new Error("bug2");}

	        if (flush !== Z_FINISH) {
	          return Z_OK;
	        }
	        if (s.wrap <= 0) {
	          return Z_STREAM_END;
	        }

	        /* Write the trailer */
	        if (s.wrap === 2) {
	          put_byte(s, strm.adler & 255);
	          put_byte(s, strm.adler >> 8 & 255);
	          put_byte(s, strm.adler >> 16 & 255);
	          put_byte(s, strm.adler >> 24 & 255);
	          put_byte(s, strm.total_in & 255);
	          put_byte(s, strm.total_in >> 8 & 255);
	          put_byte(s, strm.total_in >> 16 & 255);
	          put_byte(s, strm.total_in >> 24 & 255);
	        } else {
	          putShortMSB(s, strm.adler >>> 16);
	          putShortMSB(s, strm.adler & 65535);
	        }

	        flush_pending(strm);
	        /* If avail_out is zero, the application will call deflate again
	         * to flush the rest.
	         */
	        if (s.wrap > 0) {
	          s.wrap = -s.wrap;
	        }
	        /* write the trailer only once! */
	        return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	      };

	      var deflateEnd = function (strm) {
	        var status;

	        if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
	          return Z_STREAM_ERROR;
	        }

	        status = strm.state.status;
	        if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
	          return err(strm, Z_STREAM_ERROR);
	        }

	        strm.state = null;

	        return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	      };

	      var utils = __webpack_require__(49);
	      var trees = __webpack_require__(50);
	      var adler32 = __webpack_require__(51);
	      var crc32 = __webpack_require__(52);
	      var msg = __webpack_require__(42);

	      /* Public constants ==========================================================*/
	      /* ===========================================================================*/


	      /* Allowed flush values; see deflate() and inflate() below for details */
	      var Z_NO_FLUSH = 0;
	      var Z_PARTIAL_FLUSH = 1;
	      //var Z_SYNC_FLUSH    = 2;
	      var Z_FULL_FLUSH = 3;
	      var Z_FINISH = 4;
	      var Z_BLOCK = 5;
	      //var Z_TREES         = 6;


	      /* Return codes for the compression/decompression functions. Negative values
	       * are errors, positive values are used for special but normal events.
	       */
	      var Z_OK = 0;
	      var Z_STREAM_END = 1;
	      //var Z_NEED_DICT     = 2;
	      //var Z_ERRNO         = -1;
	      var Z_STREAM_ERROR = -2;
	      var Z_DATA_ERROR = -3;
	      //var Z_MEM_ERROR     = -4;
	      var Z_BUF_ERROR = -5;
	      //var Z_VERSION_ERROR = -6;


	      /* compression levels */
	      //var Z_NO_COMPRESSION      = 0;
	      //var Z_BEST_SPEED          = 1;
	      //var Z_BEST_COMPRESSION    = 9;
	      var Z_DEFAULT_COMPRESSION = -1;


	      var Z_FILTERED = 1;
	      var Z_HUFFMAN_ONLY = 2;
	      var Z_RLE = 3;
	      var Z_FIXED = 4;
	      var Z_DEFAULT_STRATEGY = 0;

	      /* Possible values of the data_type field (though see inflate()) */
	      //var Z_BINARY              = 0;
	      //var Z_TEXT                = 1;
	      //var Z_ASCII               = 1; // = Z_TEXT
	      var Z_UNKNOWN = 2;


	      /* The deflate compression method */
	      var Z_DEFLATED = 8;

	      /*============================================================================*/


	      var MAX_MEM_LEVEL = 9;
	      /* Maximum value for memLevel in deflateInit2 */
	      var MAX_WBITS = 15;
	      /* 32K LZ77 window */
	      var DEF_MEM_LEVEL = 8;


	      var LENGTH_CODES = 29;
	      /* number of length codes, not counting the special END_BLOCK code */
	      var LITERALS = 256;
	      /* number of literal bytes 0..255 */
	      var L_CODES = LITERALS + 1 + LENGTH_CODES;
	      /* number of Literal or Length codes, including the END_BLOCK code */
	      var D_CODES = 30;
	      /* number of distance codes */
	      var BL_CODES = 19;
	      /* number of codes used to transfer the bit lengths */
	      var HEAP_SIZE = 2 * L_CODES + 1;
	      /* maximum heap size */
	      var MAX_BITS = 15;
	      /* All codes must not exceed MAX_BITS bits */

	      var MIN_MATCH = 3;
	      var MAX_MATCH = 258;
	      var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;

	      var PRESET_DICT = 32;

	      var INIT_STATE = 42;
	      var EXTRA_STATE = 69;
	      var NAME_STATE = 73;
	      var COMMENT_STATE = 91;
	      var HCRC_STATE = 103;
	      var BUSY_STATE = 113;
	      var FINISH_STATE = 666;

	      var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
	      var BS_BLOCK_DONE = 2; /* block flush performed */
	      var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	      var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

	      var OS_CODE = 3;

	      /* Values for max_lazy_match, good_match and max_chain_length, depending on
	       * the desired pack level (0..9). The values given below have been tuned to
	       * exclude worst case performance for pathological files. Better values may be
	       * found for specific files.
	       */
	      var Config = function (good_length, max_lazy, nice_length, max_chain, func) {
	        this.good_length = good_length;
	        this.max_lazy = max_lazy;
	        this.nice_length = nice_length;
	        this.max_chain = max_chain;
	        this.func = func;
	      };

	      var configuration_table;

	      configuration_table = [
	      /*      good lazy nice chain */
	      new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
	      new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
	      new Config(4, 5, 16, 8, deflate_fast), /* 2 */
	      new Config(4, 6, 32, 32, deflate_fast), /* 3 */

	      new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
	      new Config(8, 16, 32, 32, deflate_slow), /* 5 */
	      new Config(8, 16, 128, 128, deflate_slow), /* 6 */
	      new Config(8, 32, 128, 256, deflate_slow), /* 7 */
	      new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
	      new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
	      ];

	      /* =========================================================================
	       * Copy the source state to the destination state
	       */
	      //function deflateCopy(dest, source) {
	      //
	      //}

	      exports.deflateInit = deflateInit;
	      exports.deflateInit2 = deflateInit2;
	      exports.deflateReset = deflateReset;
	      exports.deflateResetKeep = deflateResetKeep;
	      exports.deflateSetHeader = deflateSetHeader;
	      exports.deflate = deflate;
	      exports.deflateEnd = deflateEnd;
	      exports.deflateInfo = "pako deflate (from Nodeca project)";

	      /* Not implemented
	      exports.deflateBound = deflateBound;
	      exports.deflateCopy = deflateCopy;
	      exports.deflateSetDictionary = deflateSetDictionary;
	      exports.deflateParams = deflateParams;
	      exports.deflatePending = deflatePending;
	      exports.deflatePrime = deflatePrime;
	      exports.deflateTune = deflateTune;
	      */

	      /***/
	    },
	    /* 45 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";


	      var ZSWAP32 = function (q) {
	        return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
	      };

	      var InflateState = function () {
	        this.mode = 0; /* current inflate mode */
	        this.last = false; /* true if processing last block */
	        this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
	        this.havedict = false; /* true if dictionary provided */
	        this.flags = 0; /* gzip header method and flags (0 if zlib) */
	        this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
	        this.check = 0; /* protected copy of check value */
	        this.total = 0; /* protected copy of output count */
	        // TODO: may be {}
	        this.head = null; /* where to save gzip header information */

	        /* sliding window */
	        this.wbits = 0; /* log base 2 of requested window size */
	        this.wsize = 0; /* window size or zero if not using window */
	        this.whave = 0; /* valid bytes in the window */
	        this.wnext = 0; /* window write index */
	        this.window = null; /* allocated sliding window, if needed */

	        /* bit accumulator */
	        this.hold = 0; /* input bit accumulator */
	        this.bits = 0; /* number of bits in "in" */

	        /* for string and stored block copying */
	        this.length = 0; /* literal or length of data to copy */
	        this.offset = 0; /* distance back to copy string from */

	        /* for table and code decoding */
	        this.extra = 0; /* extra bits needed */

	        /* fixed and dynamic code tables */
	        this.lencode = null; /* starting table for length/literal codes */
	        this.distcode = null; /* starting table for distance codes */
	        this.lenbits = 0; /* index bits for lencode */
	        this.distbits = 0; /* index bits for distcode */

	        /* dynamic table building */
	        this.ncode = 0; /* number of code length code lengths */
	        this.nlen = 0; /* number of length code lengths */
	        this.ndist = 0; /* number of distance code lengths */
	        this.have = 0; /* number of code lengths in lens[] */
	        this.next = null; /* next available space in codes[] */

	        this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	        this.work = new utils.Buf16(288); /* work area for code table building */

	        /*
	         because we don't have pointers in js, we use lencode and distcode directly
	         as buffers so we don't need codes
	        */
	        //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	        this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
	        this.distdyn = null; /* dynamic table for distance codes (JS specific) */
	        this.sane = 0; /* if false, allow invalid distance too far */
	        this.back = 0; /* bits back of last unprocessed length/lit */
	        this.was = 0; /* initial length of match */
	      };

	      var inflateResetKeep = function (strm) {
	        var state;

	        if (!strm || !strm.state) {
	          return Z_STREAM_ERROR;
	        }
	        state = strm.state;
	        strm.total_in = strm.total_out = state.total = 0;
	        strm.msg = ""; /*Z_NULL*/
	        if (state.wrap) {
	          /* to support ill-conceived Java test suite */
	          strm.adler = state.wrap & 1;
	        }
	        state.mode = HEAD;
	        state.last = 0;
	        state.havedict = 0;
	        state.dmax = 32768;
	        state.head = null /*Z_NULL*/;
	        state.hold = 0;
	        state.bits = 0;
	        //state.lencode = state.distcode = state.next = state.codes;
	        state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	        state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

	        state.sane = 1;
	        state.back = -1;
	        //Tracev((stderr, "inflate: reset\n"));
	        return Z_OK;
	      };

	      var inflateReset = function (strm) {
	        var state;

	        if (!strm || !strm.state) {
	          return Z_STREAM_ERROR;
	        }
	        state = strm.state;
	        state.wsize = 0;
	        state.whave = 0;
	        state.wnext = 0;
	        return inflateResetKeep(strm);
	      };

	      var inflateReset2 = function (strm, windowBits) {
	        var wrap;
	        var state;

	        /* get the state */
	        if (!strm || !strm.state) {
	          return Z_STREAM_ERROR;
	        }
	        state = strm.state;

	        /* extract wrap request from windowBits parameter */
	        if (windowBits < 0) {
	          wrap = 0;
	          windowBits = -windowBits;
	        } else {
	          wrap = (windowBits >> 4) + 1;
	          if (windowBits < 48) {
	            windowBits &= 15;
	          }
	        }

	        /* set number of window bits, free window if different */
	        if (windowBits && (windowBits < 8 || windowBits > 15)) {
	          return Z_STREAM_ERROR;
	        }
	        if (state.window !== null && state.wbits !== windowBits) {
	          state.window = null;
	        }

	        /* update state and reset the rest of it */
	        state.wrap = wrap;
	        state.wbits = windowBits;
	        return inflateReset(strm);
	      };

	      var inflateInit2 = function (strm, windowBits) {
	        var ret;
	        var state;

	        if (!strm) {
	          return Z_STREAM_ERROR;
	        }
	        //strm.msg = Z_NULL;                 /* in case we return an error */

	        state = new InflateState();

	        //if (state === Z_NULL) return Z_MEM_ERROR;
	        //Tracev((stderr, "inflate: allocated\n"));
	        strm.state = state;
	        state.window = null /*Z_NULL*/;
	        ret = inflateReset2(strm, windowBits);
	        if (ret !== Z_OK) {
	          strm.state = null /*Z_NULL*/;
	        }
	        return ret;
	      };

	      var inflateInit = function (strm) {
	        return inflateInit2(strm, DEF_WBITS);
	      };

	      // We have no pointers in JS, so keep tables separate

	      var fixedtables = function (state) {
	        /* build fixed huffman tables if first call (may not be thread safe) */
	        if (virgin) {
	          var sym;

	          lenfix = new utils.Buf32(512);
	          distfix = new utils.Buf32(32);

	          /* literal/length table */
	          sym = 0;
	          while (sym < 144) {
	            state.lens[sym++] = 8;
	          }
	          while (sym < 256) {
	            state.lens[sym++] = 9;
	          }
	          while (sym < 280) {
	            state.lens[sym++] = 7;
	          }
	          while (sym < 288) {
	            state.lens[sym++] = 8;
	          }

	          inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });

	          /* distance table */
	          sym = 0;
	          while (sym < 32) {
	            state.lens[sym++] = 5;
	          }

	          inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });

	          /* do this just once */
	          virgin = false;
	        }

	        state.lencode = lenfix;
	        state.lenbits = 9;
	        state.distcode = distfix;
	        state.distbits = 5;
	      };




	      /*
	       Update the window with the last wsize (normally 32K) bytes written before
	       returning.  If window does not exist yet, create it.  This is only called
	       when a window is already in use, or when output has been written during this
	       inflate call, but the end of the deflate stream has not been reached yet.
	       It is also called to create a window for dictionary data when a dictionary
	       is loaded.
	      	 Providing output buffers larger than 32K to inflate() should provide a speed
	       advantage, since only the last 32K of output is copied to the sliding window
	       upon return from inflate(), and since all distances after the first 32K of
	       output will fall in the output data, making match copies simpler and faster.
	       The advantage may be dependent on the size of the processor's data caches.
	       */
	      var updatewindow = function (strm, src, end, copy) {
	        var dist;
	        var state = strm.state;

	        /* if it hasn't been done already, allocate space for the window */
	        if (state.window === null) {
	          state.wsize = 1 << state.wbits;
	          state.wnext = 0;
	          state.whave = 0;

	          state.window = new utils.Buf8(state.wsize);
	        }

	        /* copy state->wsize or less output bytes into the circular window */
	        if (copy >= state.wsize) {
	          utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	          state.wnext = 0;
	          state.whave = state.wsize;
	        } else {
	          dist = state.wsize - state.wnext;
	          if (dist > copy) {
	            dist = copy;
	          }
	          //zmemcpy(state->window + state->wnext, end - copy, dist);
	          utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	          copy -= dist;
	          if (copy) {
	            //zmemcpy(state->window, end - copy, copy);
	            utils.arraySet(state.window, src, end - copy, copy, 0);
	            state.wnext = copy;
	            state.whave = state.wsize;
	          } else {
	            state.wnext += dist;
	            if (state.wnext === state.wsize) {
	              state.wnext = 0;
	            }
	            if (state.whave < state.wsize) {
	              state.whave += dist;
	            }
	          }
	        }
	        return 0;
	      };

	      var inflate = function (strm, flush) {
	        var state;
	        var input, output; // input/output buffers
	        var next; /* next input INDEX */
	        var put; /* next output INDEX */
	        var have, left; /* available input and output */
	        var hold; /* bit buffer */
	        var bits; /* bits in bit buffer */
	        var _in, _out; /* save starting available input and output */
	        var copy; /* number of stored or match bytes to copy */
	        var from; /* where to copy match bytes from */
	        var from_source;
	        var here = 0; /* current decoding table entry */
	        var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	        //var last;                   /* parent table entry */
	        var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	        var len; /* length to copy for repeats, bits to drop */
	        var ret; /* return code */
	        var hbuf = new utils.Buf8(4); /* buffer for gzip header crc calculation */
	        var opts;

	        var n; // temporary var for NEED_BITS

	        var order = /* permutation of code lengths */
	        [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];


	        if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
	          return Z_STREAM_ERROR;
	        }

	        state = strm.state;
	        if (state.mode === TYPE) {
	          state.mode = TYPEDO;
	        } /* skip check */


	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---

	        _in = have;
	        _out = left;
	        ret = Z_OK;

	        inf_leave: // goto emulation
	        for (;;) {
	          switch (state.mode) {
	            case HEAD:
	              if (state.wrap === 0) {
	                state.mode = TYPEDO;
	                break;
	              }
	              //=== NEEDBITS(16);
	              while (bits < 16) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              if (state.wrap & 2 && hold === 35615) {
	                /* gzip header */
	                state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
	                //=== CRC2(state.check, hold);
	                hbuf[0] = hold & 255;
	                hbuf[1] = hold >>> 8 & 255;
	                state.check = crc32(state.check, hbuf, 2, 0);
	                //===//

	                //=== INITBITS();
	                hold = 0;
	                bits = 0;
	                //===//
	                state.mode = FLAGS;
	                break;
	              }
	              state.flags = 0; /* expect zlib header */
	              if (state.head) {
	                state.head.done = false;
	              }
	              if (!(state.wrap & 1) || /* check if zlib header allowed */
	              (((hold & 255) << 8) + (hold >> 8)) % 31) {
	                strm.msg = "incorrect header check";
	                state.mode = BAD;
	                break;
	              }
	              if ((hold & 15) !== Z_DEFLATED) {
	                strm.msg = "unknown compression method";
	                state.mode = BAD;
	                break;
	              }
	              //--- DROPBITS(4) ---//
	              hold >>>= 4;
	              bits -= 4;
	              //---//
	              len = (hold & 15) + 8;
	              if (state.wbits === 0) {
	                state.wbits = len;
	              } else if (len > state.wbits) {
	                strm.msg = "invalid window size";
	                state.mode = BAD;
	                break;
	              }
	              state.dmax = 1 << len;
	              //Tracev((stderr, "inflate:   zlib header ok\n"));
	              strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
	              state.mode = hold & 512 ? DICTID : TYPE;
	              //=== INITBITS();
	              hold = 0;
	              bits = 0;
	              //===//
	              break;
	            case FLAGS:
	              //=== NEEDBITS(16); */
	              while (bits < 16) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              state.flags = hold;
	              if ((state.flags & 255) !== Z_DEFLATED) {
	                strm.msg = "unknown compression method";
	                state.mode = BAD;
	                break;
	              }
	              if (state.flags & 57344) {
	                strm.msg = "unknown header flags set";
	                state.mode = BAD;
	                break;
	              }
	              if (state.head) {
	                state.head.text = hold >> 8 & 1;
	              }
	              if (state.flags & 512) {
	                //=== CRC2(state.check, hold);
	                hbuf[0] = hold & 255;
	                hbuf[1] = hold >>> 8 & 255;
	                state.check = crc32(state.check, hbuf, 2, 0);
	                //===//
	              }
	              //=== INITBITS();
	              hold = 0;
	              bits = 0;
	              //===//
	              state.mode = TIME;
	            /* falls through */
	            case TIME:
	              //=== NEEDBITS(32); */
	              while (bits < 32) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              if (state.head) {
	                state.head.time = hold;
	              }
	              if (state.flags & 512) {
	                //=== CRC4(state.check, hold)
	                hbuf[0] = hold & 255;
	                hbuf[1] = hold >>> 8 & 255;
	                hbuf[2] = hold >>> 16 & 255;
	                hbuf[3] = hold >>> 24 & 255;
	                state.check = crc32(state.check, hbuf, 4, 0);
	                //===
	              }
	              //=== INITBITS();
	              hold = 0;
	              bits = 0;
	              //===//
	              state.mode = OS;
	            /* falls through */
	            case OS:
	              //=== NEEDBITS(16); */
	              while (bits < 16) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              if (state.head) {
	                state.head.xflags = hold & 255;
	                state.head.os = hold >> 8;
	              }
	              if (state.flags & 512) {
	                //=== CRC2(state.check, hold);
	                hbuf[0] = hold & 255;
	                hbuf[1] = hold >>> 8 & 255;
	                state.check = crc32(state.check, hbuf, 2, 0);
	                //===//
	              }
	              //=== INITBITS();
	              hold = 0;
	              bits = 0;
	              //===//
	              state.mode = EXLEN;
	            /* falls through */
	            case EXLEN:
	              if (state.flags & 1024) {
	                //=== NEEDBITS(16); */
	                while (bits < 16) {
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                }
	                //===//
	                state.length = hold;
	                if (state.head) {
	                  state.head.extra_len = hold;
	                }
	                if (state.flags & 512) {
	                  //=== CRC2(state.check, hold);
	                  hbuf[0] = hold & 255;
	                  hbuf[1] = hold >>> 8 & 255;
	                  state.check = crc32(state.check, hbuf, 2, 0);
	                  //===//
	                }
	                //=== INITBITS();
	                hold = 0;
	                bits = 0;
	                //===//
	              } else if (state.head) {
	                state.head.extra = null /*Z_NULL*/;
	              }
	              state.mode = EXTRA;
	            /* falls through */
	            case EXTRA:
	              if (state.flags & 1024) {
	                copy = state.length;
	                if (copy > have) {
	                  copy = have;
	                }
	                if (copy) {
	                  if (state.head) {
	                    len = state.head.extra_len - state.length;
	                    if (!state.head.extra) {
	                      // Use untyped array for more conveniend processing later
	                      state.head.extra = new Array(state.head.extra_len);
	                    }
	                    utils.arraySet(state.head.extra, input, next,
	                    // extra field is limited to 65536 bytes
	                    // - no need for additional size check
	                    copy,
	                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	                    len);
	                    //zmemcpy(state.head.extra + len, next,
	                    //        len + copy > state.head.extra_max ?
	                    //        state.head.extra_max - len : copy);
	                  }
	                  if (state.flags & 512) {
	                    state.check = crc32(state.check, input, copy, next);
	                  }
	                  have -= copy;
	                  next += copy;
	                  state.length -= copy;
	                }
	                if (state.length) {
	                  break inf_leave;
	                }
	              }
	              state.length = 0;
	              state.mode = NAME;
	            /* falls through */
	            case NAME:
	              if (state.flags & 2048) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                copy = 0;
	                do {
	                  // TODO: 2 or 1 bytes?
	                  len = input[next + copy++];
	                  /* use constant limit because in js we should not preallocate memory */
	                  if (state.head && len && state.length < 65536 /*state.head.name_max*/) {
	                    state.head.name += String.fromCharCode(len);
	                  }
	                } while (len && copy < have);

	                if (state.flags & 512) {
	                  state.check = crc32(state.check, input, copy, next);
	                }
	                have -= copy;
	                next += copy;
	                if (len) {
	                  break inf_leave;
	                }
	              } else if (state.head) {
	                state.head.name = null;
	              }
	              state.length = 0;
	              state.mode = COMMENT;
	            /* falls through */
	            case COMMENT:
	              if (state.flags & 4096) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                copy = 0;
	                do {
	                  len = input[next + copy++];
	                  /* use constant limit because in js we should not preallocate memory */
	                  if (state.head && len && state.length < 65536 /*state.head.comm_max*/) {
	                    state.head.comment += String.fromCharCode(len);
	                  }
	                } while (len && copy < have);
	                if (state.flags & 512) {
	                  state.check = crc32(state.check, input, copy, next);
	                }
	                have -= copy;
	                next += copy;
	                if (len) {
	                  break inf_leave;
	                }
	              } else if (state.head) {
	                state.head.comment = null;
	              }
	              state.mode = HCRC;
	            /* falls through */
	            case HCRC:
	              if (state.flags & 512) {
	                //=== NEEDBITS(16); */
	                while (bits < 16) {
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                }
	                //===//
	                if (hold !== (state.check & 65535)) {
	                  strm.msg = "header crc mismatch";
	                  state.mode = BAD;
	                  break;
	                }
	                //=== INITBITS();
	                hold = 0;
	                bits = 0;
	                //===//
	              }
	              if (state.head) {
	                state.head.hcrc = state.flags >> 9 & 1;
	                state.head.done = true;
	              }
	              strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
	              state.mode = TYPE;
	              break;
	            case DICTID:
	              //=== NEEDBITS(32); */
	              while (bits < 32) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              strm.adler = state.check = ZSWAP32(hold);
	              //=== INITBITS();
	              hold = 0;
	              bits = 0;
	              //===//
	              state.mode = DICT;
	            /* falls through */
	            case DICT:
	              if (state.havedict === 0) {
	                //--- RESTORE() ---
	                strm.next_out = put;
	                strm.avail_out = left;
	                strm.next_in = next;
	                strm.avail_in = have;
	                state.hold = hold;
	                state.bits = bits;
	                //---
	                return Z_NEED_DICT;
	              }
	              strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
	              state.mode = TYPE;
	            /* falls through */
	            case TYPE:
	              if (flush === Z_BLOCK || flush === Z_TREES) {
	                break inf_leave;
	              }
	            /* falls through */
	            case TYPEDO:
	              if (state.last) {
	                //--- BYTEBITS() ---//
	                hold >>>= bits & 7;
	                bits -= bits & 7;
	                //---//
	                state.mode = CHECK;
	                break;
	              }
	              //=== NEEDBITS(3); */
	              while (bits < 3) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              state.last = hold & 1;
	              //--- DROPBITS(1) ---//
	              hold >>>= 1;
	              bits -= 1;
	              //---//

	              switch (hold & 3) {
	                case 0:
	                  /* stored block */
	                  //Tracev((stderr, "inflate:     stored block%s\n",
	                  //        state.last ? " (last)" : ""));
	                  state.mode = STORED;
	                  break;
	                case 1:
	                  /* fixed block */
	                  fixedtables(state);
	                  //Tracev((stderr, "inflate:     fixed codes block%s\n",
	                  //        state.last ? " (last)" : ""));
	                  state.mode = LEN_; /* decode codes */
	                  if (flush === Z_TREES) {
	                    //--- DROPBITS(2) ---//
	                    hold >>>= 2;
	                    bits -= 2;
	                    //---//
	                    break inf_leave;
	                  }
	                  break;
	                case 2:
	                  /* dynamic block */
	                  //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	                  //        state.last ? " (last)" : ""));
	                  state.mode = TABLE;
	                  break;
	                case 3:
	                  strm.msg = "invalid block type";
	                  state.mode = BAD;
	              }
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	              break;
	            case STORED:
	              //--- BYTEBITS() ---// /* go to byte boundary */
	              hold >>>= bits & 7;
	              bits -= bits & 7;
	              //---//
	              //=== NEEDBITS(32); */
	              while (bits < 32) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
	                strm.msg = "invalid stored block lengths";
	                state.mode = BAD;
	                break;
	              }
	              state.length = hold & 65535;
	              //Tracev((stderr, "inflate:       stored length %u\n",
	              //        state.length));
	              //=== INITBITS();
	              hold = 0;
	              bits = 0;
	              //===//
	              state.mode = COPY_;
	              if (flush === Z_TREES) {
	                break inf_leave;
	              }
	            /* falls through */
	            case COPY_:
	              state.mode = COPY;
	            /* falls through */
	            case COPY:
	              copy = state.length;
	              if (copy) {
	                if (copy > have) {
	                  copy = have;
	                }
	                if (copy > left) {
	                  copy = left;
	                }
	                if (copy === 0) {
	                  break inf_leave;
	                }
	                //--- zmemcpy(put, next, copy); ---
	                utils.arraySet(output, input, next, copy, put);
	                //---//
	                have -= copy;
	                next += copy;
	                left -= copy;
	                put += copy;
	                state.length -= copy;
	                break;
	              }
	              //Tracev((stderr, "inflate:       stored end\n"));
	              state.mode = TYPE;
	              break;
	            case TABLE:
	              //=== NEEDBITS(14); */
	              while (bits < 14) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              state.nlen = (hold & 31) + 257;
	              //--- DROPBITS(5) ---//
	              hold >>>= 5;
	              bits -= 5;
	              //---//
	              state.ndist = (hold & 31) + 1;
	              //--- DROPBITS(5) ---//
	              hold >>>= 5;
	              bits -= 5;
	              //---//
	              state.ncode = (hold & 15) + 4;
	              //--- DROPBITS(4) ---//
	              hold >>>= 4;
	              bits -= 4;
	              //---//
	              //#ifndef PKZIP_BUG_WORKAROUND
	              if (state.nlen > 286 || state.ndist > 30) {
	                strm.msg = "too many length or distance symbols";
	                state.mode = BAD;
	                break;
	              }
	              //#endif
	              //Tracev((stderr, "inflate:       table sizes ok\n"));
	              state.have = 0;
	              state.mode = LENLENS;
	            /* falls through */
	            case LENLENS:
	              while (state.have < state.ncode) {
	                //=== NEEDBITS(3);
	                while (bits < 3) {
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                }
	                //===//
	                state.lens[order[state.have++]] = hold & 7; //BITS(3);
	                //--- DROPBITS(3) ---//
	                hold >>>= 3;
	                bits -= 3;
	                //---//
	              }
	              while (state.have < 19) {
	                state.lens[order[state.have++]] = 0;
	              }
	              // We have separate tables & no pointers. 2 commented lines below not needed.
	              //state.next = state.codes;
	              //state.lencode = state.next;
	              // Switch to use dynamic table
	              state.lencode = state.lendyn;
	              state.lenbits = 7;

	              opts = { bits: state.lenbits };
	              ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	              state.lenbits = opts.bits;

	              if (ret) {
	                strm.msg = "invalid code lengths set";
	                state.mode = BAD;
	                break;
	              }
	              //Tracev((stderr, "inflate:       code lengths ok\n"));
	              state.have = 0;
	              state.mode = CODELENS;
	            /* falls through */
	            case CODELENS:
	              while (state.have < state.nlen + state.ndist) {
	                for (;;) {
	                  here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
	                  here_bits = here >>> 24;
	                  here_op = here >>> 16 & 255;
	                  here_val = here & 65535;

	                  if (here_bits <= bits) {
	                    break;
	                  }
	                  //--- PULLBYTE() ---//
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                  //---//
	                }
	                if (here_val < 16) {
	                  //--- DROPBITS(here.bits) ---//
	                  hold >>>= here_bits;
	                  bits -= here_bits;
	                  //---//
	                  state.lens[state.have++] = here_val;
	                } else {
	                  if (here_val === 16) {
	                    //=== NEEDBITS(here.bits + 2);
	                    n = here_bits + 2;
	                    while (bits < n) {
	                      if (have === 0) {
	                        break inf_leave;
	                      }
	                      have--;
	                      hold += input[next++] << bits;
	                      bits += 8;
	                    }
	                    //===//
	                    //--- DROPBITS(here.bits) ---//
	                    hold >>>= here_bits;
	                    bits -= here_bits;
	                    //---//
	                    if (state.have === 0) {
	                      strm.msg = "invalid bit length repeat";
	                      state.mode = BAD;
	                      break;
	                    }
	                    len = state.lens[state.have - 1];
	                    copy = 3 + (hold & 3); //BITS(2);
	                    //--- DROPBITS(2) ---//
	                    hold >>>= 2;
	                    bits -= 2;
	                    //---//
	                  } else if (here_val === 17) {
	                    //=== NEEDBITS(here.bits + 3);
	                    n = here_bits + 3;
	                    while (bits < n) {
	                      if (have === 0) {
	                        break inf_leave;
	                      }
	                      have--;
	                      hold += input[next++] << bits;
	                      bits += 8;
	                    }
	                    //===//
	                    //--- DROPBITS(here.bits) ---//
	                    hold >>>= here_bits;
	                    bits -= here_bits;
	                    //---//
	                    len = 0;
	                    copy = 3 + (hold & 7); //BITS(3);
	                    //--- DROPBITS(3) ---//
	                    hold >>>= 3;
	                    bits -= 3;
	                    //---//
	                  } else {
	                    //=== NEEDBITS(here.bits + 7);
	                    n = here_bits + 7;
	                    while (bits < n) {
	                      if (have === 0) {
	                        break inf_leave;
	                      }
	                      have--;
	                      hold += input[next++] << bits;
	                      bits += 8;
	                    }
	                    //===//
	                    //--- DROPBITS(here.bits) ---//
	                    hold >>>= here_bits;
	                    bits -= here_bits;
	                    //---//
	                    len = 0;
	                    copy = 11 + (hold & 127); //BITS(7);
	                    //--- DROPBITS(7) ---//
	                    hold >>>= 7;
	                    bits -= 7;
	                    //---//
	                  }
	                  if (state.have + copy > state.nlen + state.ndist) {
	                    strm.msg = "invalid bit length repeat";
	                    state.mode = BAD;
	                    break;
	                  }
	                  while (copy--) {
	                    state.lens[state.have++] = len;
	                  }
	                }
	              }

	              /* handle error breaks in while */
	              if (state.mode === BAD) {
	                break;
	              }

	              /* check for end-of-block code (better have one) */
	              if (state.lens[256] === 0) {
	                strm.msg = "invalid code -- missing end-of-block";
	                state.mode = BAD;
	                break;
	              }

	              /* build code tables -- note: do not change the lenbits or distbits
	                 values here (9 and 6) without reading the comments in inftrees.h
	                 concerning the ENOUGH constants, which depend on those values */
	              state.lenbits = 9;

	              opts = { bits: state.lenbits };
	              ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	              // We have separate tables & no pointers. 2 commented lines below not needed.
	              // state.next_index = opts.table_index;
	              state.lenbits = opts.bits;
	              // state.lencode = state.next;

	              if (ret) {
	                strm.msg = "invalid literal/lengths set";
	                state.mode = BAD;
	                break;
	              }

	              state.distbits = 6;
	              //state.distcode.copy(state.codes);
	              // Switch to use dynamic table
	              state.distcode = state.distdyn;
	              opts = { bits: state.distbits };
	              ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	              // We have separate tables & no pointers. 2 commented lines below not needed.
	              // state.next_index = opts.table_index;
	              state.distbits = opts.bits;
	              // state.distcode = state.next;

	              if (ret) {
	                strm.msg = "invalid distances set";
	                state.mode = BAD;
	                break;
	              }
	              //Tracev((stderr, 'inflate:       codes ok\n'));
	              state.mode = LEN_;
	              if (flush === Z_TREES) {
	                break inf_leave;
	              }
	            /* falls through */
	            case LEN_:
	              state.mode = LEN;
	            /* falls through */
	            case LEN:
	              if (have >= 6 && left >= 258) {
	                //--- RESTORE() ---
	                strm.next_out = put;
	                strm.avail_out = left;
	                strm.next_in = next;
	                strm.avail_in = have;
	                state.hold = hold;
	                state.bits = bits;
	                //---
	                inflate_fast(strm, _out);
	                //--- LOAD() ---
	                put = strm.next_out;
	                output = strm.output;
	                left = strm.avail_out;
	                next = strm.next_in;
	                input = strm.input;
	                have = strm.avail_in;
	                hold = state.hold;
	                bits = state.bits;
	                //---

	                if (state.mode === TYPE) {
	                  state.back = -1;
	                }
	                break;
	              }
	              state.back = 0;
	              for (;;) {
	                here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
	                here_bits = here >>> 24;
	                here_op = here >>> 16 & 255;
	                here_val = here & 65535;

	                if (here_bits <= bits) {
	                  break;
	                }
	                //--- PULLBYTE() ---//
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	                //---//
	              }
	              if (here_op && (here_op & 240) === 0) {
	                last_bits = here_bits;
	                last_op = here_op;
	                last_val = here_val;
	                for (;;) {
	                  here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
	                  here_bits = here >>> 24;
	                  here_op = here >>> 16 & 255;
	                  here_val = here & 65535;

	                  if (last_bits + here_bits <= bits) {
	                    break;
	                  }
	                  //--- PULLBYTE() ---//
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                  //---//
	                }
	                //--- DROPBITS(last.bits) ---//
	                hold >>>= last_bits;
	                bits -= last_bits;
	                //---//
	                state.back += last_bits;
	              }
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              state.back += here_bits;
	              state.length = here_val;
	              if (here_op === 0) {
	                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	                //        "inflate:         literal '%c'\n" :
	                //        "inflate:         literal 0x%02x\n", here.val));
	                state.mode = LIT;
	                break;
	              }
	              if (here_op & 32) {
	                //Tracevv((stderr, "inflate:         end of block\n"));
	                state.back = -1;
	                state.mode = TYPE;
	                break;
	              }
	              if (here_op & 64) {
	                strm.msg = "invalid literal/length code";
	                state.mode = BAD;
	                break;
	              }
	              state.extra = here_op & 15;
	              state.mode = LENEXT;
	            /* falls through */
	            case LENEXT:
	              if (state.extra) {
	                //=== NEEDBITS(state.extra);
	                n = state.extra;
	                while (bits < n) {
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                }
	                //===//
	                state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
	                //--- DROPBITS(state.extra) ---//
	                hold >>>= state.extra;
	                bits -= state.extra;
	                //---//
	                state.back += state.extra;
	              }
	              //Tracevv((stderr, "inflate:         length %u\n", state.length));
	              state.was = state.length;
	              state.mode = DIST;
	            /* falls through */
	            case DIST:
	              for (;;) {
	                here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/
	                here_bits = here >>> 24;
	                here_op = here >>> 16 & 255;
	                here_val = here & 65535;

	                if (here_bits <= bits) {
	                  break;
	                }
	                //--- PULLBYTE() ---//
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	                //---//
	              }
	              if ((here_op & 240) === 0) {
	                last_bits = here_bits;
	                last_op = here_op;
	                last_val = here_val;
	                for (;;) {
	                  here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
	                  here_bits = here >>> 24;
	                  here_op = here >>> 16 & 255;
	                  here_val = here & 65535;

	                  if (last_bits + here_bits <= bits) {
	                    break;
	                  }
	                  //--- PULLBYTE() ---//
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                  //---//
	                }
	                //--- DROPBITS(last.bits) ---//
	                hold >>>= last_bits;
	                bits -= last_bits;
	                //---//
	                state.back += last_bits;
	              }
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              state.back += here_bits;
	              if (here_op & 64) {
	                strm.msg = "invalid distance code";
	                state.mode = BAD;
	                break;
	              }
	              state.offset = here_val;
	              state.extra = here_op & 15;
	              state.mode = DISTEXT;
	            /* falls through */
	            case DISTEXT:
	              if (state.extra) {
	                //=== NEEDBITS(state.extra);
	                n = state.extra;
	                while (bits < n) {
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                }
	                //===//
	                state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
	                //--- DROPBITS(state.extra) ---//
	                hold >>>= state.extra;
	                bits -= state.extra;
	                //---//
	                state.back += state.extra;
	              }
	              //#ifdef INFLATE_STRICT
	              if (state.offset > state.dmax) {
	                strm.msg = "invalid distance too far back";
	                state.mode = BAD;
	                break;
	              }
	              //#endif
	              //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	              state.mode = MATCH;
	            /* falls through */
	            case MATCH:
	              if (left === 0) {
	                break inf_leave;
	              }
	              copy = _out - left;
	              if (state.offset > copy) {
	                /* copy from window */
	                copy = state.offset - copy;
	                if (copy > state.whave) {
	                  if (state.sane) {
	                    strm.msg = "invalid distance too far back";
	                    state.mode = BAD;
	                    break;
	                  }
	                  // (!) This block is disabled in zlib defailts,
	                  // don't enable it for binary compatibility
	                  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	                  //          Trace((stderr, "inflate.c too far\n"));
	                  //          copy -= state.whave;
	                  //          if (copy > state.length) { copy = state.length; }
	                  //          if (copy > left) { copy = left; }
	                  //          left -= copy;
	                  //          state.length -= copy;
	                  //          do {
	                  //            output[put++] = 0;
	                  //          } while (--copy);
	                  //          if (state.length === 0) { state.mode = LEN; }
	                  //          break;
	                  //#endif
	                }
	                if (copy > state.wnext) {
	                  copy -= state.wnext;
	                  from = state.wsize - copy;
	                } else {
	                  from = state.wnext - copy;
	                }
	                if (copy > state.length) {
	                  copy = state.length;
	                }
	                from_source = state.window;
	              } else {
	                /* copy from output */
	                from_source = output;
	                from = put - state.offset;
	                copy = state.length;
	              }
	              if (copy > left) {
	                copy = left;
	              }
	              left -= copy;
	              state.length -= copy;
	              do {
	                output[put++] = from_source[from++];
	              } while (--copy);
	              if (state.length === 0) {
	                state.mode = LEN;
	              }
	              break;
	            case LIT:
	              if (left === 0) {
	                break inf_leave;
	              }
	              output[put++] = state.length;
	              left--;
	              state.mode = LEN;
	              break;
	            case CHECK:
	              if (state.wrap) {
	                //=== NEEDBITS(32);
	                while (bits < 32) {
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  // Use '|' insdead of '+' to make sure that result is signed
	                  hold |= input[next++] << bits;
	                  bits += 8;
	                }
	                //===//
	                _out -= left;
	                strm.total_out += _out;
	                state.total += _out;
	                if (_out) {
	                  strm.adler = state.check = state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
	                }
	                _out = left;
	                // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too
	                if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {
	                  strm.msg = "incorrect data check";
	                  state.mode = BAD;
	                  break;
	                }
	                //=== INITBITS();
	                hold = 0;
	                bits = 0;
	                //===//
	                //Tracev((stderr, "inflate:   check matches trailer\n"));
	              }
	              state.mode = LENGTH;
	            /* falls through */
	            case LENGTH:
	              if (state.wrap && state.flags) {
	                //=== NEEDBITS(32);
	                while (bits < 32) {
	                  if (have === 0) {
	                    break inf_leave;
	                  }
	                  have--;
	                  hold += input[next++] << bits;
	                  bits += 8;
	                }
	                //===//
	                if (hold !== (state.total & 4294967295)) {
	                  strm.msg = "incorrect length check";
	                  state.mode = BAD;
	                  break;
	                }
	                //=== INITBITS();
	                hold = 0;
	                bits = 0;
	                //===//
	                //Tracev((stderr, "inflate:   length matches trailer\n"));
	              }
	              state.mode = DONE;
	            /* falls through */
	            case DONE:
	              ret = Z_STREAM_END;
	              break inf_leave;
	            case BAD:
	              ret = Z_DATA_ERROR;
	              break inf_leave;
	            case MEM:
	              return Z_MEM_ERROR;
	            case SYNC:
	            /* falls through */
	            default:
	              return Z_STREAM_ERROR;
	          }
	        }

	        // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	        /*
	           Return from inflate(), updating the total counts and the check value.
	           If there was no progress during the inflate() call, return a buffer
	           error.  Call updatewindow() to create and/or update the window state.
	           Note: a memory error from inflate() is non-recoverable.
	         */

	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---

	        if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
	          if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	            state.mode = MEM;
	            return Z_MEM_ERROR;
	          }
	        }
	        _in -= strm.avail_in;
	        _out -= strm.avail_out;
	        strm.total_in += _in;
	        strm.total_out += _out;
	        state.total += _out;
	        if (state.wrap && _out) {
	          strm.adler = state.check = state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
	        }
	        strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	        if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
	          ret = Z_BUF_ERROR;
	        }
	        return ret;
	      };

	      var inflateEnd = function (strm) {
	        if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	          return Z_STREAM_ERROR;
	        }

	        var state = strm.state;
	        if (state.window) {
	          state.window = null;
	        }
	        strm.state = null;
	        return Z_OK;
	      };

	      var inflateGetHeader = function (strm, head) {
	        var state;

	        /* check state */
	        if (!strm || !strm.state) {
	          return Z_STREAM_ERROR;
	        }
	        state = strm.state;
	        if ((state.wrap & 2) === 0) {
	          return Z_STREAM_ERROR;
	        }

	        /* save header structure */
	        state.head = head;
	        head.done = false;
	        return Z_OK;
	      };

	      var utils = __webpack_require__(49);
	      var adler32 = __webpack_require__(51);
	      var crc32 = __webpack_require__(52);
	      var inflate_fast = __webpack_require__(53);
	      var inflate_table = __webpack_require__(54);

	      var CODES = 0;
	      var LENS = 1;
	      var DISTS = 2;

	      /* Public constants ==========================================================*/
	      /* ===========================================================================*/


	      /* Allowed flush values; see deflate() and inflate() below for details */
	      //var Z_NO_FLUSH      = 0;
	      //var Z_PARTIAL_FLUSH = 1;
	      //var Z_SYNC_FLUSH    = 2;
	      //var Z_FULL_FLUSH    = 3;
	      var Z_FINISH = 4;
	      var Z_BLOCK = 5;
	      var Z_TREES = 6;


	      /* Return codes for the compression/decompression functions. Negative values
	       * are errors, positive values are used for special but normal events.
	       */
	      var Z_OK = 0;
	      var Z_STREAM_END = 1;
	      var Z_NEED_DICT = 2;
	      //var Z_ERRNO         = -1;
	      var Z_STREAM_ERROR = -2;
	      var Z_DATA_ERROR = -3;
	      var Z_MEM_ERROR = -4;
	      var Z_BUF_ERROR = -5;
	      //var Z_VERSION_ERROR = -6;

	      /* The deflate compression method */
	      var Z_DEFLATED = 8;


	      /* STATES ====================================================================*/
	      /* ===========================================================================*/


	      var HEAD = 1; /* i: waiting for magic header */
	      var FLAGS = 2; /* i: waiting for method and flags (gzip) */
	      var TIME = 3; /* i: waiting for modification time (gzip) */
	      var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
	      var EXLEN = 5; /* i: waiting for extra length (gzip) */
	      var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
	      var NAME = 7; /* i: waiting for end of file name (gzip) */
	      var COMMENT = 8; /* i: waiting for end of comment (gzip) */
	      var HCRC = 9; /* i: waiting for header crc (gzip) */
	      var DICTID = 10; /* i: waiting for dictionary check value */
	      var DICT = 11; /* waiting for inflateSetDictionary() call */
	      var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
	      var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
	      var STORED = 14; /* i: waiting for stored size (length and complement) */
	      var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
	      var COPY = 16; /* i/o: waiting for input or output to copy stored block */
	      var TABLE = 17; /* i: waiting for dynamic block table lengths */
	      var LENLENS = 18; /* i: waiting for code length code lengths */
	      var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
	      var LEN_ = 20; /* i: same as LEN below, but only first time in */
	      var LEN = 21; /* i: waiting for length/lit/eob code */
	      var LENEXT = 22; /* i: waiting for length extra bits */
	      var DIST = 23; /* i: waiting for distance code */
	      var DISTEXT = 24; /* i: waiting for distance extra bits */
	      var MATCH = 25; /* o: waiting for output space to copy string */
	      var LIT = 26; /* o: waiting for output space to write literal */
	      var CHECK = 27; /* i: waiting for 32-bit check value */
	      var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
	      var DONE = 29; /* finished check, done -- remain here until reset */
	      var BAD = 30; /* got a data error -- remain here until reset */
	      var MEM = 31; /* got an inflate() memory error -- remain here until reset */
	      var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

	      /* ===========================================================================*/



	      var ENOUGH_LENS = 852;
	      var ENOUGH_DISTS = 592;
	      //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	      var MAX_WBITS = 15;
	      /* 32K LZ77 window */
	      var DEF_WBITS = MAX_WBITS;


	      /*
	       Return state with length and distance decoding tables and index sizes set to
	       fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	       If BUILDFIXED is defined, then instead this routine builds the tables the
	       first time it's called, and returns those tables the first time and
	       thereafter.  This reduces the size of the code by about 2K bytes, in
	       exchange for a little execution time.  However, BUILDFIXED should not be
	       used for threaded applications, since the rewriting of the tables and virgin
	       may not be thread-safe.
	       */
	      var virgin = true;

	      var lenfix, distfix;


	      exports.inflateReset = inflateReset;
	      exports.inflateReset2 = inflateReset2;
	      exports.inflateResetKeep = inflateResetKeep;
	      exports.inflateInit = inflateInit;
	      exports.inflateInit2 = inflateInit2;
	      exports.inflate = inflate;
	      exports.inflateEnd = inflateEnd;
	      exports.inflateGetHeader = inflateGetHeader;
	      exports.inflateInfo = "pako inflate (from Nodeca project)";

	      /* Not implemented
	      exports.inflateCopy = inflateCopy;
	      exports.inflateGetDictionary = inflateGetDictionary;
	      exports.inflateMark = inflateMark;
	      exports.inflatePrime = inflatePrime;
	      exports.inflateSetDictionary = inflateSetDictionary;
	      exports.inflateSync = inflateSync;
	      exports.inflateSyncPoint = inflateSyncPoint;
	      exports.inflateUndermine = inflateUndermine;
	      */

	      /***/
	    },
	    /* 46 */
	    /***/function (module, exports, __webpack_require__) {
	      module.exports = {

	        /* Allowed flush values; see deflate() and inflate() below for details */
	        Z_NO_FLUSH: 0,
	        Z_PARTIAL_FLUSH: 1,
	        Z_SYNC_FLUSH: 2,
	        Z_FULL_FLUSH: 3,
	        Z_FINISH: 4,
	        Z_BLOCK: 5,
	        Z_TREES: 6,

	        /* Return codes for the compression/decompression functions. Negative values
	        * are errors, positive values are used for special but normal events.
	        */
	        Z_OK: 0,
	        Z_STREAM_END: 1,
	        Z_NEED_DICT: 2,
	        Z_ERRNO: -1,
	        Z_STREAM_ERROR: -2,
	        Z_DATA_ERROR: -3,
	        //Z_MEM_ERROR:     -4,
	        Z_BUF_ERROR: -5,
	        //Z_VERSION_ERROR: -6,

	        /* compression levels */
	        Z_NO_COMPRESSION: 0,
	        Z_BEST_SPEED: 1,
	        Z_BEST_COMPRESSION: 9,
	        Z_DEFAULT_COMPRESSION: -1,


	        Z_FILTERED: 1,
	        Z_HUFFMAN_ONLY: 2,
	        Z_RLE: 3,
	        Z_FIXED: 4,
	        Z_DEFAULT_STRATEGY: 0,

	        /* Possible values of the data_type field (though see inflate()) */
	        Z_BINARY: 0,
	        Z_TEXT: 1,
	        //Z_ASCII:                1, // = Z_TEXT (deprecated)
	        Z_UNKNOWN: 2,

	        /* The deflate compression method */
	        Z_DEFLATED: 8
	        //Z_NULL:                 null // Use -1 or null inline, depending on var type
	      };

	      /***/
	    },
	    /* 47 */
	    /***/function (module, exports, __webpack_require__) {},
	    /* 48 */
	    /***/function (module, exports, __webpack_require__) {
	      module.exports = Array.isArray || function (arr) {
	        return Object.prototype.toString.call(arr) == "[object Array]";
	      };


	      /***/
	    },
	    /* 49 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";


	      var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined";


	      exports.assign = function (obj /*from1, from2, from3, ...*/) {
	        var sources = Array.prototype.slice.call(arguments, 1);
	        while (sources.length) {
	          var source = sources.shift();
	          if (!source) {
	            continue;
	          }

	          if (typeof source !== "object") {
	            throw new TypeError(source + "must be non-object");
	          }

	          for (var p in source) {
	            if (source.hasOwnProperty(p)) {
	              obj[p] = source[p];
	            }
	          }
	        }

	        return obj;
	      };


	      // reduce buffer size, avoiding mem copy
	      exports.shrinkBuf = function (buf, size) {
	        if (buf.length === size) {
	          return buf;
	        }
	        if (buf.subarray) {
	          return buf.subarray(0, size);
	        }
	        buf.length = size;
	        return buf;
	      };


	      var fnTyped = {
	        arraySet: function (dest, src, src_offs, len, dest_offs) {
	          if (src.subarray && dest.subarray) {
	            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	            return;
	          }
	          // Fallback to ordinary array
	          for (var i = 0; i < len; i++) {
	            dest[dest_offs + i] = src[src_offs + i];
	          }
	        },
	        // Join array of chunks to single array.
	        flattenChunks: function (chunks) {
	          var i, l, len, pos, chunk, result;

	          // calculate data length
	          len = 0;
	          for (i = 0, l = chunks.length; i < l; i++) {
	            len += chunks[i].length;
	          }

	          // join chunks
	          result = new Uint8Array(len);
	          pos = 0;
	          for (i = 0, l = chunks.length; i < l; i++) {
	            chunk = chunks[i];
	            result.set(chunk, pos);
	            pos += chunk.length;
	          }

	          return result;
	        }
	      };

	      var fnUntyped = {
	        arraySet: function (dest, src, src_offs, len, dest_offs) {
	          for (var i = 0; i < len; i++) {
	            dest[dest_offs + i] = src[src_offs + i];
	          }
	        },
	        // Join array of chunks to single array.
	        flattenChunks: function (chunks) {
	          return [].concat.apply([], chunks);
	        }
	      };


	      // Enable/Disable typed arrays use, for testing
	      //
	      exports.setTyped = function (on) {
	        if (on) {
	          exports.Buf8 = Uint8Array;
	          exports.Buf16 = Uint16Array;
	          exports.Buf32 = Int32Array;
	          exports.assign(exports, fnTyped);
	        } else {
	          exports.Buf8 = Array;
	          exports.Buf16 = Array;
	          exports.Buf32 = Array;
	          exports.assign(exports, fnUntyped);
	        }
	      };

	      exports.setTyped(TYPED_OK);

	      /***/
	    },
	    /* 50 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";


	      /*============================================================================*/


	      var zero = function (buf) {
	        var len = buf.length;while (--len >= 0) {
	          buf[len] = 0;
	        }
	      };

	      var d_code = function (dist) {
	        return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	      };




	      /* ===========================================================================
	       * Output a short LSB first on the stream.
	       * IN assertion: there is enough room in pendingBuf.
	       */
	      var put_short = function (s, w) {
	        //    put_byte(s, (uch)((w) & 0xff));
	        //    put_byte(s, (uch)((ush)(w) >> 8));
	        s.pending_buf[s.pending++] = w & 255;
	        s.pending_buf[s.pending++] = w >>> 8 & 255;
	      };




	      /* ===========================================================================
	       * Send a value on a given number of bits.
	       * IN assertion: length <= 16 and value fits in length bits.
	       */
	      var send_bits = function (s, value, length) {
	        if (s.bi_valid > Buf_size - length) {
	          s.bi_buf |= value << s.bi_valid & 65535;
	          put_short(s, s.bi_buf);
	          s.bi_buf = value >> Buf_size - s.bi_valid;
	          s.bi_valid += length - Buf_size;
	        } else {
	          s.bi_buf |= value << s.bi_valid & 65535;
	          s.bi_valid += length;
	        }
	      };

	      var send_code = function (s, c, tree) {
	        send_bits(s, tree[c * 2], /*.Code*/tree[c * 2 + 1] /*.Len*/);
	      };




	      /* ===========================================================================
	       * Reverse the first len bits of a code, using straightforward code (a faster
	       * method would use a table)
	       * IN assertion: 1 <= len <= 15
	       */
	      var bi_reverse = function (code, len) {
	        var res = 0;
	        do {
	          res |= code & 1;
	          code >>>= 1;
	          res <<= 1;
	        } while (--len > 0);
	        return res >>> 1;
	      };




	      /* ===========================================================================
	       * Flush the bit buffer, keeping at most 7 bits in it.
	       */
	      var bi_flush = function (s) {
	        if (s.bi_valid === 16) {
	          put_short(s, s.bi_buf);
	          s.bi_buf = 0;
	          s.bi_valid = 0;
	        } else if (s.bi_valid >= 8) {
	          s.pending_buf[s.pending++] = s.bi_buf & 255;
	          s.bi_buf >>= 8;
	          s.bi_valid -= 8;
	        }
	      };




	      /* ===========================================================================
	       * Compute the optimal bit lengths for a tree and update the total bit length
	       * for the current block.
	       * IN assertion: the fields freq and dad are set, heap[heap_max] and
	       *    above are the tree nodes sorted by increasing frequency.
	       * OUT assertions: the field len is set to the optimal bit length, the
	       *     array bl_count contains the frequencies for each bit length.
	       *     The length opt_len is updated; static_len is also updated if stree is
	       *     not null.
	       */
	      var gen_bitlen = function (s, desc)
	      //    deflate_state *s;
	      //    tree_desc *desc;    /* the tree descriptor */
	      {
	        var tree = desc.dyn_tree;
	        var max_code = desc.max_code;
	        var stree = desc.stat_desc.static_tree;
	        var has_stree = desc.stat_desc.has_stree;
	        var extra = desc.stat_desc.extra_bits;
	        var base = desc.stat_desc.extra_base;
	        var max_length = desc.stat_desc.max_length;
	        var h; /* heap index */
	        var n, m; /* iterate over the tree elements */
	        var bits; /* bit length */
	        var xbits; /* extra bits */
	        var f; /* frequency */
	        var overflow = 0; /* number of elements with bit length too large */

	        for (bits = 0; bits <= MAX_BITS; bits++) {
	          s.bl_count[bits] = 0;
	        }

	        /* In a first pass, compute the optimal bit lengths (which may
	         * overflow in the case of the bit length tree).
	         */
	        tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

	        for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	          n = s.heap[h];
	          bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
	          if (bits > max_length) {
	            bits = max_length;
	            overflow++;
	          }
	          tree[n * 2 + 1] /*.Len*/ = bits;
	          /* We overwrite tree[n].Dad which is no longer needed */

	          if (n > max_code) {
	            continue;
	          } /* not a leaf node */

	          s.bl_count[bits]++;
	          xbits = 0;
	          if (n >= base) {
	            xbits = extra[n - base];
	          }
	          f = tree[n * 2] /*.Freq*/;
	          s.opt_len += f * (bits + xbits);
	          if (has_stree) {
	            s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
	          }
	        }
	        if (overflow === 0) {
	          return;
	        }

	        // Trace((stderr,"\nbit length overflow\n"));
	        /* This happens for example on obj2 and pic of the Calgary corpus */

	        /* Find the first bit length which could increase: */
	        do {
	          bits = max_length - 1;
	          while (s.bl_count[bits] === 0) {
	            bits--;
	          }
	          s.bl_count[bits]--; /* move one leaf down the tree */
	          s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	          s.bl_count[max_length]--;
	          /* The brother of the overflow item also moves one step up,
	           * but this does not affect bl_count[max_length]
	           */
	          overflow -= 2;
	        } while (overflow > 0);

	        /* Now recompute all bit lengths, scanning in increasing frequency.
	         * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	         * lengths instead of fixing only the wrong ones. This idea is taken
	         * from 'ar' written by Haruhiko Okumura.)
	         */
	        for (bits = max_length; bits !== 0; bits--) {
	          n = s.bl_count[bits];
	          while (n !== 0) {
	            m = s.heap[--h];
	            if (m > max_code) {
	              continue;
	            }
	            if (tree[m * 2 + 1] /*.Len*/ !== bits) {
	              // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	              s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/) * tree[m * 2] /*.Freq*/;
	              tree[m * 2 + 1] /*.Len*/ = bits;
	            }
	            n--;
	          }
	        }
	      };




	      /* ===========================================================================
	       * Generate the codes for a given tree and bit counts (which need not be
	       * optimal).
	       * IN assertion: the array bl_count contains the bit length statistics for
	       * the given tree and the field len is set for all tree elements.
	       * OUT assertion: the field code is set for all tree elements of non
	       *     zero code length.
	       */
	      var gen_codes = function (tree, max_code, bl_count)
	      //    ct_data *tree;             /* the tree to decorate */
	      //    int max_code;              /* largest code with non zero frequency */
	      //    ushf *bl_count;            /* number of codes at each bit length */
	      {
	        var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	        var code = 0; /* running code value */
	        var bits; /* bit index */
	        var n; /* code index */

	        /* The distribution counts are first used to generate the code values
	         * without bit reversal.
	         */
	        for (bits = 1; bits <= MAX_BITS; bits++) {
	          next_code[bits] = code = code + bl_count[bits - 1] << 1;
	        }
	        /* Check that the bit counts in bl_count are consistent. The last code
	         * must be all ones.
	         */
	        //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	        //        "inconsistent bit counts");
	        //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	        for (n = 0; n <= max_code; n++) {
	          var len = tree[n * 2 + 1] /*.Len*/;
	          if (len === 0) {
	            continue;
	          }
	          /* Now reverse the bits */
	          tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

	          //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	          //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	        }
	      };




	      /* ===========================================================================
	       * Initialize the various 'constant' tables.
	       */
	      var tr_static_init = function () {
	        var n; /* iterates over tree elements */
	        var bits; /* bit counter */
	        var length; /* length value */
	        var code; /* code value */
	        var dist; /* distance index */
	        var bl_count = new Array(MAX_BITS + 1);
	        /* number of codes at each bit length for an optimal tree */

	        // do check in _tr_init()
	        //if (static_init_done) return;

	        /* For some embedded targets, global variables are not initialized: */
	        /*#ifdef NO_INIT_GLOBAL_POINTERS
	          static_l_desc.static_tree = static_ltree;
	          static_l_desc.extra_bits = extra_lbits;
	          static_d_desc.static_tree = static_dtree;
	          static_d_desc.extra_bits = extra_dbits;
	          static_bl_desc.extra_bits = extra_blbits;
	        #endif*/

	        /* Initialize the mapping length (0..255) -> length code (0..28) */
	        length = 0;
	        for (code = 0; code < LENGTH_CODES - 1; code++) {
	          base_length[code] = length;
	          for (n = 0; n < 1 << extra_lbits[code]; n++) {
	            _length_code[length++] = code;
	          }
	        }
	        //Assert (length == 256, "tr_static_init: length != 256");
	        /* Note that the length 255 (match length 258) can be represented
	         * in two different ways: code 284 + 5 bits or code 285, so we
	         * overwrite length_code[255] to use the best encoding:
	         */
	        _length_code[length - 1] = code;

	        /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	        dist = 0;
	        for (code = 0; code < 16; code++) {
	          base_dist[code] = dist;
	          for (n = 0; n < 1 << extra_dbits[code]; n++) {
	            _dist_code[dist++] = code;
	          }
	        }
	        //Assert (dist == 256, "tr_static_init: dist != 256");
	        dist >>= 7; /* from now on, all distances are divided by 128 */
	        for (; code < D_CODES; code++) {
	          base_dist[code] = dist << 7;
	          for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
	            _dist_code[256 + dist++] = code;
	          }
	        }
	        //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	        /* Construct the codes of the static literal tree */
	        for (bits = 0; bits <= MAX_BITS; bits++) {
	          bl_count[bits] = 0;
	        }

	        n = 0;
	        while (n <= 143) {
	          static_ltree[n * 2 + 1] /*.Len*/ = 8;
	          n++;
	          bl_count[8]++;
	        }
	        while (n <= 255) {
	          static_ltree[n * 2 + 1] /*.Len*/ = 9;
	          n++;
	          bl_count[9]++;
	        }
	        while (n <= 279) {
	          static_ltree[n * 2 + 1] /*.Len*/ = 7;
	          n++;
	          bl_count[7]++;
	        }
	        while (n <= 287) {
	          static_ltree[n * 2 + 1] /*.Len*/ = 8;
	          n++;
	          bl_count[8]++;
	        }
	        /* Codes 286 and 287 do not exist, but we must include them in the
	         * tree construction to get a canonical Huffman tree (longest code
	         * all ones)
	         */
	        gen_codes(static_ltree, L_CODES + 1, bl_count);

	        /* The static distance tree is trivial: */
	        for (n = 0; n < D_CODES; n++) {
	          static_dtree[n * 2 + 1] /*.Len*/ = 5;
	          static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
	        }

	        // Now data ready and we can init static trees
	        static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	        static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
	        static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);

	        //static_init_done = true;
	      };




	      /* ===========================================================================
	       * Initialize a new block.
	       */
	      var init_block = function (s) {
	        var n; /* iterates over tree elements */

	        /* Initialize the trees. */
	        for (n = 0; n < L_CODES; n++) {
	          s.dyn_ltree[n * 2] /*.Freq*/ = 0;
	        }
	        for (n = 0; n < D_CODES; n++) {
	          s.dyn_dtree[n * 2] /*.Freq*/ = 0;
	        }
	        for (n = 0; n < BL_CODES; n++) {
	          s.bl_tree[n * 2] /*.Freq*/ = 0;
	        }

	        s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
	        s.opt_len = s.static_len = 0;
	        s.last_lit = s.matches = 0;
	      };




	      /* ===========================================================================
	       * Flush the bit buffer and align the output on a byte boundary
	       */
	      var bi_windup = function (s) {
	        if (s.bi_valid > 8) {
	          put_short(s, s.bi_buf);
	        } else if (s.bi_valid > 0) {
	          //put_byte(s, (Byte)s->bi_buf);
	          s.pending_buf[s.pending++] = s.bi_buf;
	        }
	        s.bi_buf = 0;
	        s.bi_valid = 0;
	      };

	      /* ===========================================================================
	       * Copy a stored block, storing first the length and its
	       * one's complement if requested.
	       */
	      var copy_block = function (s, buf, len, header)
	      //DeflateState *s;
	      //charf    *buf;    /* the input data */
	      //unsigned len;     /* its length */
	      //int      header;  /* true if block header must be written */
	      {
	        bi_windup(s); /* align on byte boundary */

	        if (header) {
	          put_short(s, len);
	          put_short(s, ~len);
	        }
	        //  while (len--) {
	        //    put_byte(s, *buf++);
	        //  }
	        utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	        s.pending += len;
	      };

	      /* ===========================================================================
	       * Compares to subtrees, using the tree depth as tie breaker when
	       * the subtrees have equal frequency. This minimizes the worst case length.
	       */
	      var smaller = function (tree, n, m, depth) {
	        var _n2 = n * 2;
	        var _m2 = m * 2;
	        return tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ || tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m];
	      };

	      /* ===========================================================================
	       * Restore the heap property by moving down the tree starting at node k,
	       * exchanging a node with the smallest of its two sons if necessary, stopping
	       * when the heap property is re-established (each father smaller than its
	       * two sons).
	       */
	      var pqdownheap = function (s, tree, k)
	      //    deflate_state *s;
	      //    ct_data *tree;  /* the tree to restore */
	      //    int k;               /* node to move down */
	      {
	        var v = s.heap[k];
	        var j = k << 1; /* left son of k */
	        while (j <= s.heap_len) {
	          /* Set j to the smallest of the two sons: */
	          if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	            j++;
	          }
	          /* Exit if v is smaller than both sons */
	          if (smaller(tree, v, s.heap[j], s.depth)) {
	            break;
	          }

	          /* Exchange v with the smallest son */
	          s.heap[k] = s.heap[j];
	          k = j;

	          /* And continue down the tree, setting j to the left son of k */
	          j <<= 1;
	        }
	        s.heap[k] = v;
	      };




	      // inlined manually
	      // var SMALLEST = 1;

	      /* ===========================================================================
	       * Send the block data compressed using the given Huffman trees
	       */
	      var compress_block = function (s, ltree, dtree)
	      //    deflate_state *s;
	      //    const ct_data *ltree; /* literal tree */
	      //    const ct_data *dtree; /* distance tree */
	      {
	        var dist; /* distance of matched string */
	        var lc; /* match length or unmatched char (if dist == 0) */
	        var lx = 0; /* running index in l_buf */
	        var code; /* the code to send */
	        var extra; /* number of extra bits to send */

	        if (s.last_lit !== 0) {
	          do {
	            dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
	            lc = s.pending_buf[s.l_buf + lx];
	            lx++;

	            if (dist === 0) {
	              send_code(s, lc, ltree); /* send a literal byte */
	              //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	            } else {
	              /* Here, lc is the match length - MIN_MATCH */
	              code = _length_code[lc];
	              send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	              extra = extra_lbits[code];
	              if (extra !== 0) {
	                lc -= base_length[code];
	                send_bits(s, lc, extra); /* send the extra length bits */
	              }
	              dist--; /* dist is now the match distance - 1 */
	              code = d_code(dist);
	              //Assert (code < D_CODES, "bad d_code");

	              send_code(s, code, dtree); /* send the distance code */
	              extra = extra_dbits[code];
	              if (extra !== 0) {
	                dist -= base_dist[code];
	                send_bits(s, dist, extra); /* send the extra distance bits */
	              }
	            } /* literal or match pair ? */

	            /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	            //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	            //       "pendingBuf overflow");
	          } while (lx < s.last_lit);
	        }

	        send_code(s, END_BLOCK, ltree);
	      };




	      /* ===========================================================================
	       * Construct one Huffman tree and assigns the code bit strings and lengths.
	       * Update the total bit length for the current block.
	       * IN assertion: the field freq is set for all tree elements.
	       * OUT assertions: the fields len and code are set to the optimal bit length
	       *     and corresponding code. The length opt_len is updated; static_len is
	       *     also updated if stree is not null. The field max_code is set.
	       */
	      var build_tree = function (s, desc)
	      //    deflate_state *s;
	      //    tree_desc *desc; /* the tree descriptor */
	      {
	        var tree = desc.dyn_tree;
	        var stree = desc.stat_desc.static_tree;
	        var has_stree = desc.stat_desc.has_stree;
	        var elems = desc.stat_desc.elems;
	        var n, m; /* iterate over heap elements */
	        var max_code = -1; /* largest code with non zero frequency */
	        var node; /* new node being created */

	        /* Construct the initial heap, with least frequent element in
	         * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	         * heap[0] is not used.
	         */
	        s.heap_len = 0;
	        s.heap_max = HEAP_SIZE;

	        for (n = 0; n < elems; n++) {
	          if (tree[n * 2] /*.Freq*/ !== 0) {
	            s.heap[++s.heap_len] = max_code = n;
	            s.depth[n] = 0;
	          } else {
	            tree[n * 2 + 1] /*.Len*/ = 0;
	          }
	        }

	        /* The pkzip format requires that at least one distance code exists,
	         * and that at least one bit should be sent even if there is only one
	         * possible code. So to avoid special checks later on we force at least
	         * two codes of non zero frequency.
	         */
	        while (s.heap_len < 2) {
	          node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
	          tree[node * 2] /*.Freq*/ = 1;
	          s.depth[node] = 0;
	          s.opt_len--;

	          if (has_stree) {
	            s.static_len -= stree[node * 2 + 1] /*.Len*/;
	          }
	          /* node is 0 or 1 so it does not have extra bits */
	        }
	        desc.max_code = max_code;

	        /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	         * establish sub-heaps of increasing lengths:
	         */
	        for (n = s.heap_len >> 1 /*int /2*/; n >= 1; n--) {
	          pqdownheap(s, tree, n);
	        }

	        /* Construct the Huffman tree by repeatedly combining the least two
	         * frequent nodes.
	         */
	        node = elems; /* next internal node of the tree */
	        do {
	          //pqremove(s, tree, n);  /* n = node of least frequency */
	          /*** pqremove ***/
	          n = s.heap[1 /*SMALLEST*/];
	          s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];
	          pqdownheap(s, tree, 1 /*SMALLEST*/);
	          /***/

	          m = s.heap[1 /*SMALLEST*/]; /* m = node of next least frequency */

	          s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	          s.heap[--s.heap_max] = m;

	          /* Create a new node father of n and m */
	          tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;
	          s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	          tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

	          /* and insert the new node in the heap */
	          s.heap[1 /*SMALLEST*/] = node++;
	          pqdownheap(s, tree, 1 /*SMALLEST*/);
	        } while (s.heap_len >= 2);

	        s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/];

	        /* At this point, the fields freq and dad are set. We can now
	         * generate the bit lengths.
	         */
	        gen_bitlen(s, desc);

	        /* The field len is now set, we can generate the bit codes */
	        gen_codes(tree, max_code, s.bl_count);
	      };




	      /* ===========================================================================
	       * Scan a literal or distance tree to determine the frequencies of the codes
	       * in the bit length tree.
	       */
	      var scan_tree = function (s, tree, max_code)
	      //    deflate_state *s;
	      //    ct_data *tree;   /* the tree to be scanned */
	      //    int max_code;    /* and its largest code of non zero frequency */
	      {
	        var n; /* iterates over all tree elements */
	        var prevlen = -1; /* last emitted length */
	        var curlen; /* length of current code */

	        var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */

	        var count = 0; /* repeat count of the current code */
	        var max_count = 7; /* max repeat count */
	        var min_count = 4; /* min repeat count */

	        if (nextlen === 0) {
	          max_count = 138;
	          min_count = 3;
	        }
	        tree[(max_code + 1) * 2 + 1] /*.Len*/ = 65535; /* guard */

	        for (n = 0; n <= max_code; n++) {
	          curlen = nextlen;
	          nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

	          if (++count < max_count && curlen === nextlen) {
	            continue;
	          } else if (count < min_count) {
	            s.bl_tree[curlen * 2] /*.Freq*/ += count;
	          } else if (curlen !== 0) {
	            if (curlen !== prevlen) {
	              s.bl_tree[curlen * 2] /*.Freq*/++;
	            }
	            s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
	          } else if (count <= 10) {
	            s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
	          } else {
	            s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
	          }

	          count = 0;
	          prevlen = curlen;

	          if (nextlen === 0) {
	            max_count = 138;
	            min_count = 3;
	          } else if (curlen === nextlen) {
	            max_count = 6;
	            min_count = 3;
	          } else {
	            max_count = 7;
	            min_count = 4;
	          }
	        }
	      };




	      /* ===========================================================================
	       * Send a literal or distance tree in compressed form, using the codes in
	       * bl_tree.
	       */
	      var send_tree = function (s, tree, max_code)
	      //    deflate_state *s;
	      //    ct_data *tree; /* the tree to be scanned */
	      //    int max_code;       /* and its largest code of non zero frequency */
	      {
	        var n; /* iterates over all tree elements */
	        var prevlen = -1; /* last emitted length */
	        var curlen; /* length of current code */

	        var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */

	        var count = 0; /* repeat count of the current code */
	        var max_count = 7; /* max repeat count */
	        var min_count = 4; /* min repeat count */

	        /* tree[max_code+1].Len = -1; */ /* guard already set */
	        if (nextlen === 0) {
	          max_count = 138;
	          min_count = 3;
	        }

	        for (n = 0; n <= max_code; n++) {
	          curlen = nextlen;
	          nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

	          if (++count < max_count && curlen === nextlen) {
	            continue;
	          } else if (count < min_count) {
	            do {
	              send_code(s, curlen, s.bl_tree);
	            } while (--count !== 0);
	          } else if (curlen !== 0) {
	            if (curlen !== prevlen) {
	              send_code(s, curlen, s.bl_tree);
	              count--;
	            }
	            //Assert(count >= 3 && count <= 6, " 3_6?");
	            send_code(s, REP_3_6, s.bl_tree);
	            send_bits(s, count - 3, 2);
	          } else if (count <= 10) {
	            send_code(s, REPZ_3_10, s.bl_tree);
	            send_bits(s, count - 3, 3);
	          } else {
	            send_code(s, REPZ_11_138, s.bl_tree);
	            send_bits(s, count - 11, 7);
	          }

	          count = 0;
	          prevlen = curlen;
	          if (nextlen === 0) {
	            max_count = 138;
	            min_count = 3;
	          } else if (curlen === nextlen) {
	            max_count = 6;
	            min_count = 3;
	          } else {
	            max_count = 7;
	            min_count = 4;
	          }
	        }
	      };




	      /* ===========================================================================
	       * Construct the Huffman tree for the bit lengths and return the index in
	       * bl_order of the last bit length code to send.
	       */
	      var build_bl_tree = function (s) {
	        var max_blindex; /* index of last bit length code of non zero freq */

	        /* Determine the bit length frequencies for literal and distance trees */
	        scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	        scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	        /* Build the bit length tree: */
	        build_tree(s, s.bl_desc);
	        /* opt_len now includes the length of the tree representations, except
	         * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	         */

	        /* Determine the number of bit length codes to send. The pkzip format
	         * requires that at least 4 bit length codes be sent. (appnote.txt says
	         * 3 but the actual value used is 4.)
	         */
	        for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	          if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
	            break;
	          }
	        }
	        /* Update opt_len to include the bit length tree and counts */
	        s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	        //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	        //        s->opt_len, s->static_len));

	        return max_blindex;
	      };




	      /* ===========================================================================
	       * Send the header for a block using dynamic Huffman trees: the counts, the
	       * lengths of the bit length codes, the literal tree and the distance tree.
	       * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	       */
	      var send_all_trees = function (s, lcodes, dcodes, blcodes)
	      //    deflate_state *s;
	      //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	      {
	        var rank; /* index in bl_order */

	        //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	        //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	        //        "too many codes");
	        //Tracev((stderr, "\nbl counts: "));
	        send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	        send_bits(s, dcodes - 1, 5);
	        send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
	        for (rank = 0; rank < blcodes; rank++) {
	          //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	          send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], /*.Len*/3);
	        }
	        //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	        send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	        //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	        send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	        //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	      };




	      /* ===========================================================================
	       * Check if the data type is TEXT or BINARY, using the following algorithm:
	       * - TEXT if the two conditions below are satisfied:
	       *    a) There are no non-portable control characters belonging to the
	       *       "black list" (0..6, 14..25, 28..31).
	       *    b) There is at least one printable character belonging to the
	       *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	       * - BINARY otherwise.
	       * - The following partially-portable control characters form a
	       *   "gray list" that is ignored in this detection algorithm:
	       *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	       * IN assertion: the fields Freq of dyn_ltree are set.
	       */
	      var detect_data_type = function (s) {
	        /* black_mask is the bit mask of black-listed bytes
	         * set bits 0..6, 14..25, and 28..31
	         * 0xf3ffc07f = binary 11110011111111111100000001111111
	         */
	        var black_mask = 4093624447;
	        var n;

	        /* Check for non-textual ("black-listed") bytes. */
	        for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	          if (black_mask & 1 && s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
	            return Z_BINARY;
	          }
	        }

	        /* Check for textual ("white-listed") bytes. */
	        if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
	          return Z_TEXT;
	        }
	        for (n = 32; n < LITERALS; n++) {
	          if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
	            return Z_TEXT;
	          }
	        }

	        /* There are no "black-listed" or "white-listed" bytes:
	         * this stream either is empty or has tolerated ("gray-listed") bytes only.
	         */
	        return Z_BINARY;
	      };

	      /* ===========================================================================
	       * Initialize the tree data structures for a new zlib stream.
	       */
	      var _tr_init = function (s) {
	        if (!static_init_done) {
	          tr_static_init();
	          static_init_done = true;
	        }

	        s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
	        s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
	        s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	        s.bi_buf = 0;
	        s.bi_valid = 0;

	        /* Initialize the first block of the first file: */
	        init_block(s);
	      };




	      /* ===========================================================================
	       * Send a stored block
	       */
	      var _tr_stored_block = function (s, buf, stored_len, last)
	      //DeflateState *s;
	      //charf *buf;       /* input block */
	      //ulg stored_len;   /* length of input block */
	      //int last;         /* one if this is the last block for a file */
	      {
	        send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
	        copy_block(s, buf, stored_len, true); /* with header */
	      };




	      /* ===========================================================================
	       * Send one empty static block to give enough lookahead for inflate.
	       * This takes 10 bits, of which 7 may remain in the bit buffer.
	       */
	      var _tr_align = function (s) {
	        send_bits(s, STATIC_TREES << 1, 3);
	        send_code(s, END_BLOCK, static_ltree);
	        bi_flush(s);
	      };




	      /* ===========================================================================
	       * Determine the best encoding for the current block: dynamic trees, static
	       * trees or store, and output the encoded block to the zip file.
	       */
	      var _tr_flush_block = function (s, buf, stored_len, last)
	      //DeflateState *s;
	      //charf *buf;       /* input block, or NULL if too old */
	      //ulg stored_len;   /* length of input block */
	      //int last;         /* one if this is the last block for a file */
	      {
	        var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
	        var max_blindex = 0; /* index of last bit length code of non zero freq */

	        /* Build the Huffman trees unless a stored block is forced */
	        if (s.level > 0) {
	          /* Check if the file is binary or text */
	          if (s.strm.data_type === Z_UNKNOWN) {
	            s.strm.data_type = detect_data_type(s);
	          }

	          /* Construct the literal and distance trees */
	          build_tree(s, s.l_desc);
	          // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	          //        s->static_len));

	          build_tree(s, s.d_desc);
	          // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	          //        s->static_len));
	          /* At this point, opt_len and static_len are the total bit lengths of
	           * the compressed block data, excluding the tree representations.
	           */

	          /* Build the bit length tree for the above two trees, and get the index
	           * in bl_order of the last bit length code to send.
	           */
	          max_blindex = build_bl_tree(s);

	          /* Determine the best encoding. Compute the block lengths in bytes. */
	          opt_lenb = s.opt_len + 3 + 7 >>> 3;
	          static_lenb = s.static_len + 3 + 7 >>> 3;

	          // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	          //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	          //        s->last_lit));

	          if (static_lenb <= opt_lenb) {
	            opt_lenb = static_lenb;
	          }
	        } else {
	          // Assert(buf != (char*)0, "lost buf");
	          opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	        }

	        if (stored_len + 4 <= opt_lenb && buf !== -1) {
	          /* 4: two words for the lengths */

	          /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	           * Otherwise we can't have processed more than WSIZE input bytes since
	           * the last block flush, because compression would have been
	           * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	           * transform a block into a stored block.
	           */
	          _tr_stored_block(s, buf, stored_len, last);
	        } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
	          send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	          compress_block(s, static_ltree, static_dtree);
	        } else {
	          send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	          send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	          compress_block(s, s.dyn_ltree, s.dyn_dtree);
	        }
	        // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	        /* The above check is made mod 2^32, for files larger than 512 MB
	         * and uLong implemented on 32 bits.
	         */
	        init_block(s);

	        if (last) {
	          bi_windup(s);
	        }
	        // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	        //       s->compressed_len-7*last));
	      };

	      /* ===========================================================================
	       * Save the match info and tally the frequency counts. Return true if
	       * the current block must be flushed.
	       */
	      var _tr_tally = function (s, dist, lc)
	      //    deflate_state *s;
	      //    unsigned dist;  /* distance of matched string */
	      //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	      {
	        //var out_length, in_length, dcode;

	        s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255;
	        s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255;

	        s.pending_buf[s.l_buf + s.last_lit] = lc & 255;
	        s.last_lit++;

	        if (dist === 0) {
	          /* lc is the unmatched char */
	          s.dyn_ltree[lc * 2] /*.Freq*/++;
	        } else {
	          s.matches++;
	          /* Here, lc is the match length - MIN_MATCH */
	          dist--; /* dist = match distance - 1 */
	          //Assert((ush)dist < (ush)MAX_DIST(s) &&
	          //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	          //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	          s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;
	          s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
	        }

	        // (!) This block is disabled in zlib defailts,
	        // don't enable it for binary compatibility

	        //#ifdef TRUNCATE_BLOCK
	        //  /* Try to guess if it is profitable to stop the current block here */
	        //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	        //    /* Compute an upper bound for the compressed length */
	        //    out_length = s.last_lit*8;
	        //    in_length = s.strstart - s.block_start;
	        //
	        //    for (dcode = 0; dcode < D_CODES; dcode++) {
	        //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	        //    }
	        //    out_length >>>= 3;
	        //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	        //    //       s->last_lit, in_length, out_length,
	        //    //       100L - out_length*100L/in_length));
	        //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	        //      return true;
	        //    }
	        //  }
	        //#endif

	        return s.last_lit === s.lit_bufsize - 1;
	        /* We avoid equality with lit_bufsize because of wraparound at 64K
	         * on 16 bit machines and because stored blocks are restricted to
	         * 64K-1 bytes.
	         */
	      };

	      var utils = __webpack_require__(49);

	      /* Public constants ==========================================================*/
	      /* ===========================================================================*/


	      //var Z_FILTERED          = 1;
	      //var Z_HUFFMAN_ONLY      = 2;
	      //var Z_RLE               = 3;
	      var Z_FIXED = 4;
	      //var Z_DEFAULT_STRATEGY  = 0;

	      /* Possible values of the data_type field (though see inflate()) */
	      var Z_BINARY = 0;
	      var Z_TEXT = 1;
	      //var Z_ASCII             = 1; // = Z_TEXT
	      var Z_UNKNOWN = 2;

	      // From zutil.h

	      var STORED_BLOCK = 0;
	      var STATIC_TREES = 1;
	      var DYN_TREES = 2;
	      /* The three kinds of block type */

	      var MIN_MATCH = 3;
	      var MAX_MATCH = 258;
	      /* The minimum and maximum match lengths */

	      // From deflate.h
	      /* ===========================================================================
	       * Internal compression state.
	       */

	      var LENGTH_CODES = 29;
	      /* number of length codes, not counting the special END_BLOCK code */

	      var LITERALS = 256;
	      /* number of literal bytes 0..255 */

	      var L_CODES = LITERALS + 1 + LENGTH_CODES;
	      /* number of Literal or Length codes, including the END_BLOCK code */

	      var D_CODES = 30;
	      /* number of distance codes */

	      var BL_CODES = 19;
	      /* number of codes used to transfer the bit lengths */

	      var HEAP_SIZE = 2 * L_CODES + 1;
	      /* maximum heap size */

	      var MAX_BITS = 15;
	      /* All codes must not exceed MAX_BITS bits */

	      var Buf_size = 16;
	      /* size of bit buffer in bi_buf */


	      /* ===========================================================================
	       * Constants
	       */

	      var MAX_BL_BITS = 7;
	      /* Bit length codes must not exceed MAX_BL_BITS bits */

	      var END_BLOCK = 256;
	      /* end of block literal code */

	      var REP_3_6 = 16;
	      /* repeat previous bit length 3-6 times (2 bits of repeat count) */

	      var REPZ_3_10 = 17;
	      /* repeat a zero length 3-10 times  (3 bits of repeat count) */

	      var REPZ_11_138 = 18;
	      /* repeat a zero length 11-138 times  (7 bits of repeat count) */

	      var extra_lbits = /* extra bits for each length code */
	      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

	      var extra_dbits = /* extra bits for each distance code */
	      [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

	      var extra_blbits = /* extra bits for each bit length code */
	      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

	      var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
	      /* The lengths of the bit length codes are sent in order of decreasing
	       * probability, to avoid transmitting the lengths for unused bit length codes.
	       */

	      /* ===========================================================================
	       * Local data. These are initialized only once.
	       */

	      // We pre-fill arrays with 0 to avoid uninitialized gaps

	      var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	      // !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	      var static_ltree = new Array((L_CODES + 2) * 2);
	      zero(static_ltree);
	      /* The static literal tree. Since the bit lengths are imposed, there is no
	       * need for the L_CODES extra codes used during heap construction. However
	       * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	       * below).
	       */

	      var static_dtree = new Array(D_CODES * 2);
	      zero(static_dtree);
	      /* The static distance tree. (Actually a trivial tree since all codes use
	       * 5 bits.)
	       */

	      var _dist_code = new Array(DIST_CODE_LEN);
	      zero(_dist_code);
	      /* Distance codes. The first 256 values correspond to the distances
	       * 3 .. 258, the last 256 values correspond to the top 8 bits of
	       * the 15 bit distances.
	       */

	      var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
	      zero(_length_code);
	      /* length code for each normalized match length (0 == MIN_MATCH) */

	      var base_length = new Array(LENGTH_CODES);
	      zero(base_length);
	      /* First normalized length for each code (0 = MIN_MATCH) */

	      var base_dist = new Array(D_CODES);
	      zero(base_dist);
	      /* First normalized distance for each code (0 = distance of 1) */


	      var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {
	        this.static_tree = static_tree; /* static tree or NULL */
	        this.extra_bits = extra_bits; /* extra bits for each code or NULL */
	        this.extra_base = extra_base; /* base index for extra_bits */
	        this.elems = elems; /* max number of elements in the tree */
	        this.max_length = max_length; /* max bit length for the codes */

	        // show if `static_tree` has data or dummy - needed for monomorphic objects
	        this.has_stree = static_tree && static_tree.length;
	      };


	      var static_l_desc;
	      var static_d_desc;
	      var static_bl_desc;


	      var TreeDesc = function (dyn_tree, stat_desc) {
	        this.dyn_tree = dyn_tree; /* the dynamic tree */
	        this.max_code = 0; /* largest code with non zero frequency */
	        this.stat_desc = stat_desc; /* the corresponding static tree */
	      };



	      var static_init_done = false;

	      exports._tr_init = _tr_init;
	      exports._tr_stored_block = _tr_stored_block;
	      exports._tr_flush_block = _tr_flush_block;
	      exports._tr_tally = _tr_tally;
	      exports._tr_align = _tr_align;

	      /***/
	    },
	    /* 51 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";

	      // Note: adler32 takes 12% for level 0 and 2% for level 6.
	      // It doesn't worth to make additional optimizationa as in original.
	      // Small size is preferable.

	      var adler32 = function (adler, buf, len, pos) {
	        var s1 = adler & 65535 | 0,
	            s2 = adler >>> 16 & 65535 | 0,
	            n = 0;

	        while (len !== 0) {
	          // Set limit ~ twice less than 5552, to keep
	          // s2 in 31-bits, because we force signed ints.
	          // in other case %= will fail.
	          n = len > 2000 ? 2000 : len;
	          len -= n;

	          do {
	            s1 = s1 + buf[pos++] | 0;
	            s2 = s2 + s1 | 0;
	          } while (--n);

	          s1 %= 65521;
	          s2 %= 65521;
	        }

	        return s1 | s2 << 16 | 0;
	      };




	      module.exports = adler32;

	      /***/
	    },
	    /* 52 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";

	      // Note: we can't get significant speed boost here.
	      // So write code to minimize size - no pregenerated tables
	      // and array tools dependencies.


	      // Use ordinary array, since untyped makes no boost here
	      var makeTable = function () {
	        var c,
	            table = [];

	        for (var n = 0; n < 256; n++) {
	          c = n;
	          for (var k = 0; k < 8; k++) {
	            c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
	          }
	          table[n] = c;
	        }

	        return table;
	      };

	      var crc32 = function (crc, buf, len, pos) {
	        var t = crcTable,
	            end = pos + len;

	        crc = crc ^ -1;

	        for (var i = pos; i < end; i++) {
	          crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
	        }

	        return crc ^ -1; // >>> 0;
	      };

	      // Create table on load. Just 255 signed longs. Not a problem.
	      var crcTable = makeTable();


	      module.exports = crc32;

	      /***/
	    },
	    /* 53 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";

	      // See state defs from inflate.js
	      var BAD = 30; /* got a data error -- remain here until reset */
	      var TYPE = 12; /* i: waiting for type bits, including last-flag bit */

	      /*
	         Decode literal, length, and distance codes and write out the resulting
	         literal and match bytes until either not enough input or output is
	         available, an end-of-block is encountered, or a data error is encountered.
	         When large enough input and output buffers are supplied to inflate(), for
	         example, a 16K input buffer and a 64K output buffer, more than 95% of the
	         inflate execution time is spent in this routine.
	      	   Entry assumptions:
	      	        state.mode === LEN
	              strm.avail_in >= 6
	              strm.avail_out >= 258
	              start >= strm.avail_out
	              state.bits < 8
	      	   On return, state.mode is one of:
	      	        LEN -- ran out of enough output space or enough available input
	              TYPE -- reached end of block code, inflate() to interpret next block
	              BAD -- error in block data
	      	   Notes:
	      	    - The maximum input bits used by a length/distance pair is 15 bits for the
	            length code, 5 bits for the length extra, 15 bits for the distance code,
	            and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	            Therefore if strm.avail_in >= 6, then there is enough input to avoid
	            checking for available input while decoding.
	      	    - The maximum bytes that a single length/distance pair can output is 258
	            bytes, which is the maximum length that can be coded.  inflate_fast()
	            requires strm.avail_out >= 258 for each loop to avoid checking for
	            output space.
	       */
	      module.exports = function inflate_fast(strm, start) {
	        var state;
	        var _in; /* local strm.input */
	        var last; /* have enough input while in < last */
	        var _out; /* local strm.output */
	        var beg; /* inflate()'s initial strm.output */
	        var end; /* while out < end, enough space available */
	        //#ifdef INFLATE_STRICT
	        var dmax; /* maximum distance from zlib header */
	        //#endif
	        var wsize; /* window size or zero if not using window */
	        var whave; /* valid bytes in the window */
	        var wnext; /* window write index */
	        var window; /* allocated sliding window, if wsize != 0 */
	        var hold; /* local strm.hold */
	        var bits; /* local strm.bits */
	        var lcode; /* local strm.lencode */
	        var dcode; /* local strm.distcode */
	        var lmask; /* mask for first level of length codes */
	        var dmask; /* mask for first level of distance codes */
	        var here; /* retrieved table entry */
	        var op; /* code bits, operation, extra bits, or */
	        /*  window position, window bytes to copy */
	        var len; /* match length, unused bytes */
	        var dist; /* match distance */
	        var from; /* where to copy match from */
	        var from_source;


	        var input, output; // JS specific, because we have no pointers

	        /* copy state to local variables */
	        state = strm.state;
	        //here = state.here;
	        _in = strm.next_in;
	        input = strm.input;
	        last = _in + (strm.avail_in - 5);
	        _out = strm.next_out;
	        output = strm.output;
	        beg = _out - (start - strm.avail_out);
	        end = _out + (strm.avail_out - 257);
	        //#ifdef INFLATE_STRICT
	        dmax = state.dmax;
	        //#endif
	        wsize = state.wsize;
	        whave = state.whave;
	        wnext = state.wnext;
	        window = state.window;
	        hold = state.hold;
	        bits = state.bits;
	        lcode = state.lencode;
	        dcode = state.distcode;
	        lmask = (1 << state.lenbits) - 1;
	        dmask = (1 << state.distbits) - 1;


	        /* decode literals and length/distances until end-of-block or not enough
	           input data or output space */

	        top: do {
	          if (bits < 15) {
	            hold += input[_in++] << bits;
	            bits += 8;
	            hold += input[_in++] << bits;
	            bits += 8;
	          }

	          here = lcode[hold & lmask];

	          dolen: for (;;) {
	            // Goto emulation
	            op = here >>> 24 /*here.bits*/;
	            hold >>>= op;
	            bits -= op;
	            op = here >>> 16 & 255 /*here.op*/;
	            if (op === 0) {
	              /* literal */
	              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	              //        "inflate:         literal '%c'\n" :
	              //        "inflate:         literal 0x%02x\n", here.val));
	              output[_out++] = here & 65535 /*here.val*/;
	            } else if (op & 16) {
	              /* length base */
	              len = here & 65535 /*here.val*/;
	              op &= 15; /* number of extra bits */
	              if (op) {
	                if (bits < op) {
	                  hold += input[_in++] << bits;
	                  bits += 8;
	                }
	                len += hold & (1 << op) - 1;
	                hold >>>= op;
	                bits -= op;
	              }
	              //Tracevv((stderr, "inflate:         length %u\n", len));
	              if (bits < 15) {
	                hold += input[_in++] << bits;
	                bits += 8;
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	              here = dcode[hold & dmask];

	              dodist: for (;;) {
	                // goto emulation
	                op = here >>> 24 /*here.bits*/;
	                hold >>>= op;
	                bits -= op;
	                op = here >>> 16 & 255 /*here.op*/;

	                if (op & 16) {
	                  /* distance base */
	                  dist = here & 65535 /*here.val*/;
	                  op &= 15; /* number of extra bits */
	                  if (bits < op) {
	                    hold += input[_in++] << bits;
	                    bits += 8;
	                    if (bits < op) {
	                      hold += input[_in++] << bits;
	                      bits += 8;
	                    }
	                  }
	                  dist += hold & (1 << op) - 1;
	                  //#ifdef INFLATE_STRICT
	                  if (dist > dmax) {
	                    strm.msg = "invalid distance too far back";
	                    state.mode = BAD;
	                    break top;
	                  }
	                  //#endif
	                  hold >>>= op;
	                  bits -= op;
	                  //Tracevv((stderr, "inflate:         distance %u\n", dist));
	                  op = _out - beg; /* max distance in output */
	                  if (dist > op) {
	                    /* see if copy from window */
	                    op = dist - op; /* distance back in window */
	                    if (op > whave) {
	                      if (state.sane) {
	                        strm.msg = "invalid distance too far back";
	                        state.mode = BAD;
	                        break top;
	                      }

	                      // (!) This block is disabled in zlib defailts,
	                      // don't enable it for binary compatibility
	                      //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	                      //                if (len <= op - whave) {
	                      //                  do {
	                      //                    output[_out++] = 0;
	                      //                  } while (--len);
	                      //                  continue top;
	                      //                }
	                      //                len -= op - whave;
	                      //                do {
	                      //                  output[_out++] = 0;
	                      //                } while (--op > whave);
	                      //                if (op === 0) {
	                      //                  from = _out - dist;
	                      //                  do {
	                      //                    output[_out++] = output[from++];
	                      //                  } while (--len);
	                      //                  continue top;
	                      //                }
	                      //#endif
	                    }
	                    from = 0; // window index
	                    from_source = window;
	                    if (wnext === 0) {
	                      /* very common case */
	                      from += wsize - op;
	                      if (op < len) {
	                        /* some from window */
	                        len -= op;
	                        do {
	                          output[_out++] = window[from++];
	                        } while (--op);
	                        from = _out - dist; /* rest from output */
	                        from_source = output;
	                      }
	                    } else if (wnext < op) {
	                      /* wrap around window */
	                      from += wsize + wnext - op;
	                      op -= wnext;
	                      if (op < len) {
	                        /* some from end of window */
	                        len -= op;
	                        do {
	                          output[_out++] = window[from++];
	                        } while (--op);
	                        from = 0;
	                        if (wnext < len) {
	                          /* some from start of window */
	                          op = wnext;
	                          len -= op;
	                          do {
	                            output[_out++] = window[from++];
	                          } while (--op);
	                          from = _out - dist; /* rest from output */
	                          from_source = output;
	                        }
	                      }
	                    } else {
	                      /* contiguous in window */
	                      from += wnext - op;
	                      if (op < len) {
	                        /* some from window */
	                        len -= op;
	                        do {
	                          output[_out++] = window[from++];
	                        } while (--op);
	                        from = _out - dist; /* rest from output */
	                        from_source = output;
	                      }
	                    }
	                    while (len > 2) {
	                      output[_out++] = from_source[from++];
	                      output[_out++] = from_source[from++];
	                      output[_out++] = from_source[from++];
	                      len -= 3;
	                    }
	                    if (len) {
	                      output[_out++] = from_source[from++];
	                      if (len > 1) {
	                        output[_out++] = from_source[from++];
	                      }
	                    }
	                  } else {
	                    from = _out - dist; /* copy direct from output */
	                    do {
	                      /* minimum length is three */
	                      output[_out++] = output[from++];
	                      output[_out++] = output[from++];
	                      output[_out++] = output[from++];
	                      len -= 3;
	                    } while (len > 2);
	                    if (len) {
	                      output[_out++] = output[from++];
	                      if (len > 1) {
	                        output[_out++] = output[from++];
	                      }
	                    }
	                  }
	                } else if ((op & 64) === 0) {
	                  /* 2nd level distance code */
	                  here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
	                  continue dodist;
	                } else {
	                  strm.msg = "invalid distance code";
	                  state.mode = BAD;
	                  break top;
	                }

	                break; // need to emulate goto via "continue"
	              }
	            } else if ((op & 64) === 0) {
	              /* 2nd level length code */
	              here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
	              continue dolen;
	            } else if (op & 32) {
	              /* end-of-block */
	              //Tracevv((stderr, "inflate:         end of block\n"));
	              state.mode = TYPE;
	              break top;
	            } else {
	              strm.msg = "invalid literal/length code";
	              state.mode = BAD;
	              break top;
	            }

	            break; // need to emulate goto via "continue"
	          }
	        } while (_in < last && _out < end);

	        /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	        len = bits >> 3;
	        _in -= len;
	        bits -= len << 3;
	        hold &= (1 << bits) - 1;

	        /* update state and return */
	        strm.next_in = _in;
	        strm.next_out = _out;
	        strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
	        strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
	        state.hold = hold;
	        state.bits = bits;
	        return;
	      };


	      /***/
	    },
	    /* 54 */
	    /***/function (module, exports, __webpack_require__) {
	      "use strict";


	      var utils = __webpack_require__(49);

	      var MAXBITS = 15;
	      var ENOUGH_LENS = 852;
	      var ENOUGH_DISTS = 592;
	      //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	      var CODES = 0;
	      var LENS = 1;
	      var DISTS = 2;

	      var lbase = [/* Length codes 257..285 base */
	      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];

	      var lext = [/* Length codes 257..285 extra */
	      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];

	      var dbase = [/* Distance codes 0..29 base */
	      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];

	      var dext = [/* Distance codes 0..29 extra */
	      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

	      module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
	        var bits = opts.bits;
	        //here = opts.here; /* table entry for duplication */

	        var len = 0; /* a code's length in bits */
	        var sym = 0; /* index of code symbols */
	        var min = 0,
	            max = 0; /* minimum and maximum code lengths */
	        var root = 0; /* number of index bits for root table */
	        var curr = 0; /* number of index bits for current table */
	        var drop = 0; /* code bits to drop for sub-table */
	        var left = 0; /* number of prefix codes available */
	        var used = 0; /* code entries in table used */
	        var huff = 0; /* Huffman code */
	        var incr; /* for incrementing code, index */
	        var fill; /* index for replicating entries */
	        var low; /* low bits for current root entry */
	        var mask; /* mask for low root bits */
	        var next; /* next available space in table */
	        var base = null; /* base value table to use */
	        var base_index = 0;
	        //  var shoextra;    /* extra bits table to use */
	        var end; /* use base and extra for symbol > end */
	        var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	        var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	        var extra = null;
	        var extra_index = 0;

	        var here_bits, here_op, here_val;

	        /*
	         Process a set of code lengths to create a canonical Huffman code.  The
	         code lengths are lens[0..codes-1].  Each length corresponds to the
	         symbols 0..codes-1.  The Huffman code is generated by first sorting the
	         symbols by length from short to long, and retaining the symbol order
	         for codes with equal lengths.  Then the code starts with all zero bits
	         for the first code of the shortest length, and the codes are integer
	         increments for the same length, and zeros are appended as the length
	         increases.  For the deflate format, these bits are stored backwards
	         from their more natural integer increment ordering, and so when the
	         decoding tables are built in the large loop below, the integer codes
	         are incremented backwards.
	          This routine assumes, but does not check, that all of the entries in
	         lens[] are in the range 0..MAXBITS.  The caller must assure this.
	         1..MAXBITS is interpreted as that code length.  zero means that that
	         symbol does not occur in this code.
	          The codes are sorted by computing a count of codes for each length,
	         creating from that a table of starting indices for each length in the
	         sorted table, and then entering the symbols in order in the sorted
	         table.  The sorted table is work[], with that space being provided by
	         the caller.
	          The length counts are used for other purposes as well, i.e. finding
	         the minimum and maximum length codes, determining if there are any
	         codes at all, checking for a valid set of lengths, and looking ahead
	         at length counts to determine sub-table sizes when building the
	         decoding tables.
	         */

	        /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	        for (len = 0; len <= MAXBITS; len++) {
	          count[len] = 0;
	        }
	        for (sym = 0; sym < codes; sym++) {
	          count[lens[lens_index + sym]]++;
	        }

	        /* bound code lengths, force root to be within code lengths */
	        root = bits;
	        for (max = MAXBITS; max >= 1; max--) {
	          if (count[max] !== 0) {
	            break;
	          }
	        }
	        if (root > max) {
	          root = max;
	        }
	        if (max === 0) {
	          /* no symbols to code at all */
	          //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	          //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	          //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	          table[table_index++] = 1 << 24 | 64 << 16 | 0;


	          //table.op[opts.table_index] = 64;
	          //table.bits[opts.table_index] = 1;
	          //table.val[opts.table_index++] = 0;
	          table[table_index++] = 1 << 24 | 64 << 16 | 0;

	          opts.bits = 1;
	          return 0; /* no symbols, but wait for decoding to report error */
	        }
	        for (min = 1; min < max; min++) {
	          if (count[min] !== 0) {
	            break;
	          }
	        }
	        if (root < min) {
	          root = min;
	        }

	        /* check for an over-subscribed or incomplete set of lengths */
	        left = 1;
	        for (len = 1; len <= MAXBITS; len++) {
	          left <<= 1;
	          left -= count[len];
	          if (left < 0) {
	            return -1;
	          } /* over-subscribed */
	        }
	        if (left > 0 && (type === CODES || max !== 1)) {
	          return -1; /* incomplete set */
	        }

	        /* generate offsets into symbol table for each length for sorting */
	        offs[1] = 0;
	        for (len = 1; len < MAXBITS; len++) {
	          offs[len + 1] = offs[len] + count[len];
	        }

	        /* sort symbols by length, by symbol order within each length */
	        for (sym = 0; sym < codes; sym++) {
	          if (lens[lens_index + sym] !== 0) {
	            work[offs[lens[lens_index + sym]]++] = sym;
	          }
	        }

	        /*
	         Create and fill in decoding tables.  In this loop, the table being
	         filled is at next and has curr index bits.  The code being used is huff
	         with length len.  That code is converted to an index by dropping drop
	         bits off of the bottom.  For codes where len is less than drop + curr,
	         those top drop + curr - len bits are incremented through all values to
	         fill the table with replicated entries.
	          root is the number of index bits for the root table.  When len exceeds
	         root, sub-tables are created pointed to by the root entry with an index
	         of the low root bits of huff.  This is saved in low to check for when a
	         new sub-table should be started.  drop is zero when the root table is
	         being filled, and drop is root when sub-tables are being filled.
	          When a new sub-table is needed, it is necessary to look ahead in the
	         code lengths to determine what size sub-table is needed.  The length
	         counts are used for this, and so count[] is decremented as codes are
	         entered in the tables.
	          used keeps track of how many table entries have been allocated from the
	         provided *table space.  It is checked for LENS and DIST tables against
	         the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	         the initial root table size constants.  See the comments in inftrees.h
	         for more information.
	          sym increments through all symbols, and the loop terminates when
	         all codes of length max, i.e. all codes, have been processed.  This
	         routine permits incomplete codes, so another loop after this one fills
	         in the rest of the decoding tables with invalid code markers.
	         */

	        /* set up for code type */
	        // poor man optimization - use if-else instead of switch,
	        // to avoid deopts in old v8
	        if (type === CODES) {
	          base = extra = work; /* dummy value--not used */
	          end = 19;
	        } else if (type === LENS) {
	          base = lbase;
	          base_index -= 257;
	          extra = lext;
	          extra_index -= 257;
	          end = 256;
	        } else {
	          /* DISTS */
	          base = dbase;
	          extra = dext;
	          end = -1;
	        }

	        /* initialize opts for loop */
	        huff = 0; /* starting code */
	        sym = 0; /* starting code symbol */
	        len = min; /* starting code length */
	        next = table_index; /* current table to fill in */
	        curr = root; /* current table index bits */
	        drop = 0; /* current bits to drop from code for index */
	        low = -1; /* trigger new sub-table when len > root */
	        used = 1 << root; /* use root table entries */
	        mask = used - 1; /* mask for comparing low */

	        /* check available table space */
	        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
	          return 1;
	        }

	        var i = 0;
	        /* process all codes and make table entries */
	        for (;;) {
	          i++;
	          /* create table entry */
	          here_bits = len - drop;
	          if (work[sym] < end) {
	            here_op = 0;
	            here_val = work[sym];
	          } else if (work[sym] > end) {
	            here_op = extra[extra_index + work[sym]];
	            here_val = base[base_index + work[sym]];
	          } else {
	            here_op = 32 + 64; /* end of block */
	            here_val = 0;
	          }

	          /* replicate for those indices with low len bits equal to huff */
	          incr = 1 << len - drop;
	          fill = 1 << curr;
	          min = fill; /* save offset to next table */
	          do {
	            fill -= incr;
	            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
	          } while (fill !== 0);

	          /* backwards increment the len-bit code huff */
	          incr = 1 << len - 1;
	          while (huff & incr) {
	            incr >>= 1;
	          }
	          if (incr !== 0) {
	            huff &= incr - 1;
	            huff += incr;
	          } else {
	            huff = 0;
	          }

	          /* go to next symbol, update count, len */
	          sym++;
	          if (--count[len] === 0) {
	            if (len === max) {
	              break;
	            }
	            len = lens[lens_index + work[sym]];
	          }

	          /* create new sub-table if needed */
	          if (len > root && (huff & mask) !== low) {
	            /* if first time, transition to sub-tables */
	            if (drop === 0) {
	              drop = root;
	            }

	            /* increment past last table */
	            next += min; /* here min is 1 << curr */

	            /* determine length of next table */
	            curr = len - drop;
	            left = 1 << curr;
	            while (curr + drop < max) {
	              left -= count[curr + drop];
	              if (left <= 0) {
	                break;
	              }
	              curr++;
	              left <<= 1;
	            }

	            /* check for enough space */
	            used += 1 << curr;
	            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
	              return 1;
	            }

	            /* point entry in root table to sub-table */
	            low = huff & mask;
	            /*table.op[low] = curr;
	            table.bits[low] = root;
	            table.val[low] = next - opts.table_index;*/
	            table[low] = root << 24 | curr << 16 | next - table_index | 0;
	          }
	        }

	        /* fill in remaining table entry if code is incomplete (guaranteed to have
	         at most one remaining entry, since if the code is incomplete, the
	         maximum code length that was allowed to get this far is one bit) */
	        if (huff !== 0) {
	          //table.op[next + huff] = 64;            /* invalid code marker */
	          //table.bits[next + huff] = len - drop;
	          //table.val[next + huff] = 0;
	          table[next + huff] = len - drop << 24 | 64 << 16 | 0;
	        }

	        /* set return parameters */
	        //opts.table_index += used;
	        opts.bits = root;
	        return 0;
	      };


	      /***/
	    },
	    /* 55 */
	    /***/function (module, exports, __webpack_require__) {
	      /* WEBPACK VAR INJECTION */(function (Buffer) {
	        // Copyright Joyent, Inc. and other Node contributors.
	        //
	        // Permission is hereby granted, free of charge, to any person obtaining a
	        // copy of this software and associated documentation files (the
	        // "Software"), to deal in the Software without restriction, including
	        // without limitation the rights to use, copy, modify, merge, publish,
	        // distribute, sublicense, and/or sell copies of the Software, and to permit
	        // persons to whom the Software is furnished to do so, subject to the
	        // following conditions:
	        //
	        // The above copyright notice and this permission notice shall be included
	        // in all copies or substantial portions of the Software.
	        //
	        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	        // USE OR OTHER DEALINGS IN THE SOFTWARE.

	        // NOTE: These type checking functions intentionally don't use `instanceof`
	        // because it is fragile and can be easily faked with `Object.create()`.
	        var isArray = function (ar) {
	          return Array.isArray(ar);
	        };

	        var isBoolean = function (arg) {
	          return typeof arg === "boolean";
	        };

	        var isNull = function (arg) {
	          return arg === null;
	        };

	        var isNullOrUndefined = function (arg) {
	          return arg == null;
	        };

	        var isNumber = function (arg) {
	          return typeof arg === "number";
	        };

	        var isString = function (arg) {
	          return typeof arg === "string";
	        };

	        var isSymbol = function (arg) {
	          return typeof arg === "symbol";
	        };

	        var isUndefined = function (arg) {
	          return arg === void 0;
	        };

	        var isRegExp = function (re) {
	          return isObject(re) && objectToString(re) === "[object RegExp]";
	        };

	        var isObject = function (arg) {
	          return typeof arg === "object" && arg !== null;
	        };

	        var isDate = function (d) {
	          return isObject(d) && objectToString(d) === "[object Date]";
	        };

	        var isError = function (e) {
	          return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
	        };

	        var isFunction = function (arg) {
	          return typeof arg === "function";
	        };

	        var isPrimitive = function (arg) {
	          return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
	          typeof arg === "undefined";
	        };

	        var isBuffer = function (arg) {
	          return Buffer.isBuffer(arg);
	        };

	        var objectToString = function (o) {
	          return Object.prototype.toString.call(o);
	        }
	        /* WEBPACK VAR INJECTION */;

	        exports.isArray = isArray;

	        exports.isBoolean = isBoolean;

	        exports.isNull = isNull;

	        exports.isNullOrUndefined = isNullOrUndefined;

	        exports.isNumber = isNumber;

	        exports.isString = isString;

	        exports.isSymbol = isSymbol;

	        exports.isUndefined = isUndefined;

	        exports.isRegExp = isRegExp;

	        exports.isObject = isObject;

	        exports.isDate = isDate;

	        exports.isError = isError;

	        exports.isFunction = isFunction;

	        exports.isPrimitive = isPrimitive;

	        exports.isBuffer = isBuffer;
	      }).call(exports, __webpack_require__(9).Buffer);

	      /***/
	    },
	    /* 56 */
	    /***/function (module, exports, __webpack_require__) {
	      if (typeof Object.create === "function") {
	        // implementation from standard node.js 'util' module
	        module.exports = function inherits(ctor, superCtor) {
	          ctor.super_ = superCtor;
	          ctor.prototype = Object.create(superCtor.prototype, {
	            constructor: {
	              value: ctor,
	              enumerable: false,
	              writable: true,
	              configurable: true
	            }
	          });
	        };
	      } else {
	        // old school shim for old browsers
	        module.exports = function inherits(ctor, superCtor) {
	          ctor.super_ = superCtor;
	          var TempCtor = function () {};
	          TempCtor.prototype = superCtor.prototype;
	          ctor.prototype = new TempCtor();
	          ctor.prototype.constructor = ctor;
	        };
	      }


	      /***/
	    }
	    /******/]);
	    /************************************************************************/
	    /******/
	    // our naive impl doesn't care (correctness is still preserved)
	    /* no initialization */ /* no final expression */ /* no condition */ /* no condition */
	    /*jshint noempty:false*/
	    /*jshint noempty:false*/
	    /*BITS(8)*/ /*BITS(4)*/ /*BITS(4)*/ /*BITS(1)*/ /*BITS(2)*/ /*BITS(5)*/ /*BITS(5)*/ /*BITS(4)*/ /*BITS(last.bits + last.op)*/ /*BITS(last.bits + last.op)*/
	    /*UPDATE(state.check, put - _out, _out);*/
	    /*UPDATE(state.check, strm.next_out - _out, _out);*/


	    /* (ignored) */

	    /***/ /*here.val*/ /*here.val*/
	    /* WEBPACK VAR INJECTION */
	  }).call(exports, __webpack_require__(1).Buffer);

	  /***/
	},
	/* 1 */
	/***/function (module, exports, __webpack_require__) {
	  /* WEBPACK VAR INJECTION */(function (Buffer) {
	    /**
	     * Class: Buffer
	     * =============
	     *
	     * The Buffer constructor returns instances of `Uint8Array` that are augmented
	     * with function properties for all the node `Buffer` API functions. We use
	     * `Uint8Array` so that square bracket notation works as expected -- it returns
	     * a single octet.
	     *
	     * By augmenting the instances, we can avoid modifying the `Uint8Array`
	     * prototype.
	     */
	    var Buffer = function (subject, encoding, noZero) {
	      if (!(this instanceof Buffer)) return new Buffer(subject, encoding, noZero);

	      var type = typeof subject;

	      // Find the length
	      var length;
	      if (type === "number") length = subject > 0 ? subject >>> 0 : 0;else if (type === "string") {
	        if (encoding === "base64") subject = base64clean(subject);
	        length = Buffer.byteLength(subject, encoding);
	      } else if (type === "object" && subject !== null) {
	        // assume object is array-like
	        if (subject.type === "Buffer" && isArray(subject.data)) subject = subject.data;
	        length = +subject.length > 0 ? Math.floor(+subject.length) : 0;
	      } else throw new TypeError("must start with number, buffer, array or string");

	      if (this.length > kMaxLength) throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + kMaxLength.toString(16) + " bytes");

	      var buf;
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        // Preferred: Return an augmented `Uint8Array` instance for best performance
	        buf = Buffer._augment(new Uint8Array(length));
	      } else {
	        // Fallback: Return THIS instance of Buffer (created by `new`)
	        buf = this;
	        buf.length = length;
	        buf._isBuffer = true;
	      }

	      var i;
	      if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === "number") {
	        // Speed optimization -- use set if we're copying from a typed array
	        buf._set(subject);
	      } else if (isArrayish(subject)) {
	        // Treat array-ish objects as a byte array
	        if (Buffer.isBuffer(subject)) {
	          for (i = 0; i < length; i++) buf[i] = subject.readUInt8(i);
	        } else {
	          for (i = 0; i < length; i++) buf[i] = (subject[i] % 256 + 256) % 256;
	        }
	      } else if (type === "string") {
	        buf.write(subject, 0, encoding);
	      } else if (type === "number" && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
	        for (i = 0; i < length; i++) {
	          buf[i] = 0;
	        }
	      }

	      return buf;
	    };

	    var hexWrite = function (buf, string, offset, length) {
	      offset = Number(offset) || 0;
	      var remaining = buf.length - offset;
	      if (!length) {
	        length = remaining;
	      } else {
	        length = Number(length);
	        if (length > remaining) {
	          length = remaining;
	        }
	      }

	      // must be an even number of digits
	      var strLen = string.length;
	      if (strLen % 2 !== 0) throw new Error("Invalid hex string");

	      if (length > strLen / 2) {
	        length = strLen / 2;
	      }
	      for (var i = 0; i < length; i++) {
	        var byte = parseInt(string.substr(i * 2, 2), 16);
	        if (isNaN(byte)) throw new Error("Invalid hex string");
	        buf[offset + i] = byte;
	      }
	      return i;
	    };

	    var utf8Write = function (buf, string, offset, length) {
	      var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length);
	      return charsWritten;
	    };

	    var asciiWrite = function (buf, string, offset, length) {
	      var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length);
	      return charsWritten;
	    };

	    var binaryWrite = function (buf, string, offset, length) {
	      return asciiWrite(buf, string, offset, length);
	    };

	    var base64Write = function (buf, string, offset, length) {
	      var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length);
	      return charsWritten;
	    };

	    var utf16leWrite = function (buf, string, offset, length) {
	      var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length, 2);
	      return charsWritten;
	    };

	    var base64Slice = function (buf, start, end) {
	      if (start === 0 && end === buf.length) {
	        return base64.fromByteArray(buf);
	      } else {
	        return base64.fromByteArray(buf.slice(start, end));
	      }
	    };

	    var utf8Slice = function (buf, start, end) {
	      var res = "";
	      var tmp = "";
	      end = Math.min(buf.length, end);

	      for (var i = start; i < end; i++) {
	        if (buf[i] <= 127) {
	          res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
	          tmp = "";
	        } else {
	          tmp += "%" + buf[i].toString(16);
	        }
	      }

	      return res + decodeUtf8Char(tmp);
	    };

	    var asciiSlice = function (buf, start, end) {
	      var ret = "";
	      end = Math.min(buf.length, end);

	      for (var i = start; i < end; i++) {
	        ret += String.fromCharCode(buf[i]);
	      }
	      return ret;
	    };

	    var binarySlice = function (buf, start, end) {
	      return asciiSlice(buf, start, end);
	    };

	    var hexSlice = function (buf, start, end) {
	      var len = buf.length;

	      if (!start || start < 0) start = 0;
	      if (!end || end < 0 || end > len) end = len;

	      var out = "";
	      for (var i = start; i < end; i++) {
	        out += toHex(buf[i]);
	      }
	      return out;
	    };

	    var utf16leSlice = function (buf, start, end) {
	      var bytes = buf.slice(start, end);
	      var res = "";
	      for (var i = 0; i < bytes.length; i += 2) {
	        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	      }
	      return res;
	    };

	    /*
	     * Need to make sure that buffer isn't trying to write out of bounds.
	     */
	    var checkOffset = function (offset, ext, length) {
	      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
	      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
	    };

	    var checkInt = function (buf, value, offset, ext, max, min) {
	      if (!Buffer.isBuffer(buf)) throw new TypeError("buffer must be a Buffer instance");
	      if (value > max || value < min) throw new TypeError("value is out of bounds");
	      if (offset + ext > buf.length) throw new TypeError("index out of range");
	    };

	    var objectWriteUInt16 = function (buf, value, offset, littleEndian) {
	      if (value < 0) value = 65535 + value + 1;
	      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	        buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
	      }
	    };

	    var objectWriteUInt32 = function (buf, value, offset, littleEndian) {
	      if (value < 0) value = 4294967295 + value + 1;
	      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	        buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
	      }
	    };

	    var checkIEEE754 = function (buf, value, offset, ext, max, min) {
	      if (value > max || value < min) throw new TypeError("value is out of bounds");
	      if (offset + ext > buf.length) throw new TypeError("index out of range");
	    };

	    var writeFloat = function (buf, value, offset, littleEndian, noAssert) {
	      if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
	      ieee754.write(buf, value, offset, littleEndian, 23, 4);
	      return offset + 4;
	    };

	    var writeDouble = function (buf, value, offset, littleEndian, noAssert) {
	      if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157e+308, -1.7976931348623157e+308);
	      ieee754.write(buf, value, offset, littleEndian, 52, 8);
	      return offset + 8;
	    };

	    var base64clean = function (str) {
	      // Node strips out invalid characters like \n and \t from the string, base64-js does not
	      str = stringtrim(str).replace(INVALID_BASE64_RE, "");
	      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	      while (str.length % 4 !== 0) {
	        str = str + "=";
	      }
	      return str;
	    };

	    var stringtrim = function (str) {
	      if (str.trim) return str.trim();
	      return str.replace(/^\s+|\s+$/g, "");
	    };

	    var isArrayish = function (subject) {
	      return isArray(subject) || Buffer.isBuffer(subject) || subject && typeof subject === "object" && typeof subject.length === "number";
	    };

	    var toHex = function (n) {
	      if (n < 16) return "0" + n.toString(16);
	      return n.toString(16);
	    };

	    var utf8ToBytes = function (str) {
	      var byteArray = [];
	      for (var i = 0; i < str.length; i++) {
	        var b = str.charCodeAt(i);
	        if (b <= 127) {
	          byteArray.push(b);
	        } else {
	          var start = i;
	          if (b >= 55296 && b <= 57343) i++;
	          var h = encodeURIComponent(str.slice(start, i + 1)).substr(1).split("%");
	          for (var j = 0; j < h.length; j++) {
	            byteArray.push(parseInt(h[j], 16));
	          }
	        }
	      }
	      return byteArray;
	    };

	    var asciiToBytes = function (str) {
	      var byteArray = [];
	      for (var i = 0; i < str.length; i++) {
	        // Node's code seems to be doing this and not & 0x7F..
	        byteArray.push(str.charCodeAt(i) & 255);
	      }
	      return byteArray;
	    };

	    var utf16leToBytes = function (str) {
	      var c, hi, lo;
	      var byteArray = [];
	      for (var i = 0; i < str.length; i++) {
	        c = str.charCodeAt(i);
	        hi = c >> 8;
	        lo = c % 256;
	        byteArray.push(lo);
	        byteArray.push(hi);
	      }

	      return byteArray;
	    };

	    var base64ToBytes = function (str) {
	      return base64.toByteArray(str);
	    };

	    var blitBuffer = function (src, dst, offset, length, unitSize) {
	      if (unitSize) length -= length % unitSize;
	      for (var i = 0; i < length; i++) {
	        if (i + offset >= dst.length || i >= src.length) break;
	        dst[i + offset] = src[i];
	      }
	      return i;
	    };

	    var decodeUtf8Char = function (str) {
	      try {
	        return decodeURIComponent(str);
	      } catch (err) {
	        return String.fromCharCode(65533) // UTF 8 invalid char
	        ;
	      }
	    }

	    /* WEBPACK VAR INJECTION */;

	    /*!
	    * The buffer module from node.js, for the browser.
	    *
	    * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	    * @license  MIT
	    */

	    var base64 = __webpack_require__(4);
	    var ieee754 = __webpack_require__(2);
	    var isArray = __webpack_require__(3);

	    exports.Buffer = Buffer;
	    exports.SlowBuffer = Buffer;
	    exports.INSPECT_MAX_BYTES = 50;
	    Buffer.poolSize = 8192; // not used by this implementation

	    var kMaxLength = 1073741823;

	    /**
	     * If `Buffer.TYPED_ARRAY_SUPPORT`:
	     *   === true    Use Uint8Array implementation (fastest)
	     *   === false   Use Object implementation (most compatible, even IE6)
	     *
	     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	     * Opera 11.6+, iOS 4.2+.
	     *
	     * Note:
	     *
	     * - Implementation must support adding new properties to `Uint8Array` instances.
	     *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	     *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	     *
	     *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	     *
	     *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	     *    incorrect length in some situations.
	     *
	     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	     * get the Object implementation, which is slower but will work correctly.
	     */
	    Buffer.TYPED_ARRAY_SUPPORT = (function () {
	      try {
	        var buf = new ArrayBuffer(0);
	        var arr = new Uint8Array(buf);
	        arr.foo = function () {
	          return 42;
	        };
	        return 42 === arr.foo() && // typed array instances can be augmented
	        typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	        ;
	      } catch (e) {
	        return false;
	      }
	    })();

	    Buffer.isBuffer = function (b) {
	      return !!(b != null && b._isBuffer);
	    };

	    Buffer.compare = function (a, b) {
	      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");

	      var x = a.length;
	      var y = b.length;
	      for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
	      if (i !== len) {
	        x = a[i];
	        y = b[i];
	      }
	      if (x < y) return -1;
	      if (y < x) return 1;
	      return 0;
	    };

	    Buffer.isEncoding = function (encoding) {
	      switch (String(encoding).toLowerCase()) {
	        case "hex":
	        case "utf8":
	        case "utf-8":
	        case "ascii":
	        case "binary":
	        case "base64":
	        case "raw":
	        case "ucs2":
	        case "ucs-2":
	        case "utf16le":
	        case "utf-16le":
	          return true;
	        default:
	          return false;
	      }
	    };

	    Buffer.concat = function (list, totalLength) {
	      if (!isArray(list)) throw new TypeError("Usage: Buffer.concat(list[, length])");

	      if (list.length === 0) {
	        return new Buffer(0);
	      } else if (list.length === 1) {
	        return list[0];
	      }

	      var i;
	      if (totalLength === undefined) {
	        totalLength = 0;
	        for (i = 0; i < list.length; i++) {
	          totalLength += list[i].length;
	        }
	      }

	      var buf = new Buffer(totalLength);
	      var pos = 0;
	      for (i = 0; i < list.length; i++) {
	        var item = list[i];
	        item.copy(buf, pos);
	        pos += item.length;
	      }
	      return buf;
	    };

	    Buffer.byteLength = function (str, encoding) {
	      var ret;
	      str = str + "";
	      switch (encoding || "utf8") {
	        case "ascii":
	        case "binary":
	        case "raw":
	          ret = str.length;
	          break;
	        case "ucs2":
	        case "ucs-2":
	        case "utf16le":
	        case "utf-16le":
	          ret = str.length * 2;
	          break;
	        case "hex":
	          ret = str.length >>> 1;
	          break;
	        case "utf8":
	        case "utf-8":
	          ret = utf8ToBytes(str).length;
	          break;
	        case "base64":
	          ret = base64ToBytes(str).length;
	          break;
	        default:
	          ret = str.length;
	      }
	      return ret;
	    };

	    // pre-set for values that may exist in the future
	    Buffer.prototype.length = undefined;
	    Buffer.prototype.parent = undefined;

	    // toString(encoding, start=0, end=buffer.length)
	    Buffer.prototype.toString = function (encoding, start, end) {
	      var loweredCase = false;

	      start = start >>> 0;
	      end = end === undefined || end === Infinity ? this.length : end >>> 0;

	      if (!encoding) encoding = "utf8";
	      if (start < 0) start = 0;
	      if (end > this.length) end = this.length;
	      if (end <= start) return "";

	      while (true) {
	        switch (encoding) {
	          case "hex":
	            return hexSlice(this, start, end);

	          case "utf8":
	          case "utf-8":
	            return utf8Slice(this, start, end);

	          case "ascii":
	            return asciiSlice(this, start, end);

	          case "binary":
	            return binarySlice(this, start, end);

	          case "base64":
	            return base64Slice(this, start, end);

	          case "ucs2":
	          case "ucs-2":
	          case "utf16le":
	          case "utf-16le":
	            return utf16leSlice(this, start, end);

	          default:
	            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
	            encoding = (encoding + "").toLowerCase();
	            loweredCase = true;
	        }
	      }
	    };

	    Buffer.prototype.equals = function (b) {
	      if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
	      return Buffer.compare(this, b) === 0;
	    };

	    Buffer.prototype.inspect = function () {
	      var str = "";
	      var max = exports.INSPECT_MAX_BYTES;
	      if (this.length > 0) {
	        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
	        if (this.length > max) str += " ... ";
	      }
	      return "<Buffer " + str + ">";
	    };

	    Buffer.prototype.compare = function (b) {
	      if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
	      return Buffer.compare(this, b);
	    };

	    // `get` will be removed in Node 0.13+
	    Buffer.prototype.get = function (offset) {
	      console.log(".get() is deprecated. Access using array indexes instead.");
	      return this.readUInt8(offset);
	    };

	    // `set` will be removed in Node 0.13+
	    Buffer.prototype.set = function (v, offset) {
	      console.log(".set() is deprecated. Access using array indexes instead.");
	      return this.writeUInt8(v, offset);
	    };

	    Buffer.prototype.write = function (string, offset, length, encoding) {
	      // Support both (string, offset, length, encoding)
	      // and the legacy (string, encoding, offset, length)
	      if (isFinite(offset)) {
	        if (!isFinite(length)) {
	          encoding = length;
	          length = undefined;
	        }
	      } else {
	        // legacy
	        var swap = encoding;
	        encoding = offset;
	        offset = length;
	        length = swap;
	      }

	      offset = Number(offset) || 0;
	      var remaining = this.length - offset;
	      if (!length) {
	        length = remaining;
	      } else {
	        length = Number(length);
	        if (length > remaining) {
	          length = remaining;
	        }
	      }
	      encoding = String(encoding || "utf8").toLowerCase();

	      var ret;
	      switch (encoding) {
	        case "hex":
	          ret = hexWrite(this, string, offset, length);
	          break;
	        case "utf8":
	        case "utf-8":
	          ret = utf8Write(this, string, offset, length);
	          break;
	        case "ascii":
	          ret = asciiWrite(this, string, offset, length);
	          break;
	        case "binary":
	          ret = binaryWrite(this, string, offset, length);
	          break;
	        case "base64":
	          ret = base64Write(this, string, offset, length);
	          break;
	        case "ucs2":
	        case "ucs-2":
	        case "utf16le":
	        case "utf-16le":
	          ret = utf16leWrite(this, string, offset, length);
	          break;
	        default:
	          throw new TypeError("Unknown encoding: " + encoding);
	      }
	      return ret;
	    };

	    Buffer.prototype.toJSON = function () {
	      return {
	        type: "Buffer",
	        data: Array.prototype.slice.call(this._arr || this, 0)
	      };
	    };

	    Buffer.prototype.slice = function (start, end) {
	      var len = this.length;
	      start = ~ ~start;
	      end = end === undefined ? len : ~ ~end;

	      if (start < 0) {
	        start += len;
	        if (start < 0) start = 0;
	      } else if (start > len) {
	        start = len;
	      }

	      if (end < 0) {
	        end += len;
	        if (end < 0) end = 0;
	      } else if (end > len) {
	        end = len;
	      }

	      if (end < start) end = start;

	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        return Buffer._augment(this.subarray(start, end));
	      } else {
	        var sliceLen = end - start;
	        var newBuf = new Buffer(sliceLen, undefined, true);
	        for (var i = 0; i < sliceLen; i++) {
	          newBuf[i] = this[i + start];
	        }
	        return newBuf;
	      }
	    };

	    Buffer.prototype.readUInt8 = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 1, this.length);
	      return this[offset];
	    };

	    Buffer.prototype.readUInt16LE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 2, this.length);
	      return this[offset] | this[offset + 1] << 8;
	    };

	    Buffer.prototype.readUInt16BE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 2, this.length);
	      return this[offset] << 8 | this[offset + 1];
	    };

	    Buffer.prototype.readUInt32LE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 4, this.length);

	      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
	    };

	    Buffer.prototype.readUInt32BE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 4, this.length);

	      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	    };

	    Buffer.prototype.readInt8 = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 1, this.length);
	      if (!(this[offset] & 128)) return this[offset];
	      return (255 - this[offset] + 1) * -1;
	    };

	    Buffer.prototype.readInt16LE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 2, this.length);
	      var val = this[offset] | this[offset + 1] << 8;
	      return val & 32768 ? val | 4294901760 : val;
	    };

	    Buffer.prototype.readInt16BE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 2, this.length);
	      var val = this[offset + 1] | this[offset] << 8;
	      return val & 32768 ? val | 4294901760 : val;
	    };

	    Buffer.prototype.readInt32LE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 4, this.length);

	      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	    };

	    Buffer.prototype.readInt32BE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 4, this.length);

	      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	    };

	    Buffer.prototype.readFloatLE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 4, this.length);
	      return ieee754.read(this, offset, true, 23, 4);
	    };

	    Buffer.prototype.readFloatBE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 4, this.length);
	      return ieee754.read(this, offset, false, 23, 4);
	    };

	    Buffer.prototype.readDoubleLE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 8, this.length);
	      return ieee754.read(this, offset, true, 52, 8);
	    };

	    Buffer.prototype.readDoubleBE = function (offset, noAssert) {
	      if (!noAssert) checkOffset(offset, 8, this.length);
	      return ieee754.read(this, offset, false, 52, 8);
	    };

	    Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
	      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	      this[offset] = value;
	      return offset + 1;
	    };

	    Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        this[offset] = value;
	        this[offset + 1] = value >>> 8;
	      } else objectWriteUInt16(this, value, offset, true);
	      return offset + 2;
	    };

	    Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        this[offset] = value >>> 8;
	        this[offset + 1] = value;
	      } else objectWriteUInt16(this, value, offset, false);
	      return offset + 2;
	    };

	    Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        this[offset + 3] = value >>> 24;
	        this[offset + 2] = value >>> 16;
	        this[offset + 1] = value >>> 8;
	        this[offset] = value;
	      } else objectWriteUInt32(this, value, offset, true);
	      return offset + 4;
	    };

	    Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        this[offset] = value >>> 24;
	        this[offset + 1] = value >>> 16;
	        this[offset + 2] = value >>> 8;
	        this[offset + 3] = value;
	      } else objectWriteUInt32(this, value, offset, false);
	      return offset + 4;
	    };

	    Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
	      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	      if (value < 0) value = 255 + value + 1;
	      this[offset] = value;
	      return offset + 1;
	    };

	    Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        this[offset] = value;
	        this[offset + 1] = value >>> 8;
	      } else objectWriteUInt16(this, value, offset, true);
	      return offset + 2;
	    };

	    Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        this[offset] = value >>> 8;
	        this[offset + 1] = value;
	      } else objectWriteUInt16(this, value, offset, false);
	      return offset + 2;
	    };

	    Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        this[offset] = value;
	        this[offset + 1] = value >>> 8;
	        this[offset + 2] = value >>> 16;
	        this[offset + 3] = value >>> 24;
	      } else objectWriteUInt32(this, value, offset, true);
	      return offset + 4;
	    };

	    Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
	      value = +value;
	      offset = offset >>> 0;
	      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
	      if (value < 0) value = 4294967295 + value + 1;
	      if (Buffer.TYPED_ARRAY_SUPPORT) {
	        this[offset] = value >>> 24;
	        this[offset + 1] = value >>> 16;
	        this[offset + 2] = value >>> 8;
	        this[offset + 3] = value;
	      } else objectWriteUInt32(this, value, offset, false);
	      return offset + 4;
	    };

	    Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
	      return writeFloat(this, value, offset, true, noAssert);
	    };

	    Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
	      return writeFloat(this, value, offset, false, noAssert);
	    };

	    Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
	      return writeDouble(this, value, offset, true, noAssert);
	    };

	    Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
	      return writeDouble(this, value, offset, false, noAssert);
	    };

	    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	    Buffer.prototype.copy = function (target, target_start, start, end) {
	      var source = this;

	      if (!start) start = 0;
	      if (!end && end !== 0) end = this.length;
	      if (!target_start) target_start = 0;

	      // Copy 0 bytes; we're done
	      if (end === start) return;
	      if (target.length === 0 || source.length === 0) return;

	      // Fatal error conditions
	      if (end < start) throw new TypeError("sourceEnd < sourceStart");
	      if (target_start < 0 || target_start >= target.length) throw new TypeError("targetStart out of bounds");
	      if (start < 0 || start >= source.length) throw new TypeError("sourceStart out of bounds");
	      if (end < 0 || end > source.length) throw new TypeError("sourceEnd out of bounds");

	      // Are we oob?
	      if (end > this.length) end = this.length;
	      if (target.length - target_start < end - start) end = target.length - target_start + start;

	      var len = end - start;

	      if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	        for (var i = 0; i < len; i++) {
	          target[i + target_start] = this[i + start];
	        }
	      } else {
	        target._set(this.subarray(start, start + len), target_start);
	      }
	    };

	    // fill(value, start=0, end=buffer.length)
	    Buffer.prototype.fill = function (value, start, end) {
	      if (!value) value = 0;
	      if (!start) start = 0;
	      if (!end) end = this.length;

	      if (end < start) throw new TypeError("end < start");

	      // Fill 0 bytes; we're done
	      if (end === start) return;
	      if (this.length === 0) return;

	      if (start < 0 || start >= this.length) throw new TypeError("start out of bounds");
	      if (end < 0 || end > this.length) throw new TypeError("end out of bounds");

	      var i;
	      if (typeof value === "number") {
	        for (i = start; i < end; i++) {
	          this[i] = value;
	        }
	      } else {
	        var bytes = utf8ToBytes(value.toString());
	        var len = bytes.length;
	        for (i = start; i < end; i++) {
	          this[i] = bytes[i % len];
	        }
	      }

	      return this;
	    };

	    /**
	     * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	     * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	     */
	    Buffer.prototype.toArrayBuffer = function () {
	      if (typeof Uint8Array !== "undefined") {
	        if (Buffer.TYPED_ARRAY_SUPPORT) {
	          return new Buffer(this).buffer;
	        } else {
	          var buf = new Uint8Array(this.length);
	          for (var i = 0, len = buf.length; i < len; i += 1) {
	            buf[i] = this[i];
	          }
	          return buf.buffer;
	        }
	      } else {
	        throw new TypeError("Buffer.toArrayBuffer not supported in this browser");
	      }
	    };

	    // HELPER FUNCTIONS
	    // ================

	    var BP = Buffer.prototype;

	    /**
	     * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	     */
	    Buffer._augment = function (arr) {
	      arr.constructor = Buffer;
	      arr._isBuffer = true;

	      // save reference to original Uint8Array get/set methods before overwriting
	      arr._get = arr.get;
	      arr._set = arr.set;

	      // deprecated, will be removed in node 0.13+
	      arr.get = BP.get;
	      arr.set = BP.set;

	      arr.write = BP.write;
	      arr.toString = BP.toString;
	      arr.toLocaleString = BP.toString;
	      arr.toJSON = BP.toJSON;
	      arr.equals = BP.equals;
	      arr.compare = BP.compare;
	      arr.copy = BP.copy;
	      arr.slice = BP.slice;
	      arr.readUInt8 = BP.readUInt8;
	      arr.readUInt16LE = BP.readUInt16LE;
	      arr.readUInt16BE = BP.readUInt16BE;
	      arr.readUInt32LE = BP.readUInt32LE;
	      arr.readUInt32BE = BP.readUInt32BE;
	      arr.readInt8 = BP.readInt8;
	      arr.readInt16LE = BP.readInt16LE;
	      arr.readInt16BE = BP.readInt16BE;
	      arr.readInt32LE = BP.readInt32LE;
	      arr.readInt32BE = BP.readInt32BE;
	      arr.readFloatLE = BP.readFloatLE;
	      arr.readFloatBE = BP.readFloatBE;
	      arr.readDoubleLE = BP.readDoubleLE;
	      arr.readDoubleBE = BP.readDoubleBE;
	      arr.writeUInt8 = BP.writeUInt8;
	      arr.writeUInt16LE = BP.writeUInt16LE;
	      arr.writeUInt16BE = BP.writeUInt16BE;
	      arr.writeUInt32LE = BP.writeUInt32LE;
	      arr.writeUInt32BE = BP.writeUInt32BE;
	      arr.writeInt8 = BP.writeInt8;
	      arr.writeInt16LE = BP.writeInt16LE;
	      arr.writeInt16BE = BP.writeInt16BE;
	      arr.writeInt32LE = BP.writeInt32LE;
	      arr.writeInt32BE = BP.writeInt32BE;
	      arr.writeFloatLE = BP.writeFloatLE;
	      arr.writeFloatBE = BP.writeFloatBE;
	      arr.writeDoubleLE = BP.writeDoubleLE;
	      arr.writeDoubleBE = BP.writeDoubleBE;
	      arr.fill = BP.fill;
	      arr.inspect = BP.inspect;
	      arr.toArrayBuffer = BP.toArrayBuffer;

	      return arr;
	    };

	    var INVALID_BASE64_RE = /[^+\/0-9A-z]/g;
	  }).call(exports, __webpack_require__(1).Buffer);

	  /***/
	},
	/* 2 */
	/***/function (module, exports, __webpack_require__) {
	  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	    var e,
	        m,
	        eLen = nBytes * 8 - mLen - 1,
	        eMax = (1 << eLen) - 1,
	        eBias = eMax >> 1,
	        nBits = -7,
	        i = isLE ? nBytes - 1 : 0,
	        d = isLE ? -1 : 1,
	        s = buffer[offset + i];

	    i += d;

	    e = s & (1 << -nBits) - 1;
	    s >>= -nBits;
	    nBits += eLen;
	    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

	    m = e & (1 << -nBits) - 1;
	    e >>= -nBits;
	    nBits += mLen;
	    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

	    if (e === 0) {
	      e = 1 - eBias;
	    } else if (e === eMax) {
	      return m ? NaN : (s ? -1 : 1) * Infinity;
	    } else {
	      m = m + Math.pow(2, mLen);
	      e = e - eBias;
	    }
	    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	  };

	  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	    var e,
	        m,
	        c,
	        eLen = nBytes * 8 - mLen - 1,
	        eMax = (1 << eLen) - 1,
	        eBias = eMax >> 1,
	        rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
	        i = isLE ? 0 : nBytes - 1,
	        d = isLE ? 1 : -1,
	        s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

	    value = Math.abs(value);

	    if (isNaN(value) || value === Infinity) {
	      m = isNaN(value) ? 1 : 0;
	      e = eMax;
	    } else {
	      e = Math.floor(Math.log(value) / Math.LN2);
	      if (value * (c = Math.pow(2, -e)) < 1) {
	        e--;
	        c *= 2;
	      }
	      if (e + eBias >= 1) {
	        value += rt / c;
	      } else {
	        value += rt * Math.pow(2, 1 - eBias);
	      }
	      if (value * c >= 2) {
	        e++;
	        c /= 2;
	      }

	      if (e + eBias >= eMax) {
	        m = 0;
	        e = eMax;
	      } else if (e + eBias >= 1) {
	        m = (value * c - 1) * Math.pow(2, mLen);
	        e = e + eBias;
	      } else {
	        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	        e = 0;
	      }
	    }

	    for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);

	    e = e << mLen | m;
	    eLen += mLen;
	    for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);

	    buffer[offset + i - d] |= s * 128;
	  };


	  /***/
	},
	/* 3 */
	/***/function (module, exports, __webpack_require__) {


	  /**
	   * isArray
	   */

	  var isArray = Array.isArray;

	  /**
	   * toString
	   */

	  var str = Object.prototype.toString;

	  /**
	   * Whether or not the given `val`
	   * is an array.
	   *
	   * example:
	   *
	   *        isArray([]);
	   *        // > true
	   *        isArray(arguments);
	   *        // > false
	   *        isArray('');
	   *        // > false
	   *
	   * @param {mixed} val
	   * @return {bool}
	   */

	  module.exports = isArray || function (val) {
	    return !!val && "[object Array]" == str.call(val);
	  };


	  /***/
	},
	/* 4 */
	/***/function (module, exports, __webpack_require__) {
	  var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

	  ;(function (exports) {
	    "use strict";

	    var decode = function (elt) {
	      var code = elt.charCodeAt(0);
	      if (code === PLUS) return 62; // '+'
	      if (code === SLASH) return 63; // '/'
	      if (code < NUMBER) return -1; //no match
	      if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
	      if (code < UPPER + 26) return code - UPPER;
	      if (code < LOWER + 26) return code - LOWER + 26;
	    };

	    var b64ToByteArray = function (b64) {
	      var push = function (v) {
	        arr[L++] = v;
	      };

	      var i, j, l, tmp, placeHolders, arr;

	      if (b64.length % 4 > 0) {
	        throw new Error("Invalid string. Length must be a multiple of 4");
	      }

	      // the number of equal signs (place holders)
	      // if there are two placeholders, than the two characters before it
	      // represent one byte
	      // if there is only one, then the three characters before it represent 2 bytes
	      // this is just a cheap hack to not do indexOf twice
	      var len = b64.length;
	      placeHolders = "=" === b64.charAt(len - 2) ? 2 : "=" === b64.charAt(len - 1) ? 1 : 0;

	      // base64 is 4/3 + up to two characters of the original data
	      arr = new Arr(b64.length * 3 / 4 - placeHolders);

	      // if there are placeholders, only get up to the last complete 4 chars
	      l = placeHolders > 0 ? b64.length - 4 : b64.length;

	      var L = 0;

	      for (i = 0, j = 0; i < l; i += 4, j += 3) {
	        tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
	        push((tmp & 16711680) >> 16);
	        push((tmp & 65280) >> 8);
	        push(tmp & 255);
	      }

	      if (placeHolders === 2) {
	        tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
	        push(tmp & 255);
	      } else if (placeHolders === 1) {
	        tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
	        push(tmp >> 8 & 255);
	        push(tmp & 255);
	      }

	      return arr;
	    };

	    var uint8ToBase64 = function (uint8) {
	      var encode = function (num) {
	        return lookup.charAt(num);
	      };

	      var tripletToBase64 = function (num) {
	        return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);
	      };

	      var i,
	          extraBytes = uint8.length % 3,
	          // if we have 1 byte left, pad 2 bytes
	      output = "",
	          temp,
	          length;

	      // go through the array every three bytes, we'll deal with trailing stuff later
	      for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
	        temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
	        output += tripletToBase64(temp);
	      }

	      // pad the end with zeros, but make sure to not forget the extra bytes
	      switch (extraBytes) {
	        case 1:
	          temp = uint8[uint8.length - 1];
	          output += encode(temp >> 2);
	          output += encode(temp << 4 & 63);
	          output += "==";
	          break;
	        case 2:
	          temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
	          output += encode(temp >> 10);
	          output += encode(temp >> 4 & 63);
	          output += encode(temp << 2 & 63);
	          output += "=";
	          break;
	      }

	      return output;
	    };

	    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

	    var PLUS = "+".charCodeAt(0);
	    var SLASH = "/".charCodeAt(0);
	    var NUMBER = "0".charCodeAt(0);
	    var LOWER = "a".charCodeAt(0);
	    var UPPER = "A".charCodeAt(0);

	    exports.toByteArray = b64ToByteArray;
	    exports.fromByteArray = uint8ToBase64;
	  })(false ? this.base64js = {} : exports);


	  /***/
	}
	/******/]);
	/************************************************************************/
	/******/

/***/ }
/******/ ])